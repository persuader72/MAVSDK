// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/remote_id/remote_id.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class RemoteIdImpl;

/**
 * @brief
 */
class RemoteId : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto remote_id = RemoteId(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit RemoteId(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto remote_id = RemoteId(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit RemoteId(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~RemoteId() override;

    /**
     * @brief
     */
    struct BasicId {
        /**
         * @brief
         */
        enum class IdType {
            None, /**< @brief No type defined.. */
            SerialNumber, /**< @brief Manufacturer Serial Number (ANSI/CTA-2063 format).. */
            CaaRegistrationId, /**< @brief CAA (Civil Aviation Authority) registered ID. Format:
                                  [ICAO Country Code].[CAA Assigned ID].. */
            UtmAssignedUuid, /**< @brief UTM (Unmanned Traffic Management) assigned UUID (RFC4122)..
                              */
            SpecificSessionId, /**< @brief A 20 byte ID for a specific flight/session.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::IdType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::BasicId::IdType const& id_type);

        /**
         * @brief
         */
        enum class UasType {
            None, /**< @brief No UA (Unmanned Aircraft) type defined.. */
            Aeroplane, /**< @brief Aeroplane/Airplane. Fixed wing.. */
            HelicopterOrMultirotor, /**< @brief Helicopter or multirotor.. */
            Gyroplane, /**< @brief Gyroplane.. */
            HybridLift, /**< @brief VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that
                           can take off vertically.. */
            Ornithopter, /**< @brief Ornithopter.. */
            Glider, /**< @brief Glider.. */
            Kite, /**< @brief Kite.. */
            FreeBalloon, /**< @brief Free Balloon.. */
            CaptiveBalloon, /**< @brief Captive Balloon.. */
            Airship, /**< @brief Airship. E.g. a blimp.. */
            FreeFallParachute, /**< @brief Free Fall/Parachute (unpowered).. */
            Rocket, /**< @brief Rocket.. */
            TetheredPoweredAircraft, /**< @brief Tethered powered aircraft.. */
            GroundObstacle, /**< @brief Ground Obstacle.. */
            Other, /**< @brief Other type of aircraft not listed earlier.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::UasType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::BasicId::UasType const& uas_type);

        IdType id_type{}; /**< @brief Indicates the format for the uas_id field of this message. */
        UasType ua_type{}; /**< @brief Indicates the type of UA (Unmanned Aircraft). */
        std::string uas_id{}; /**< @brief UAS ID following the format specified by id_type. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::BasicId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::BasicId& lhs, const RemoteId::BasicId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::BasicId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::BasicId const& basic_id);

    /**
     * @brief
     */
    struct Location {
        /**
         * @brief
         */
        enum class Status {
            Undeclared, /**< @brief The status of the (UA) Unmanned Aircraft is undefined.. */
            Ground, /**< @brief The UA is on the ground.. */
            Airborne, /**< @brief The UA is in the air.. */
            Emergency, /**< @brief The UA is having an emergency.. */
            RemoteIdSystemFailure, /**< @brief The remote ID system is failing or unreliable in some
                                      way.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::Status`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::Location::Status const& status);

        /**
         * @brief
         */
        enum class HeightRef {
            OverTakeoff, /**< @brief The height field is relative to the take-off location.. */
            OverGround, /**< @brief The height field is relative to ground.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::HeightRef`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::Location::HeightRef const& height_ref);

        Status status{}; /**< @brief Indicates whether the unmanned aircraft is on the ground or in
                            the air. */
        uint32_t direction_deg{}; /**< @brief Direction over ground measured clockwise from true
                                     North: 0 - 359 deg. */
        float
            speed_horizontal_m_s{}; /**< @brief Ground speed in meters per second. Positive only. */
        float speed_vertical_m_s{}; /**< @brief The vertical speed in meters per second. Up is
                                       positive. */
        double latitude_deg{}; /**< @brief Current latitude of the unmanned aircraft */
        double longitude_deg{}; /**< @brief Current longitude of the unmanned aircraft */
        float altitude_barometric_m{}; /**< @brief The altitude calculated from the barometric
                                          pressure. */
        float altitude_geodetic_m{}; /**< @brief The geodetic altitude as defined by WGS84. */
        HeightRef
            height_reference{}; /**< @brief Indicates the reference point for the height field. */
        float height_m{}; /**< @brief The current height of the unmanned aircraft. As indicated by
                             height_reference. */
        uint64_t time_utc_us{}; /**< @brief Timestamp in UTC (since UNIX epoch) in microseconds */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::Location` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::Location& lhs, const RemoteId::Location& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::Location`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::Location const& location);

    /**
     * @brief
     */
    struct LocationAccuracy {
        /**
         * @brief
         */
        enum class HorAcc {
            Unknown, /**< @brief The horizontal accuracy is unknown.. */
            Nm10, /**< @brief The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km..
                   */
            Nm4, /**< @brief The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.. */
            Nm2, /**< @brief The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.. */
            Nm1, /**< @brief The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.. */
            Nm05, /**< @brief The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.. */
            Nm03, /**< @brief The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m..
                   */
            Nm01, /**< @brief The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m..
                   */
            Nm005, /**< @brief The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m..
                    */
            Meter30, /**< @brief The horizontal accuracy is smaller than 30 meter.. */
            Meter10, /**< @brief The horizontal accuracy is smaller than 10 meter.. */
            Meter3, /**< @brief The horizontal accuracy is smaller than 3 meter.. */
            Meter1, /**< @brief The horizontal accuracy is smaller than 1 meter. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::HorAcc`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::LocationAccuracy::HorAcc const& hor_acc);

        /**
         * @brief
         */
        enum class VerAcc {
            Unknown, /**< @brief The vertical accuracy is unknown.. */
            Meter150, /**< @brief The vertical accuracy is smaller than 150 meter.. */
            Meter45, /**< @brief The vertical accuracy is smaller than 45 meter.. */
            Meter25, /**< @brief The vertical accuracy is smaller than 25 meter.. */
            Meter10, /**< @brief The vertical accuracy is smaller than 10 meter.. */
            Meter3, /**< @brief The vertical accuracy is smaller than 3 meter.. */
            Meter1, /**< @brief The vertical accuracy is smaller than 1 meter.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::VerAcc`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::LocationAccuracy::VerAcc const& ver_acc);

        /**
         * @brief
         */
        enum class SpeedAcc {
            Unknown, /**< @brief The speed accuracy is unknown.. */
            MetersPerSecond10, /**< @brief The speed accuracy is smaller than 10 meters per second..
                                */
            MetersPerSecon3, /**< @brief The speed accuracy is smaller than 3 meters per second.. */
            MetersPerSecond1, /**< @brief The speed accuracy is smaller than 1 meters per second..
                               */
            MetersPerSecond03, /**< @brief The speed accuracy is smaller than 0.3 meters per
                                  second.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::SpeedAcc`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::LocationAccuracy::SpeedAcc const& speed_acc);

        /**
         * @brief
         */
        enum class TimeAcc {
            Unknown, /**< @brief The timestamp accuracy is unknown.. */
            Second01, /**< @brief The timestamp accuracy is smaller than or equal to 0.1 second.. */
            Second02, /**< @brief The timestamp accuracy is smaller than or equal to 0.2 second.. */
            Second03, /**< @brief The timestamp accuracy is smaller than or equal to 0.3 second.. */
            Second04, /**< @brief The timestamp accuracy is smaller than or equal to 0.4 second.. */
            Second05, /**< @brief The timestamp accuracy is smaller than or equal to 0.5 second.. */
            Second06, /**< @brief The timestamp accuracy is smaller than or equal to 0.6 second.. */
            Second07, /**< @brief The timestamp accuracy is smaller than or equal to 0.7 second.. */
            Second08, /**< @brief The timestamp accuracy is smaller than or equal to 0.8 second.. */
            Second09, /**< @brief The timestamp accuracy is smaller than or equal to 0.9 second.. */
            Second10, /**< @brief The timestamp accuracy is smaller than or equal to 1.0 second.. */
            Second11, /**< @brief The timestamp accuracy is smaller than or equal to 1.1 second.. */
            Second12, /**< @brief The timestamp accuracy is smaller than or equal to 1.2 second.. */
            Second13, /**< @brief The timestamp accuracy is smaller than or equal to 1.3 second.. */
            Second14, /**< @brief The timestamp accuracy is smaller than or equal to 1.4 second.. */
            Second15, /**< @brief The timestamp accuracy is smaller than or equal to 1.5 second.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::TimeAcc`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::LocationAccuracy::TimeAcc const& time_acc);

        HorAcc horizontal_accuracy{}; /**< @brief The accuracy of the horizontal position. */
        VerAcc vertical_accuracy{}; /**< @brief The accuracy of the vertical position. */
        VerAcc barometer_accuracy{}; /**< @brief The accuracy of the barometric altitude. */
        SpeedAcc speed_accuracy{}; /**< @brief The accuracy of the horizontal and vertical speed. */
        TimeAcc timestamp_accuracy{}; /**< @brief The accuracy of the timestamps. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::LocationAccuracy` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const RemoteId::LocationAccuracy& lhs, const RemoteId::LocationAccuracy& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::LocationAccuracy`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, RemoteId::LocationAccuracy const& location_accuracy);

    /**
     * @brief
     */
    struct SystemId {
        /**
         * @brief
         */
        enum class OperatorLocationType {
            Takeoff, /**< @brief The location/altitude of the operator is the same as the take-off
                        location.. */
            LiveGnss, /**< @brief The location/altitude of the operator is dynamic. E.g. based on
                         live GNSS data.. */
            Fixed, /**< @brief The location/altitude of the operator are fixed values.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::OperatorLocationType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream& operator<<(
            std::ostream& str,
            RemoteId::SystemId::OperatorLocationType const& operator_location_type);

        /**
         * @brief
         */
        enum class ClassificationType {
            Undeclared, /**< @brief The classification type for the UA is undeclared.. */
            Eu, /**< @brief The classification type for the UA follows EU (European Union)
                   specifications.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::ClassificationType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream& operator<<(
            std::ostream& str, RemoteId::SystemId::ClassificationType const& classification_type);

        /**
         * @brief
         */
        enum class CategoryEu {
            Undeclared, /**< @brief The category for the UA, according to the EU specification, is
                           undeclared.. */
            Open, /**< @brief The category for the UA, according to the EU specification, is the
                     Open category.. */
            Specific, /**< @brief The category for the UA, according to the EU specification, is the
                         Specific category.. */
            Certified, /**< @brief The category for the UA, according to the EU specification, is
                          the Certified category.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::CategoryEu`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::SystemId::CategoryEu const& category_eu);

        /**
         * @brief
         */
        enum class ClassEu {
            Undeclared, /**< @brief The class for the UA, according to the EU specification, is
                           undeclared.. */
            Class0, /**< @brief The class for the UA, according to the EU specification, is Class
                       0.. */
            Class1, /**< @brief The class for the UA, according to the EU specification, is
                       Class 1.. */
            Class2, /**< @brief The class for the UA, according to the EU specification, is
                       Class 2.. */
            Class3, /**< @brief The class for the UA, according to the EU specification, is
                       Class 3.. */
            Class4, /**< @brief The class for the UA, according to the EU specification, is
                       Class 4.. */
            Class5, /**< @brief The class for the UA, according to the EU specification, is
                       Class 5.. */
            Class6, /**< @brief The class for the UA, according to the EU specification, is
                       Class 6.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::ClassEu`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::SystemId::ClassEu const& class_eu);

        OperatorLocationType
            operator_location_type{}; /**< @brief Specifies the operator location type. */
        ClassificationType
            classification_type{}; /**< @brief Specifies the classification type of the UA. */
        double operator_latitude_deg{}; /**< @brief Latitude of the operator. */
        double operator_longitude_deg{}; /**< @brief Longitude of the operator. */
        uint32_t area_count{}; /**< @brief Number of aircraft in the area. */
        uint32_t area_radius_m{}; /**< @brief Radius of the cylindrical area of the group or
                                     formation. */
        float area_ceiling_m{}; /**< @brief Area Operations Ceiling relative to WGS84. */
        float area_floor_m{}; /**< @brief Area Operations Floor relative to WGS84. */
        CategoryEu
            category_eu{}; /**< @brief When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU,
                              specifies the category of the UA. */
        ClassEu class_eu{}; /**< @brief When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU,
                               specifies the class of the UA. */
        float operator_altitude_geo_m{}; /**< @brief Geodetic altitude of the operator relative to
                                            WGS84. If unknown: -1000 m. */
        uint64_t time_utc_us{}; /**< @brief Timestamp in UTC (since UNIX epoch) in microseconds */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::SystemId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::SystemId& lhs, const RemoteId::SystemId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::SystemId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::SystemId const& system_id);

    /**
     * @brief
     */
    struct OperatorId {
        /**
         * @brief
         */
        enum class OperatorIdType {
            Caa, /**< @brief CAA (Civil Aviation Authority) registered operator ID.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::OperatorIdType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::OperatorId::OperatorIdType const& operator_id_type);

        OperatorIdType
            operator_id_type{}; /**< @brief Indicates the type of the description field. */
        std::string operator_id{}; /**< @brief Text description or numeric value expressed as ASCII
                                      characters. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::OperatorId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::OperatorId& lhs, const RemoteId::OperatorId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::OperatorId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::OperatorId const& operator_id);

    /**
     * @brief
     */
    struct SelfId {
        /**
         * @brief
         */
        enum class DescType {
            Text, /**< @brief Optional free-form text description of the purpose of the flight.. */
            Emergency, /**< @brief Optional additional clarification when status ==
                          MAV_ODID_STATUS_EMERGENCY.. */
            ExtendedStatus, /**< @brief Optional additional clarification when status !=
                               MAV_ODID_STATUS_EMERGENCY.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::DescType`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::SelfId::DescType const& desc_type);

        DescType description_type{}; /**< @brief Indicates the type of the operator_id field. */
        std::string description{}; /**< @brief Text description or numeric value expressed as ASCII
                                      characters. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::SelfId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::SelfId& lhs, const RemoteId::SelfId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::SelfId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::SelfId const& self_id);

    /**
     * @brief
     */
    struct ArmStatus {
        /**
         * @brief
         */
        enum class Status {
            GoodToArm, /**< @brief Passing arming checks.. */
            PreArmFailGeneric, /**< @brief Generic arming failure, see error string for details.. */
        };

        /**
         * @brief Stream operator to print information about a `RemoteId::Status`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream&
        operator<<(std::ostream& str, RemoteId::ArmStatus::Status const& status);

        Status status{}; /**< @brief Status level indicating if arming is allowed. */
        std::string error{}; /**< @brief Text error message, should be empty if status is good to
                                arm. Fill with nulls in unused portion. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::ArmStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::ArmStatus& lhs, const RemoteId::ArmStatus& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::ArmStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::ArmStatus const& arm_status);

    /**
     * @brief Possible results returned for camera commands
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Command executed successfully. */
        Error, /**< @brief An error has occurred while executing the command. */
    };

    /**
     * @brief Stream operator to print information about a `RemoteId::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::Result const& result);

    /**
     * @brief Callback type for asynchronous RemoteId calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Update the BasicId structure sent with the basic_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_basic_id(BasicId basic_id) const;

    /**
     * @brief Update the Location structure sent with the location packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_location(Location location) const;

    /**
     * @brief Update the LocationAccuracy structure sent with the location_accuracy packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_location_accuracy(LocationAccuracy location_accuracy) const;

    /**
     * @brief Update the System structure sent with the system packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_system(SystemId system) const;

    /**
     * @brief Update the OperatorId structure sent with the operator_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_operator_id(OperatorId system) const;

    /**
     * @brief Update the SetSelfId structure sent with the self_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_self_id(SelfId self_id) const;

    /**
     * @brief Callback type for subscribe_arm_status.
     */
    using ArmStatusCallback = std::function<void(ArmStatus)>;

    /**
     * @brief Handle type for subscribe_arm_status.
     */
    using ArmStatusHandle = Handle<ArmStatus>;

    /**
     * @brief Subscribe to arm status updates.
     */
    ArmStatusHandle subscribe_arm_status(const ArmStatusCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_arm_status
     */
    void unsubscribe_arm_status(ArmStatusHandle handle);

    /**
     * @brief Poll for 'ArmStatus' (blocking).
     *
     * @return One ArmStatus update.
     */
    ArmStatus arm_status() const;

    /**
     * @brief Copy constructor.
     */
    RemoteId(const RemoteId& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const RemoteId& operator=(const RemoteId&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<RemoteIdImpl> _impl;
};

} // namespace mavsdk