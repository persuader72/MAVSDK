// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/remote_id/remote_id.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class RemoteIdImpl;

/**
 * @brief
 */
class RemoteId : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto remote_id = RemoteId(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit RemoteId(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto remote_id = RemoteId(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit RemoteId(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~RemoteId() override;

    /**
     * @brief
     */
    struct BasicId {
        uint32_t
            id_type{}; /**< @brief Indicates the format for the uas_id field of this message. */
        uint32_t ua_type{}; /**< @brief Indicates the type of UA (Unmanned Aircraft). */
        std::string uas_id{}; /**< @brief UAS ID following the format specified by id_type. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::BasicId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::BasicId& lhs, const RemoteId::BasicId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::BasicId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::BasicId const& basic_id);

    /**
     * @brief
     */
    struct Location {
        uint32_t status{}; /**< @brief Indicates whether the unmanned aircraft is on the ground or
                              in the air. */
        uint32_t direction{}; /**< @brief Direction over ground measured clockwise from true North:
                                 0 - 35999 cdeg. */
        uint32_t speed_horizontal{}; /**< @brief Ground speed. Positive only. cm/s */
        int32_t speed_vertical{}; /**< @brief The vertical speed. Up is positive. cm/s */
        int32_t latitude{}; /**< @brief Current latitude of the unmanned aircraft */
        int32_t longitude{}; /**< @brief Current longitude of the unmanned aircraft */
        float altitude_barometric{}; /**< @brief The altitude calculated from the barometric
                                        pressue. */
        float altitude_geodetic{}; /**< @brief The geodetic altitude as defined by WGS84. */
        uint32_t
            height_reference{}; /**< @brief Indicates the reference point for the height field. */
        float height{}; /**< @brief The current height of the unmanned aircraft. As indicated by
                           height_reference. */
        float timestamp{}; /**< @brief Seconds after the full hour with reference to UTC time. */
        uint32_t timestamp_accuracy{}; /**< @brief The accuracy of the timestamps. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::Location` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::Location& lhs, const RemoteId::Location& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::Location`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::Location const& location);

    /**
     * @brief
     */
    struct SystemId {
        uint32_t operator_location_type{}; /**< @brief Specifies the operator location type. */
        uint32_t classification_type{}; /**< @brief Specifies the classification type of the UA. */
        int32_t operator_latitude{}; /**< @brief Latitude of the operator. */
        int32_t operator_longitude{}; /**< @brief Longitude of the operator. */
        uint32_t area_count{}; /**< @brief Number of aircraft in the area, */
        uint32_t
            area_radius{}; /**< @brief Radius of the cylindrical area of the group or formation. */
        float area_ceiling{}; /**< @brief Area Operations Ceiling relative to WGS84. */
        float area_floor{}; /**< @brief Area Operations Floor relative to WGS84. */
        uint32_t
            category_eu{}; /**< @brief When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU,
                              specifies the category of the UA. */
        uint32_t class_eu{}; /**< @brief When classification_type is
                                MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA. */
        float operator_altitude_geo{}; /**< @brief Geodetic altitude of the operator relative to
                                          WGS84. If unknown: -1000 m. */
        uint32_t
            timestamp{}; /**< @brief s32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::SystemId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::SystemId& lhs, const RemoteId::SystemId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::SystemId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::SystemId const& system_id);

    /**
     * @brief
     */
    struct OperatorId {
        uint32_t operator_id_type{}; /**< @brief Indicates the type of the description field. */
        std::string operator_id{}; /**< @brief Text description or numeric value expressed as ASCII
                                      characters. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::OperatorId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::OperatorId& lhs, const RemoteId::OperatorId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::OperatorId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::OperatorId const& operator_id);

    /**
     * @brief
     */
    struct SelfId {
        uint32_t description_type{}; /**< @brief Indicates the type of the operator_id field. */
        std::string description{}; /**< @brief Text description or numeric value expressed as ASCII
                                      characters. */
    };

    /**
     * @brief Equal operator to compare two `RemoteId::SelfId` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const RemoteId::SelfId& lhs, const RemoteId::SelfId& rhs);

    /**
     * @brief Stream operator to print information about a `RemoteId::SelfId`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::SelfId const& self_id);

    /**
     * @brief Possible results returned for camera commands
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Command executed successfully. */
        Error, /**< @brief An error has occurred while executing the command. */
    };

    /**
     * @brief Stream operator to print information about a `RemoteId::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, RemoteId::Result const& result);

    /**
     * @brief Callback type for asynchronous RemoteId calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Update the BasicId strucutre sent with the basic_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_basic_id(BasicId basic_id) const;

    /**
     * @brief Update the Location strucutre sent with the location packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_location(Location location) const;

    /**
     * @brief Update the System strucutre sent with the system packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_system(SystemId system) const;

    /**
     * @brief Update the OperatorId strucutre sent with the operator_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_operator_id(OperatorId system) const;

    /**
     * @brief Update the SetSelfId strucutre sent with the self_id packet
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_self_id(SelfId self_id) const;

    /**
     * @brief Copy constructor.
     */
    RemoteId(const RemoteId& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const RemoteId& operator=(const RemoteId&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<RemoteIdImpl> _impl;
};

} // namespace mavsdk