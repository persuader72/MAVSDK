// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/gimbal_manager_server/gimbal_manager_server.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "server_plugin_base.h"

#include "handle.h"

namespace mavsdk {

class ServerComponent;
class GimbalManagerServerImpl;

/**
 * @brief Provides handling of gimbal manager commands
 */
class GimbalManagerServer : public ServerPluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a ServerComponent instance.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto gimbal_manager_server = GimbalManagerServer(server_component);
     *     ```
     *
     * @param server_component The ServerComponent instance associated with this server plugin.
     */
    explicit GimbalManagerServer(std::shared_ptr<ServerComponent> server_component);

    /**
     * @brief Destructor (internal use only).
     */
    ~GimbalManagerServer() override;

    /**
     * @brief Quaternion type.
     *
     * All rotations and axis systems follow the right-hand rule.
     * The Hamilton quaternion product definition is used.
     * A zero-rotation quaternion is represented by (1,0,0,0).
     * The quaternion could also be written as w + xi + yj + zk.
     *
     * For more info see: https://en.wikipedia.org/wiki/Quaternion
     */
    struct Quaternion {
        float w{}; /**< @brief Quaternion entry 0, also denoted as a */
        float x{}; /**< @brief Quaternion entry 1, also denoted as b */
        float y{}; /**< @brief Quaternion entry 2, also denoted as c */
        float z{}; /**< @brief Quaternion entry 3, also denoted as d */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::Quaternion` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::Quaternion& lhs, const GimbalManagerServer::Quaternion& rhs);

    /**
     * @brief Stream operator to print information about a `GimbalManagerServer::Quaternion`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, GimbalManagerServer::Quaternion const& quaternion);

    /**
     * @brief Set Gimbal manager hardware informations.
     */
    struct Information {
        uint32_t cap_flags{}; /**< @brief Bitmap of gimbal capability flags. */
        uint32_t gimbal_device_id{}; /**< @brief Gimbal device ID that this gimbal manager is
                                        responsible for. */
        float roll_min{}; /**< @brief [rad] Minimum hardware roll angle (positive: rolling to the
                             right, negative: rolling to the left) */
        float roll_max{}; /**< @brief [rad] Maximum hardware roll angle (positive: rolling to the
                             right, negative: rolling to the left) */
        float pitch_min{}; /**< @brief [rad] Minimum pitch angle (positive: up, negative: down) */
        float pitch_max{}; /**< @brief [rad] Maximum pitch angle (positive: up, negative: down) */
        float yaw_min{}; /**< @brief [rad] Maximum pitch angle (positive: up, negative: down) */
        float yaw_max{}; /**< @brief [rad] Maximum yaw angle (positive: to the right, negative: to
                            the left) */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::Information` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::Information& lhs, const GimbalManagerServer::Information& rhs);

    /**
     * @brief Stream operator to print information about a `GimbalManagerServer::Information`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, GimbalManagerServer::Information const& information);

    /**
     * @brief Gimbal manager configuration
     */
    struct GimbalManagerConfiguration {
        uint32_t sysid_primary_control{}; /**< @brief */
        uint32_t compid_primary_control{}; /**< @brief */
        uint32_t sysid_secondary_control{}; /**< @brief */
        uint32_t compid_secondary_control{}; /**< @brief */
        uint32_t gimbal_device_id{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::GimbalManagerConfiguration`
     * objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::GimbalManagerConfiguration& lhs,
        const GimbalManagerServer::GimbalManagerConfiguration& rhs);

    /**
     * @brief Stream operator to print information about a
     * `GimbalManagerServer::GimbalManagerConfiguration`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(
        std::ostream& str,
        GimbalManagerServer::GimbalManagerConfiguration const& gimbal_manager_configuration);

    /**
     * @brief
     */
    struct DeviceAttitudeStatus {
        uint32_t time_boot_ms{}; /**< @brief Timestamp (time since system boot). */
        uint32_t flags{}; /**< @brief Current gimbal flags set. */
        Quaternion q{}; /**< @brief Quaternion components, w, x, y, z */
        float angular_velocity_x{}; /**< @brief X component of angular velocity (positive: rolling
                                       to the right). NaN if unknown. */
        float angular_velocity_y{}; /**< @brief Y component of angular velocity (positive: rolling
                                       to the right). NaN if unknown. */
        float angular_velocity_z{}; /**< @brief Z component of angular velocity (positive: rolling
                                       to the right). NaN if unknown. */
        uint32_t failure_flags{}; /**< @brief Failure flags (0 for no failure) */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::DeviceAttitudeStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::DeviceAttitudeStatus& lhs,
        const GimbalManagerServer::DeviceAttitudeStatus& rhs);

    /**
     * @brief Stream operator to print information about a
     * `GimbalManagerServer::DeviceAttitudeStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(
        std::ostream& str, GimbalManagerServer::DeviceAttitudeStatus const& device_attitude_status);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Command executed successfully. */
        InProgress, /**< @brief Command in progress. */
        Busy, /**< @brief Camera is busy and rejected command. */
        Denied, /**< @brief Camera denied the command. */
        Error, /**< @brief An error has occurred while executing the command. */
        Timeout, /**< @brief Command timed out. */
        WrongArgument, /**< @brief Command has wrong argument(s). */
        NoSystem, /**< @brief No system connected. */
    };

    /**
     * @brief Stream operator to print information about a `GimbalManagerServer::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, GimbalManagerServer::Result const& result);

    /**
     * @brief Information about the gimbal manager status.
     */
    struct GimbalManagerStatus {
        uint32_t flags{}; /**< @brief High level gimbal manager flags currently applied. */
        uint32_t gimbal_device_id{}; /**< @brief Gimbal device ID that this gimbal manager is
                                        responsible for. Component ID of gimbal device (or 1-6 for
                                        non-MAVLink gimbal). */
        uint32_t primary_control_sysid{}; /**< @brief System ID of MAVLink component with primary
                                             control, 0 for none. */
        uint32_t primary_control_compid{}; /**< @brief Component ID of MAVLink component with
                                              primary control, 0 for none. */
        uint32_t secondary_control_sysid{}; /**< @brief System ID of MAVLink component with
                                               secondary control, 0 for none. */
        uint32_t secondary_control_compid{}; /**< @brief Component ID of MAVLink component with
                                                secondary control, 0 for none. */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::GimbalManagerStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::GimbalManagerStatus& lhs,
        const GimbalManagerServer::GimbalManagerStatus& rhs);

    /**
     * @brief Stream operator to print information about a
     * `GimbalManagerServer::GimbalManagerStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(
        std::ostream& str, GimbalManagerServer::GimbalManagerStatus const& gimbal_manager_status);

    /**
     * @brief Set Attitude
     */
    struct SetAttitude {
        uint32_t flags{}; /**< @brief */
        Quaternion attitude_quaternion{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::SetAttitude` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::SetAttitude& lhs, const GimbalManagerServer::SetAttitude& rhs);

    /**
     * @brief Stream operator to print information about a `GimbalManagerServer::SetAttitude`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, GimbalManagerServer::SetAttitude const& set_attitude);

    /**
     * @brief Position type in global coordinates.
     */
    struct RoiLocation {
        uint32_t gimbal_id{}; /**< @brief Component ID of gimbal device to address */
        double latitude_deg{}; /**< @brief Latitude in degrees (range: -90 to +90) */
        double longitude_deg{}; /**< @brief Longitude in degrees (range: -180 to +180) */
        float absolute_altitude_m{}; /**< @brief Altitude AMSL (above mean sea level) in metres */
    };

    /**
     * @brief Equal operator to compare two `GimbalManagerServer::RoiLocation` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const GimbalManagerServer::RoiLocation& lhs, const GimbalManagerServer::RoiLocation& rhs);

    /**
     * @brief Stream operator to print information about a `GimbalManagerServer::RoiLocation`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, GimbalManagerServer::RoiLocation const& roi_location);

    /**
     * @brief Callback type for asynchronous GimbalManagerServer calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Sets the gimbal manager information. This must be called as soon as the gimbal manager
     * server is created.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_information(Information information) const;

    /**
     * @brief Callback type for subscribe_device_discovered.
     */
    using DeviceDiscoveredCallback = std::function<void(Information)>;

    /**
     * @brief Handle type for subscribe_device_discovered.
     */
    using DeviceDiscoveredHandle = Handle<Information>;

    /**
     * @brief Subscribe for device discovered events
     */
    DeviceDiscoveredHandle subscribe_device_discovered(const DeviceDiscoveredCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_device_discovered
     */
    void unsubscribe_device_discovered(DeviceDiscoveredHandle handle);

    /**
     * @brief Poll for 'Information' (blocking).
     *
     * @return One Information update.
     */
    Information device_discovered() const;

    /**
     * @brief Callback type for subscribe_gimbal_manager_configured.
     */
    using GimbalManagerConfiguredCallback = std::function<void(GimbalManagerConfiguration)>;

    /**
     * @brief Handle type for subscribe_gimbal_manager_configured.
     */
    using GimbalManagerConfiguredHandle = Handle<GimbalManagerConfiguration>;

    /**
     * @brief Subscribe for gimbal manager configuration
     */
    GimbalManagerConfiguredHandle
    subscribe_gimbal_manager_configured(const GimbalManagerConfiguredCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_gimbal_manager_configured
     */
    void unsubscribe_gimbal_manager_configured(GimbalManagerConfiguredHandle handle);

    /**
     * @brief Poll for 'GimbalManagerConfiguration' (blocking).
     *
     * @return One GimbalManagerConfiguration update.
     */
    GimbalManagerConfiguration gimbal_manager_configured() const;

    /**
     * @brief Callback type for subscribe_device_attitude_status.
     */
    using DeviceAttitudeStatusCallback = std::function<void(DeviceAttitudeStatus)>;

    /**
     * @brief Handle type for subscribe_device_attitude_status.
     */
    using DeviceAttitudeStatusHandle = Handle<DeviceAttitudeStatus>;

    /**
     * @brief Subscribe for device attitude status events
     */
    DeviceAttitudeStatusHandle
    subscribe_device_attitude_status(const DeviceAttitudeStatusCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_device_attitude_status
     */
    void unsubscribe_device_attitude_status(DeviceAttitudeStatusHandle handle);

    /**
     * @brief Poll for 'DeviceAttitudeStatus' (blocking).
     *
     * @return One DeviceAttitudeStatus update.
     */
    DeviceAttitudeStatus device_attitude_status() const;

    /**
     * @brief Get the local gimbal manager status
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    GimbalManagerServer::GimbalManagerStatus get_gimbal_manager_status() const;

    /**
     * @brief Callback type for subscribe_set_attitude.
     */
    using SetAttitudeCallback = std::function<void(SetAttitude)>;

    /**
     * @brief Handle type for subscribe_set_attitude.
     */
    using SetAttitudeHandle = Handle<SetAttitude>;

    /**
     * @brief Subscribe set attiutde requests
     */
    SetAttitudeHandle subscribe_set_attitude(const SetAttitudeCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_set_attitude
     */
    void unsubscribe_set_attitude(SetAttitudeHandle handle);

    /**
     * @brief Callback type for subscribe_set_roi_location.
     */
    using SetRoiLocationCallback = std::function<void(RoiLocation)>;

    /**
     * @brief Handle type for subscribe_set_roi_location.
     */
    using SetRoiLocationHandle = Handle<RoiLocation>;

    /**
     * @brief Subscribe set roi requests
     */
    SetRoiLocationHandle subscribe_set_roi_location(const SetRoiLocationCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_set_roi_location
     */
    void unsubscribe_set_roi_location(SetRoiLocationHandle handle);

    /**
     * @brief Copy constructor.
     */
    GimbalManagerServer(const GimbalManagerServer& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const GimbalManagerServer& operator=(const GimbalManagerServer&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<GimbalManagerServerImpl> _impl;
};

} // namespace mavsdk