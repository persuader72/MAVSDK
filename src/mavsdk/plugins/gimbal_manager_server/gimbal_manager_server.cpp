// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/gimbal_manager_server/gimbal_manager_server.proto)

#include <iomanip>

#include "gimbal_manager_server_impl.h"
#include "plugins/gimbal_manager_server/gimbal_manager_server.h"

namespace mavsdk {

using Quaternion = GimbalManagerServer::Quaternion;
using Information = GimbalManagerServer::Information;
using GimbalManagerConfiguration = GimbalManagerServer::GimbalManagerConfiguration;
using DeviceAttitudeStatus = GimbalManagerServer::DeviceAttitudeStatus;

using GimbalManagerStatus = GimbalManagerServer::GimbalManagerStatus;
using SetAttitude = GimbalManagerServer::SetAttitude;
using RoiLocation = GimbalManagerServer::RoiLocation;

GimbalManagerServer::GimbalManagerServer(std::shared_ptr<ServerComponent> server_component) :
    ServerPluginBase(),
    _impl{std::make_unique<GimbalManagerServerImpl>(server_component)}
{}

GimbalManagerServer::~GimbalManagerServer() {}

GimbalManagerServer::Result GimbalManagerServer::set_information(Information information) const
{
    return _impl->set_information(information);
}

GimbalManagerServer::DeviceDiscoveredHandle
GimbalManagerServer::subscribe_device_discovered(const DeviceDiscoveredCallback& callback)
{
    return _impl->subscribe_device_discovered(callback);
}

void GimbalManagerServer::unsubscribe_device_discovered(DeviceDiscoveredHandle handle)
{
    _impl->unsubscribe_device_discovered(handle);
}

GimbalManagerServer::Information GimbalManagerServer::device_discovered() const
{
    return _impl->device_discovered();
}

GimbalManagerServer::GimbalManagerConfiguredHandle
GimbalManagerServer::subscribe_gimbal_manager_configured(
    const GimbalManagerConfiguredCallback& callback)
{
    return _impl->subscribe_gimbal_manager_configured(callback);
}

void GimbalManagerServer::unsubscribe_gimbal_manager_configured(
    GimbalManagerConfiguredHandle handle)
{
    _impl->unsubscribe_gimbal_manager_configured(handle);
}

GimbalManagerServer::GimbalManagerConfiguration
GimbalManagerServer::gimbal_manager_configured() const
{
    return _impl->gimbal_manager_configured();
}

GimbalManagerServer::DeviceAttitudeStatusHandle
GimbalManagerServer::subscribe_device_attitude_status(const DeviceAttitudeStatusCallback& callback)
{
    return _impl->subscribe_device_attitude_status(callback);
}

void GimbalManagerServer::unsubscribe_device_attitude_status(DeviceAttitudeStatusHandle handle)
{
    _impl->unsubscribe_device_attitude_status(handle);
}

GimbalManagerServer::DeviceAttitudeStatus GimbalManagerServer::device_attitude_status() const
{
    return _impl->device_attitude_status();
}

GimbalManagerServer::GimbalManagerStatus GimbalManagerServer::get_gimbal_manager_status() const
{
    return _impl->get_gimbal_manager_status();
}

GimbalManagerServer::SetAttitudeHandle
GimbalManagerServer::subscribe_set_attitude(const SetAttitudeCallback& callback)
{
    return _impl->subscribe_set_attitude(callback);
}

void GimbalManagerServer::unsubscribe_set_attitude(SetAttitudeHandle handle)
{
    _impl->unsubscribe_set_attitude(handle);
}

GimbalManagerServer::SetRoiLocationHandle
GimbalManagerServer::subscribe_set_roi_location(const SetRoiLocationCallback& callback)
{
    return _impl->subscribe_set_roi_location(callback);
}

void GimbalManagerServer::unsubscribe_set_roi_location(SetRoiLocationHandle handle)
{
    _impl->unsubscribe_set_roi_location(handle);
}

bool operator==(
    const GimbalManagerServer::Quaternion& lhs, const GimbalManagerServer::Quaternion& rhs)
{
    return ((std::isnan(rhs.w) && std::isnan(lhs.w)) || rhs.w == lhs.w) &&
           ((std::isnan(rhs.x) && std::isnan(lhs.x)) || rhs.x == lhs.x) &&
           ((std::isnan(rhs.y) && std::isnan(lhs.y)) || rhs.y == lhs.y) &&
           ((std::isnan(rhs.z) && std::isnan(lhs.z)) || rhs.z == lhs.z);
}

std::ostream& operator<<(std::ostream& str, GimbalManagerServer::Quaternion const& quaternion)
{
    str << std::setprecision(15);
    str << "quaternion:" << '\n' << "{\n";
    str << "    w: " << quaternion.w << '\n';
    str << "    x: " << quaternion.x << '\n';
    str << "    y: " << quaternion.y << '\n';
    str << "    z: " << quaternion.z << '\n';
    str << '}';
    return str;
}

bool operator==(
    const GimbalManagerServer::Information& lhs, const GimbalManagerServer::Information& rhs)
{
    return (rhs.cap_flags == lhs.cap_flags) && (rhs.gimbal_device_id == lhs.gimbal_device_id) &&
           ((std::isnan(rhs.roll_min) && std::isnan(lhs.roll_min)) ||
            rhs.roll_min == lhs.roll_min) &&
           ((std::isnan(rhs.roll_max) && std::isnan(lhs.roll_max)) ||
            rhs.roll_max == lhs.roll_max) &&
           ((std::isnan(rhs.pitch_min) && std::isnan(lhs.pitch_min)) ||
            rhs.pitch_min == lhs.pitch_min) &&
           ((std::isnan(rhs.pitch_max) && std::isnan(lhs.pitch_max)) ||
            rhs.pitch_max == lhs.pitch_max) &&
           ((std::isnan(rhs.yaw_min) && std::isnan(lhs.yaw_min)) || rhs.yaw_min == lhs.yaw_min) &&
           ((std::isnan(rhs.yaw_max) && std::isnan(lhs.yaw_max)) || rhs.yaw_max == lhs.yaw_max);
}

std::ostream& operator<<(std::ostream& str, GimbalManagerServer::Information const& information)
{
    str << std::setprecision(15);
    str << "information:" << '\n' << "{\n";
    str << "    cap_flags: " << information.cap_flags << '\n';
    str << "    gimbal_device_id: " << information.gimbal_device_id << '\n';
    str << "    roll_min: " << information.roll_min << '\n';
    str << "    roll_max: " << information.roll_max << '\n';
    str << "    pitch_min: " << information.pitch_min << '\n';
    str << "    pitch_max: " << information.pitch_max << '\n';
    str << "    yaw_min: " << information.yaw_min << '\n';
    str << "    yaw_max: " << information.yaw_max << '\n';
    str << '}';
    return str;
}

bool operator==(
    const GimbalManagerServer::GimbalManagerConfiguration& lhs,
    const GimbalManagerServer::GimbalManagerConfiguration& rhs)
{
    return (rhs.sysid_primary_control == lhs.sysid_primary_control) &&
           (rhs.compid_primary_control == lhs.compid_primary_control) &&
           (rhs.sysid_secondary_control == lhs.sysid_secondary_control) &&
           (rhs.compid_secondary_control == lhs.compid_secondary_control) &&
           (rhs.gimbal_device_id == lhs.gimbal_device_id);
}

std::ostream& operator<<(
    std::ostream& str,
    GimbalManagerServer::GimbalManagerConfiguration const& gimbal_manager_configuration)
{
    str << std::setprecision(15);
    str << "gimbal_manager_configuration:" << '\n' << "{\n";
    str << "    sysid_primary_control: " << gimbal_manager_configuration.sysid_primary_control
        << '\n';
    str << "    compid_primary_control: " << gimbal_manager_configuration.compid_primary_control
        << '\n';
    str << "    sysid_secondary_control: " << gimbal_manager_configuration.sysid_secondary_control
        << '\n';
    str << "    compid_secondary_control: " << gimbal_manager_configuration.compid_secondary_control
        << '\n';
    str << "    gimbal_device_id: " << gimbal_manager_configuration.gimbal_device_id << '\n';
    str << '}';
    return str;
}

bool operator==(
    const GimbalManagerServer::DeviceAttitudeStatus& lhs,
    const GimbalManagerServer::DeviceAttitudeStatus& rhs)
{
    return (rhs.time_boot_ms == lhs.time_boot_ms) && (rhs.flags == lhs.flags) && (rhs.q == lhs.q) &&
           ((std::isnan(rhs.angular_velocity_x) && std::isnan(lhs.angular_velocity_x)) ||
            rhs.angular_velocity_x == lhs.angular_velocity_x) &&
           ((std::isnan(rhs.angular_velocity_y) && std::isnan(lhs.angular_velocity_y)) ||
            rhs.angular_velocity_y == lhs.angular_velocity_y) &&
           ((std::isnan(rhs.angular_velocity_z) && std::isnan(lhs.angular_velocity_z)) ||
            rhs.angular_velocity_z == lhs.angular_velocity_z) &&
           (rhs.failure_flags == lhs.failure_flags);
}

std::ostream& operator<<(
    std::ostream& str, GimbalManagerServer::DeviceAttitudeStatus const& device_attitude_status)
{
    str << std::setprecision(15);
    str << "device_attitude_status:" << '\n' << "{\n";
    str << "    time_boot_ms: " << device_attitude_status.time_boot_ms << '\n';
    str << "    flags: " << device_attitude_status.flags << '\n';
    str << "    q: " << device_attitude_status.q << '\n';
    str << "    angular_velocity_x: " << device_attitude_status.angular_velocity_x << '\n';
    str << "    angular_velocity_y: " << device_attitude_status.angular_velocity_y << '\n';
    str << "    angular_velocity_z: " << device_attitude_status.angular_velocity_z << '\n';
    str << "    failure_flags: " << device_attitude_status.failure_flags << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, GimbalManagerServer::Result const& result)
{
    switch (result) {
        case GimbalManagerServer::Result::Unknown:
            return str << "Unknown";
        case GimbalManagerServer::Result::Success:
            return str << "Success";
        case GimbalManagerServer::Result::InProgress:
            return str << "In Progress";
        case GimbalManagerServer::Result::Busy:
            return str << "Busy";
        case GimbalManagerServer::Result::Denied:
            return str << "Denied";
        case GimbalManagerServer::Result::Error:
            return str << "Error";
        case GimbalManagerServer::Result::Timeout:
            return str << "Timeout";
        case GimbalManagerServer::Result::WrongArgument:
            return str << "Wrong Argument";
        case GimbalManagerServer::Result::NoSystem:
            return str << "No System";
        default:
            return str << "Unknown";
    }
}

bool operator==(
    const GimbalManagerServer::GimbalManagerStatus& lhs,
    const GimbalManagerServer::GimbalManagerStatus& rhs)
{
    return (rhs.flags == lhs.flags) && (rhs.gimbal_device_id == lhs.gimbal_device_id) &&
           (rhs.primary_control_sysid == lhs.primary_control_sysid) &&
           (rhs.primary_control_compid == lhs.primary_control_compid) &&
           (rhs.secondary_control_sysid == lhs.secondary_control_sysid) &&
           (rhs.secondary_control_compid == lhs.secondary_control_compid);
}

std::ostream&
operator<<(std::ostream& str, GimbalManagerServer::GimbalManagerStatus const& gimbal_manager_status)
{
    str << std::setprecision(15);
    str << "gimbal_manager_status:" << '\n' << "{\n";
    str << "    flags: " << gimbal_manager_status.flags << '\n';
    str << "    gimbal_device_id: " << gimbal_manager_status.gimbal_device_id << '\n';
    str << "    primary_control_sysid: " << gimbal_manager_status.primary_control_sysid << '\n';
    str << "    primary_control_compid: " << gimbal_manager_status.primary_control_compid << '\n';
    str << "    secondary_control_sysid: " << gimbal_manager_status.secondary_control_sysid << '\n';
    str << "    secondary_control_compid: " << gimbal_manager_status.secondary_control_compid
        << '\n';
    str << '}';
    return str;
}

bool operator==(
    const GimbalManagerServer::SetAttitude& lhs, const GimbalManagerServer::SetAttitude& rhs)
{
    return (rhs.flags == lhs.flags) && (rhs.attitude_quaternion == lhs.attitude_quaternion);
}

std::ostream& operator<<(std::ostream& str, GimbalManagerServer::SetAttitude const& set_attitude)
{
    str << std::setprecision(15);
    str << "set_attitude:" << '\n' << "{\n";
    str << "    flags: " << set_attitude.flags << '\n';
    str << "    attitude_quaternion: " << set_attitude.attitude_quaternion << '\n';
    str << '}';
    return str;
}

bool operator==(
    const GimbalManagerServer::RoiLocation& lhs, const GimbalManagerServer::RoiLocation& rhs)
{
    return (rhs.gimbal_id == lhs.gimbal_id) &&
           ((std::isnan(rhs.latitude_deg) && std::isnan(lhs.latitude_deg)) ||
            rhs.latitude_deg == lhs.latitude_deg) &&
           ((std::isnan(rhs.longitude_deg) && std::isnan(lhs.longitude_deg)) ||
            rhs.longitude_deg == lhs.longitude_deg) &&
           ((std::isnan(rhs.absolute_altitude_m) && std::isnan(lhs.absolute_altitude_m)) ||
            rhs.absolute_altitude_m == lhs.absolute_altitude_m);
}

std::ostream& operator<<(std::ostream& str, GimbalManagerServer::RoiLocation const& roi_location)
{
    str << std::setprecision(15);
    str << "roi_location:" << '\n' << "{\n";
    str << "    gimbal_id: " << roi_location.gimbal_id << '\n';
    str << "    latitude_deg: " << roi_location.latitude_deg << '\n';
    str << "    longitude_deg: " << roi_location.longitude_deg << '\n';
    str << "    absolute_altitude_m: " << roi_location.absolute_altitude_m << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk