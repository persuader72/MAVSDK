// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gimbal_manager_server/gimbal_manager_server.proto
#ifndef GRPC_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto__INCLUDED
#define GRPC_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto__INCLUDED

#include "gimbal_manager_server/gimbal_manager_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {

// Provides handling of gimbal manager commands
class GimbalManagerServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sets the gimbal manager information. This must be called as soon as the gimbal manager server is created.
    virtual ::grpc::Status SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>> AsyncSetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>>(AsyncSetInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>> PrepareAsyncSetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>>(PrepareAsyncSetInformationRaw(context, request, cq));
    }
    // Subscribe for device discovered events
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> SubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(SubscribeDeviceDiscoveredRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> AsyncSubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(AsyncSubscribeDeviceDiscoveredRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> PrepareAsyncSubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(PrepareAsyncSubscribeDeviceDiscoveredRaw(context, request, cq));
    }
    // Subscribe for gimbal manager configuration
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> SubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(SubscribeGimbalManagerConfiguredRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> AsyncSubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(AsyncSubscribeGimbalManagerConfiguredRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> PrepareAsyncSubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(PrepareAsyncSubscribeGimbalManagerConfiguredRaw(context, request, cq));
    }
    // Subscribe for device attitude status events
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> SubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(SubscribeDeviceAttitudeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> AsyncSubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(AsyncSubscribeDeviceAttitudeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> PrepareAsyncSubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(PrepareAsyncSubscribeDeviceAttitudeStatusRaw(context, request, cq));
    }
    // Get the local gimbal manager status
    virtual ::grpc::Status GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>> AsyncGetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>>(AsyncGetGimbalManagerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>> PrepareAsyncGetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>>(PrepareAsyncGetGimbalManagerStatusRaw(context, request, cq));
    }
    // Subscribe set attiutde requests
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> SubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(SubscribeSetAttitudeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> AsyncSubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(AsyncSubscribeSetAttitudeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> PrepareAsyncSubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(PrepareAsyncSubscribeSetAttitudeRaw(context, request, cq));
    }
    // Subscribe set roi requests
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> SubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(SubscribeSetRoiLocationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> AsyncSubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(AsyncSubscribeSetRoiLocationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> PrepareAsyncSubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(PrepareAsyncSubscribeSetRoiLocationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sets the gimbal manager information. This must be called as soon as the gimbal manager server is created.
      virtual void SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribe for device discovered events
      virtual void SubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* reactor) = 0;
      // Subscribe for gimbal manager configuration
      virtual void SubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* reactor) = 0;
      // Subscribe for device attitude status events
      virtual void SubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* reactor) = 0;
      // Get the local gimbal manager status
      virtual void GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribe set attiutde requests
      virtual void SubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* reactor) = 0;
      // Subscribe set roi requests
      virtual void SubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* AsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* PrepareAsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* SubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* AsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* PrepareAsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* SubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* AsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* PrepareAsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* SubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* AsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* PrepareAsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* AsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* PrepareAsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* SubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* AsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* PrepareAsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* SubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* AsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* PrepareAsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>> AsyncSetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>>(AsyncSetInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>> PrepareAsyncSetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>>(PrepareAsyncSetInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> SubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(SubscribeDeviceDiscoveredRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> AsyncSubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(AsyncSubscribeDeviceDiscoveredRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>> PrepareAsyncSubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>>(PrepareAsyncSubscribeDeviceDiscoveredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> SubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(SubscribeGimbalManagerConfiguredRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> AsyncSubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(AsyncSubscribeGimbalManagerConfiguredRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>> PrepareAsyncSubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>>(PrepareAsyncSubscribeGimbalManagerConfiguredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> SubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(SubscribeDeviceAttitudeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> AsyncSubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(AsyncSubscribeDeviceAttitudeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>> PrepareAsyncSubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>>(PrepareAsyncSubscribeDeviceAttitudeStatusRaw(context, request, cq));
    }
    ::grpc::Status GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>> AsyncGetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>>(AsyncGetGimbalManagerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>> PrepareAsyncGetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>>(PrepareAsyncGetGimbalManagerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> SubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(SubscribeSetAttitudeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> AsyncSubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(AsyncSubscribeSetAttitudeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>> PrepareAsyncSubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>>(PrepareAsyncSubscribeSetAttitudeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> SubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(SubscribeSetRoiLocationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> AsyncSubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(AsyncSubscribeSetRoiLocationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>> PrepareAsyncSubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>>(PrepareAsyncSubscribeSetRoiLocationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* reactor) override;
      void SubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* reactor) override;
      void SubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* reactor) override;
      void GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* reactor) override;
      void SubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* AsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* PrepareAsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* SubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* AsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* PrepareAsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* SubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* AsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* PrepareAsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* SubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* AsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* PrepareAsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* AsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* PrepareAsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* SubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* AsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* PrepareAsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* SubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* AsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* PrepareAsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeDeviceDiscovered_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeGimbalManagerConfigured_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeDeviceAttitudeStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGimbalManagerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeSetAttitude_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeSetRoiLocation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sets the gimbal manager information. This must be called as soon as the gimbal manager server is created.
    virtual ::grpc::Status SetInformation(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response);
    // Subscribe for device discovered events
    virtual ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* writer);
    // Subscribe for gimbal manager configuration
    virtual ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* writer);
    // Subscribe for device attitude status events
    virtual ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* writer);
    // Get the local gimbal manager status
    virtual ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response);
    // Subscribe set attiutde requests
    virtual ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* writer);
    // Subscribe set roi requests
    virtual ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetInformation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetInformation(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeDeviceDiscovered(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGimbalManagerConfigured(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeDeviceAttitudeStatus(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGimbalManagerStatus(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSetAttitude(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSetRoiLocation(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetInformation<WithAsyncMethod_SubscribeDeviceDiscovered<WithAsyncMethod_SubscribeGimbalManagerConfigured<WithAsyncMethod_SubscribeDeviceAttitudeStatus<WithAsyncMethod_GetGimbalManagerStatus<WithAsyncMethod_SubscribeSetAttitude<WithAsyncMethod_SubscribeSetRoiLocation<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetInformation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response) { return this->SetInformation(context, request, response); }));}
    void SetMessageAllocatorFor_SetInformation(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request) { return this->SubscribeDeviceDiscovered(context, request); }));
    }
    ~WithCallbackMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* SubscribeDeviceDiscovered(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest, ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request) { return this->SubscribeGimbalManagerConfigured(context, request); }));
    }
    ~WithCallbackMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* SubscribeGimbalManagerConfigured(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request) { return this->SubscribeDeviceAttitudeStatus(context, request); }));
    }
    ~WithCallbackMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* SubscribeDeviceAttitudeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response) { return this->GetGimbalManagerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetGimbalManagerStatus(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGimbalManagerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest, ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request) { return this->SubscribeSetAttitude(context, request); }));
    }
    ~WithCallbackMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* SubscribeSetAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest, ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request) { return this->SubscribeSetRoiLocation(context, request); }));
    }
    ~WithCallbackMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* SubscribeSetRoiLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetInformation<WithCallbackMethod_SubscribeDeviceDiscovered<WithCallbackMethod_SubscribeGimbalManagerConfigured<WithCallbackMethod_SubscribeDeviceAttitudeStatus<WithCallbackMethod_GetGimbalManagerStatus<WithCallbackMethod_SubscribeSetAttitude<WithCallbackMethod_SubscribeSetRoiLocation<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetInformation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetInformation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeDeviceDiscovered(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGimbalManagerConfigured(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeDeviceAttitudeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGimbalManagerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSetAttitude(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSetRoiLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetInformation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetInformation(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeDeviceDiscovered(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeDeviceDiscovered(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeGimbalManagerConfigured(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeGimbalManagerConfigured(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeDeviceAttitudeStatus(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeDeviceAttitudeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGimbalManagerStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGimbalManagerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeSetAttitude(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSetAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeSetRoiLocation(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSetRoiLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetInformation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* streamer) {
                       return this->StreamedSetInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetInformation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest,::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGimbalManagerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGimbalManagerStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* streamer) {
                       return this->StreamedGetGimbalManagerStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGimbalManagerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGimbalManagerStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* /*request*/, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGimbalManagerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest,::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetInformation<WithStreamedUnaryMethod_GetGimbalManagerStatus<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeDeviceDiscovered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeDeviceDiscovered() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* streamer) {
                       return this->StreamedSubscribeDeviceDiscovered(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeDeviceDiscovered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeDeviceDiscovered(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeDeviceDiscovered(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest,::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeGimbalManagerConfigured : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeGimbalManagerConfigured() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest, ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest, ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* streamer) {
                       return this->StreamedSubscribeGimbalManagerConfigured(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeGimbalManagerConfigured() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeGimbalManagerConfigured(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeGimbalManagerConfigured(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest,::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeDeviceAttitudeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeDeviceAttitudeStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* streamer) {
                       return this->StreamedSubscribeDeviceAttitudeStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeDeviceAttitudeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeDeviceAttitudeStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeDeviceAttitudeStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest,::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeSetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeSetAttitude() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest, ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest, ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* streamer) {
                       return this->StreamedSubscribeSetAttitude(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeSetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeSetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeSetAttitude(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest,::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeSetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeSetRoiLocation() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest, ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest, ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* streamer) {
                       return this->StreamedSubscribeSetRoiLocation(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeSetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeSetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeSetRoiLocation(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest,::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeDeviceDiscovered<WithSplitStreamingMethod_SubscribeGimbalManagerConfigured<WithSplitStreamingMethod_SubscribeDeviceAttitudeStatus<WithSplitStreamingMethod_SubscribeSetAttitude<WithSplitStreamingMethod_SubscribeSetRoiLocation<Service > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetInformation<WithSplitStreamingMethod_SubscribeDeviceDiscovered<WithSplitStreamingMethod_SubscribeGimbalManagerConfigured<WithSplitStreamingMethod_SubscribeDeviceAttitudeStatus<WithStreamedUnaryMethod_GetGimbalManagerStatus<WithSplitStreamingMethod_SubscribeSetAttitude<WithSplitStreamingMethod_SubscribeSetRoiLocation<Service > > > > > > > StreamedService;
};

}  // namespace gimbal_manager_server
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto__INCLUDED
