// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal_manager_server/gimbal_manager_server.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {
class DeviceAttitudeStatus;
struct DeviceAttitudeStatusDefaultTypeInternal;
extern DeviceAttitudeStatusDefaultTypeInternal _DeviceAttitudeStatus_default_instance_;
class DeviceAttitudeStatusResponse;
struct DeviceAttitudeStatusResponseDefaultTypeInternal;
extern DeviceAttitudeStatusResponseDefaultTypeInternal _DeviceAttitudeStatusResponse_default_instance_;
class DeviceDiscoveredResponse;
struct DeviceDiscoveredResponseDefaultTypeInternal;
extern DeviceDiscoveredResponseDefaultTypeInternal _DeviceDiscoveredResponse_default_instance_;
class GetGimbalManagerStatusRequest;
struct GetGimbalManagerStatusRequestDefaultTypeInternal;
extern GetGimbalManagerStatusRequestDefaultTypeInternal _GetGimbalManagerStatusRequest_default_instance_;
class GetGimbalManagerStatusResponse;
struct GetGimbalManagerStatusResponseDefaultTypeInternal;
extern GetGimbalManagerStatusResponseDefaultTypeInternal _GetGimbalManagerStatusResponse_default_instance_;
class GimbalManagerConfiguration;
struct GimbalManagerConfigurationDefaultTypeInternal;
extern GimbalManagerConfigurationDefaultTypeInternal _GimbalManagerConfiguration_default_instance_;
class GimbalManagerConfiguredResponse;
struct GimbalManagerConfiguredResponseDefaultTypeInternal;
extern GimbalManagerConfiguredResponseDefaultTypeInternal _GimbalManagerConfiguredResponse_default_instance_;
class GimbalManagerServerResult;
struct GimbalManagerServerResultDefaultTypeInternal;
extern GimbalManagerServerResultDefaultTypeInternal _GimbalManagerServerResult_default_instance_;
class GimbalManagerStatus;
struct GimbalManagerStatusDefaultTypeInternal;
extern GimbalManagerStatusDefaultTypeInternal _GimbalManagerStatus_default_instance_;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RoiLocation;
struct RoiLocationDefaultTypeInternal;
extern RoiLocationDefaultTypeInternal _RoiLocation_default_instance_;
class SetAttitude;
struct SetAttitudeDefaultTypeInternal;
extern SetAttitudeDefaultTypeInternal _SetAttitude_default_instance_;
class SetAttitudeResponse;
struct SetAttitudeResponseDefaultTypeInternal;
extern SetAttitudeResponseDefaultTypeInternal _SetAttitudeResponse_default_instance_;
class SetInformationRequest;
struct SetInformationRequestDefaultTypeInternal;
extern SetInformationRequestDefaultTypeInternal _SetInformationRequest_default_instance_;
class SetInformationResponse;
struct SetInformationResponseDefaultTypeInternal;
extern SetInformationResponseDefaultTypeInternal _SetInformationResponse_default_instance_;
class SetRoiLocationResponse;
struct SetRoiLocationResponseDefaultTypeInternal;
extern SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;
class SubscribeDeviceAttitudeStatusRequest;
struct SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal;
extern SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal _SubscribeDeviceAttitudeStatusRequest_default_instance_;
class SubscribeDeviceDiscoveredRequest;
struct SubscribeDeviceDiscoveredRequestDefaultTypeInternal;
extern SubscribeDeviceDiscoveredRequestDefaultTypeInternal _SubscribeDeviceDiscoveredRequest_default_instance_;
class SubscribeGimbalManagerConfiguredRequest;
struct SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal;
extern SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal _SubscribeGimbalManagerConfiguredRequest_default_instance_;
class SubscribeSetAttitudeRequest;
struct SubscribeSetAttitudeRequestDefaultTypeInternal;
extern SubscribeSetAttitudeRequestDefaultTypeInternal _SubscribeSetAttitudeRequest_default_instance_;
class SubscribeSetRoiLocationRequest;
struct SubscribeSetRoiLocationRequestDefaultTypeInternal;
extern SubscribeSetRoiLocationRequestDefaultTypeInternal _SubscribeSetRoiLocationRequest_default_instance_;
}  // namespace gimbal_manager_server
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {
enum GimbalManagerServerResult_Result : int {
  GimbalManagerServerResult_Result_RESULT_UNKNOWN = 0,
  GimbalManagerServerResult_Result_RESULT_SUCCESS = 1,
  GimbalManagerServerResult_Result_RESULT_IN_PROGRESS = 2,
  GimbalManagerServerResult_Result_RESULT_BUSY = 3,
  GimbalManagerServerResult_Result_RESULT_DENIED = 4,
  GimbalManagerServerResult_Result_RESULT_ERROR = 5,
  GimbalManagerServerResult_Result_RESULT_TIMEOUT = 6,
  GimbalManagerServerResult_Result_RESULT_WRONG_ARGUMENT = 7,
  GimbalManagerServerResult_Result_RESULT_NO_SYSTEM = 8,
  GimbalManagerServerResult_Result_GimbalManagerServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GimbalManagerServerResult_Result_GimbalManagerServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GimbalManagerServerResult_Result_IsValid(int value);
extern const uint32_t GimbalManagerServerResult_Result_internal_data_[];
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult_Result_Result_MIN = static_cast<GimbalManagerServerResult_Result>(0);
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult_Result_Result_MAX = static_cast<GimbalManagerServerResult_Result>(8);
constexpr int GimbalManagerServerResult_Result_Result_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
GimbalManagerServerResult_Result_descriptor();
template <typename T>
const std::string& GimbalManagerServerResult_Result_Name(T value) {
  static_assert(std::is_same<T, GimbalManagerServerResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return GimbalManagerServerResult_Result_Name(static_cast<GimbalManagerServerResult_Result>(value));
}
template <>
inline const std::string& GimbalManagerServerResult_Result_Name(GimbalManagerServerResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GimbalManagerServerResult_Result_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool GimbalManagerServerResult_Result_Parse(absl::string_view name, GimbalManagerServerResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GimbalManagerServerResult_Result>(
      GimbalManagerServerResult_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SubscribeSetRoiLocationRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SubscribeSetRoiLocationRequest) */ {
 public:
  inline SubscribeSetRoiLocationRequest() : SubscribeSetRoiLocationRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeSetRoiLocationRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeSetRoiLocationRequest(const SubscribeSetRoiLocationRequest& from)
      : SubscribeSetRoiLocationRequest(nullptr, from) {}
  SubscribeSetRoiLocationRequest(SubscribeSetRoiLocationRequest&& from) noexcept
    : SubscribeSetRoiLocationRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSetRoiLocationRequest& operator=(const SubscribeSetRoiLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSetRoiLocationRequest& operator=(SubscribeSetRoiLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeSetRoiLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeSetRoiLocationRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSetRoiLocationRequest*>(
               &_SubscribeSetRoiLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubscribeSetRoiLocationRequest& a, SubscribeSetRoiLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSetRoiLocationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeSetRoiLocationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeSetRoiLocationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeSetRoiLocationRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeSetRoiLocationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeSetRoiLocationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SubscribeSetRoiLocationRequest";
  }
  protected:
  explicit SubscribeSetRoiLocationRequest(::google::protobuf::Arena* arena);
  SubscribeSetRoiLocationRequest(::google::protobuf::Arena* arena, const SubscribeSetRoiLocationRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SubscribeSetRoiLocationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SubscribeSetAttitudeRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SubscribeSetAttitudeRequest) */ {
 public:
  inline SubscribeSetAttitudeRequest() : SubscribeSetAttitudeRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeSetAttitudeRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeSetAttitudeRequest(const SubscribeSetAttitudeRequest& from)
      : SubscribeSetAttitudeRequest(nullptr, from) {}
  SubscribeSetAttitudeRequest(SubscribeSetAttitudeRequest&& from) noexcept
    : SubscribeSetAttitudeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSetAttitudeRequest& operator=(const SubscribeSetAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSetAttitudeRequest& operator=(SubscribeSetAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeSetAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeSetAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSetAttitudeRequest*>(
               &_SubscribeSetAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeSetAttitudeRequest& a, SubscribeSetAttitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSetAttitudeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeSetAttitudeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeSetAttitudeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeSetAttitudeRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeSetAttitudeRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeSetAttitudeRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SubscribeSetAttitudeRequest";
  }
  protected:
  explicit SubscribeSetAttitudeRequest(::google::protobuf::Arena* arena);
  SubscribeSetAttitudeRequest(::google::protobuf::Arena* arena, const SubscribeSetAttitudeRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SubscribeSetAttitudeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SubscribeGimbalManagerConfiguredRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SubscribeGimbalManagerConfiguredRequest) */ {
 public:
  inline SubscribeGimbalManagerConfiguredRequest() : SubscribeGimbalManagerConfiguredRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeGimbalManagerConfiguredRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeGimbalManagerConfiguredRequest(const SubscribeGimbalManagerConfiguredRequest& from)
      : SubscribeGimbalManagerConfiguredRequest(nullptr, from) {}
  SubscribeGimbalManagerConfiguredRequest(SubscribeGimbalManagerConfiguredRequest&& from) noexcept
    : SubscribeGimbalManagerConfiguredRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGimbalManagerConfiguredRequest& operator=(const SubscribeGimbalManagerConfiguredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGimbalManagerConfiguredRequest& operator=(SubscribeGimbalManagerConfiguredRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeGimbalManagerConfiguredRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeGimbalManagerConfiguredRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGimbalManagerConfiguredRequest*>(
               &_SubscribeGimbalManagerConfiguredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeGimbalManagerConfiguredRequest& a, SubscribeGimbalManagerConfiguredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGimbalManagerConfiguredRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeGimbalManagerConfiguredRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeGimbalManagerConfiguredRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeGimbalManagerConfiguredRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeGimbalManagerConfiguredRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeGimbalManagerConfiguredRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SubscribeGimbalManagerConfiguredRequest";
  }
  protected:
  explicit SubscribeGimbalManagerConfiguredRequest(::google::protobuf::Arena* arena);
  SubscribeGimbalManagerConfiguredRequest(::google::protobuf::Arena* arena, const SubscribeGimbalManagerConfiguredRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SubscribeGimbalManagerConfiguredRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SubscribeDeviceDiscoveredRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceDiscoveredRequest) */ {
 public:
  inline SubscribeDeviceDiscoveredRequest() : SubscribeDeviceDiscoveredRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeDeviceDiscoveredRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeDeviceDiscoveredRequest(const SubscribeDeviceDiscoveredRequest& from)
      : SubscribeDeviceDiscoveredRequest(nullptr, from) {}
  SubscribeDeviceDiscoveredRequest(SubscribeDeviceDiscoveredRequest&& from) noexcept
    : SubscribeDeviceDiscoveredRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeDeviceDiscoveredRequest& operator=(const SubscribeDeviceDiscoveredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeDeviceDiscoveredRequest& operator=(SubscribeDeviceDiscoveredRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeDeviceDiscoveredRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeDeviceDiscoveredRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeDeviceDiscoveredRequest*>(
               &_SubscribeDeviceDiscoveredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeDeviceDiscoveredRequest& a, SubscribeDeviceDiscoveredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeDeviceDiscoveredRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeDeviceDiscoveredRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeDeviceDiscoveredRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeDeviceDiscoveredRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeDeviceDiscoveredRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeDeviceDiscoveredRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SubscribeDeviceDiscoveredRequest";
  }
  protected:
  explicit SubscribeDeviceDiscoveredRequest(::google::protobuf::Arena* arena);
  SubscribeDeviceDiscoveredRequest(::google::protobuf::Arena* arena, const SubscribeDeviceDiscoveredRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceDiscoveredRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SubscribeDeviceAttitudeStatusRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceAttitudeStatusRequest) */ {
 public:
  inline SubscribeDeviceAttitudeStatusRequest() : SubscribeDeviceAttitudeStatusRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeDeviceAttitudeStatusRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeDeviceAttitudeStatusRequest(const SubscribeDeviceAttitudeStatusRequest& from)
      : SubscribeDeviceAttitudeStatusRequest(nullptr, from) {}
  SubscribeDeviceAttitudeStatusRequest(SubscribeDeviceAttitudeStatusRequest&& from) noexcept
    : SubscribeDeviceAttitudeStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeDeviceAttitudeStatusRequest& operator=(const SubscribeDeviceAttitudeStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeDeviceAttitudeStatusRequest& operator=(SubscribeDeviceAttitudeStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeDeviceAttitudeStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeDeviceAttitudeStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeDeviceAttitudeStatusRequest*>(
               &_SubscribeDeviceAttitudeStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeDeviceAttitudeStatusRequest& a, SubscribeDeviceAttitudeStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeDeviceAttitudeStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeDeviceAttitudeStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeDeviceAttitudeStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeDeviceAttitudeStatusRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeDeviceAttitudeStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeDeviceAttitudeStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SubscribeDeviceAttitudeStatusRequest";
  }
  protected:
  explicit SubscribeDeviceAttitudeStatusRequest(::google::protobuf::Arena* arena);
  SubscribeDeviceAttitudeStatusRequest(::google::protobuf::Arena* arena, const SubscribeDeviceAttitudeStatusRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceAttitudeStatusRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class RoiLocation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.RoiLocation) */ {
 public:
  inline RoiLocation() : RoiLocation(nullptr) {}
  ~RoiLocation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoiLocation(::google::protobuf::internal::ConstantInitialized);

  inline RoiLocation(const RoiLocation& from)
      : RoiLocation(nullptr, from) {}
  RoiLocation(RoiLocation&& from) noexcept
    : RoiLocation() {
    *this = ::std::move(from);
  }

  inline RoiLocation& operator=(const RoiLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoiLocation& operator=(RoiLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoiLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoiLocation* internal_default_instance() {
    return reinterpret_cast<const RoiLocation*>(
               &_RoiLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RoiLocation& a, RoiLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(RoiLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoiLocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoiLocation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoiLocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoiLocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoiLocation& from) {
    RoiLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoiLocation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.RoiLocation";
  }
  protected:
  explicit RoiLocation(::google::protobuf::Arena* arena);
  RoiLocation(::google::protobuf::Arena* arena, const RoiLocation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 2,
    kGimbalIdFieldNumber = 1,
    kAbsoluteAltitudeMFieldNumber = 4,
    kLongitudeDegFieldNumber = 3,
  };
  // double latitude_deg = 2;
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // uint32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::uint32_t gimbal_id() const;
  void set_gimbal_id(::uint32_t value);

  private:
  ::uint32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::uint32_t value);

  public:
  // float absolute_altitude_m = 4;
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // double longitude_deg = 3;
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.RoiLocation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double latitude_deg_;
    ::uint32_t gimbal_id_;
    float absolute_altitude_m_;
    double longitude_deg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class Quaternion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternion(::google::protobuf::internal::ConstantInitialized);

  inline Quaternion(const Quaternion& from)
      : Quaternion(nullptr, from) {}
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Quaternion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.Quaternion";
  }
  protected:
  explicit Quaternion(::google::protobuf::Arena* arena);
  Quaternion(::google::protobuf::Arena* arena, const Quaternion& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 4;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.Quaternion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class Information final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  ~Information() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Information(::google::protobuf::internal::ConstantInitialized);

  inline Information(const Information& from)
      : Information(nullptr, from) {}
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Information* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Information& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Information& from) {
    Information::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Information* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.Information";
  }
  protected:
  explicit Information(::google::protobuf::Arena* arena);
  Information(::google::protobuf::Arena* arena, const Information& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapFlagsFieldNumber = 1,
    kGimbalDeviceIdFieldNumber = 2,
    kRollMinFieldNumber = 3,
    kRollMaxFieldNumber = 4,
    kPitchMinFieldNumber = 5,
    kPitchMaxFieldNumber = 6,
    kYawMinFieldNumber = 7,
    kYawMaxFieldNumber = 8,
  };
  // uint32 cap_flags = 1;
  void clear_cap_flags() ;
  ::uint32_t cap_flags() const;
  void set_cap_flags(::uint32_t value);

  private:
  ::uint32_t _internal_cap_flags() const;
  void _internal_set_cap_flags(::uint32_t value);

  public:
  // uint32 gimbal_device_id = 2;
  void clear_gimbal_device_id() ;
  ::uint32_t gimbal_device_id() const;
  void set_gimbal_device_id(::uint32_t value);

  private:
  ::uint32_t _internal_gimbal_device_id() const;
  void _internal_set_gimbal_device_id(::uint32_t value);

  public:
  // float roll_min = 3;
  void clear_roll_min() ;
  float roll_min() const;
  void set_roll_min(float value);

  private:
  float _internal_roll_min() const;
  void _internal_set_roll_min(float value);

  public:
  // float roll_max = 4;
  void clear_roll_max() ;
  float roll_max() const;
  void set_roll_max(float value);

  private:
  float _internal_roll_max() const;
  void _internal_set_roll_max(float value);

  public:
  // float pitch_min = 5;
  void clear_pitch_min() ;
  float pitch_min() const;
  void set_pitch_min(float value);

  private:
  float _internal_pitch_min() const;
  void _internal_set_pitch_min(float value);

  public:
  // float pitch_max = 6;
  void clear_pitch_max() ;
  float pitch_max() const;
  void set_pitch_max(float value);

  private:
  float _internal_pitch_max() const;
  void _internal_set_pitch_max(float value);

  public:
  // float yaw_min = 7;
  void clear_yaw_min() ;
  float yaw_min() const;
  void set_yaw_min(float value);

  private:
  float _internal_yaw_min() const;
  void _internal_set_yaw_min(float value);

  public:
  // float yaw_max = 8;
  void clear_yaw_max() ;
  float yaw_max() const;
  void set_yaw_max(float value);

  private:
  float _internal_yaw_max() const;
  void _internal_set_yaw_max(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.Information)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t cap_flags_;
    ::uint32_t gimbal_device_id_;
    float roll_min_;
    float roll_max_;
    float pitch_min_;
    float pitch_max_;
    float yaw_min_;
    float yaw_max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GimbalManagerStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus) */ {
 public:
  inline GimbalManagerStatus() : GimbalManagerStatus(nullptr) {}
  ~GimbalManagerStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalManagerStatus(::google::protobuf::internal::ConstantInitialized);

  inline GimbalManagerStatus(const GimbalManagerStatus& from)
      : GimbalManagerStatus(nullptr, from) {}
  GimbalManagerStatus(GimbalManagerStatus&& from) noexcept
    : GimbalManagerStatus() {
    *this = ::std::move(from);
  }

  inline GimbalManagerStatus& operator=(const GimbalManagerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalManagerStatus& operator=(GimbalManagerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalManagerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalManagerStatus* internal_default_instance() {
    return reinterpret_cast<const GimbalManagerStatus*>(
               &_GimbalManagerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GimbalManagerStatus& a, GimbalManagerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalManagerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalManagerStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalManagerStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalManagerStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalManagerStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GimbalManagerStatus& from) {
    GimbalManagerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GimbalManagerStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus";
  }
  protected:
  explicit GimbalManagerStatus(::google::protobuf::Arena* arena);
  GimbalManagerStatus(::google::protobuf::Arena* arena, const GimbalManagerStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kGimbalDeviceIdFieldNumber = 2,
    kPrimaryControlSysidFieldNumber = 3,
    kPrimaryControlCompidFieldNumber = 4,
    kSecondaryControlSysidFieldNumber = 5,
    kSecondaryControlCompidFieldNumber = 6,
  };
  // uint32 flags = 1;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // uint32 gimbal_device_id = 2;
  void clear_gimbal_device_id() ;
  ::uint32_t gimbal_device_id() const;
  void set_gimbal_device_id(::uint32_t value);

  private:
  ::uint32_t _internal_gimbal_device_id() const;
  void _internal_set_gimbal_device_id(::uint32_t value);

  public:
  // uint32 primary_control_sysid = 3;
  void clear_primary_control_sysid() ;
  ::uint32_t primary_control_sysid() const;
  void set_primary_control_sysid(::uint32_t value);

  private:
  ::uint32_t _internal_primary_control_sysid() const;
  void _internal_set_primary_control_sysid(::uint32_t value);

  public:
  // uint32 primary_control_compid = 4;
  void clear_primary_control_compid() ;
  ::uint32_t primary_control_compid() const;
  void set_primary_control_compid(::uint32_t value);

  private:
  ::uint32_t _internal_primary_control_compid() const;
  void _internal_set_primary_control_compid(::uint32_t value);

  public:
  // uint32 secondary_control_sysid = 5;
  void clear_secondary_control_sysid() ;
  ::uint32_t secondary_control_sysid() const;
  void set_secondary_control_sysid(::uint32_t value);

  private:
  ::uint32_t _internal_secondary_control_sysid() const;
  void _internal_set_secondary_control_sysid(::uint32_t value);

  public:
  // uint32 secondary_control_compid = 6;
  void clear_secondary_control_compid() ;
  ::uint32_t secondary_control_compid() const;
  void set_secondary_control_compid(::uint32_t value);

  private:
  ::uint32_t _internal_secondary_control_compid() const;
  void _internal_set_secondary_control_compid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t flags_;
    ::uint32_t gimbal_device_id_;
    ::uint32_t primary_control_sysid_;
    ::uint32_t primary_control_compid_;
    ::uint32_t secondary_control_sysid_;
    ::uint32_t secondary_control_compid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GimbalManagerServerResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult) */ {
 public:
  inline GimbalManagerServerResult() : GimbalManagerServerResult(nullptr) {}
  ~GimbalManagerServerResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalManagerServerResult(::google::protobuf::internal::ConstantInitialized);

  inline GimbalManagerServerResult(const GimbalManagerServerResult& from)
      : GimbalManagerServerResult(nullptr, from) {}
  GimbalManagerServerResult(GimbalManagerServerResult&& from) noexcept
    : GimbalManagerServerResult() {
    *this = ::std::move(from);
  }

  inline GimbalManagerServerResult& operator=(const GimbalManagerServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalManagerServerResult& operator=(GimbalManagerServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalManagerServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalManagerServerResult* internal_default_instance() {
    return reinterpret_cast<const GimbalManagerServerResult*>(
               &_GimbalManagerServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GimbalManagerServerResult& a, GimbalManagerServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalManagerServerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalManagerServerResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalManagerServerResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalManagerServerResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalManagerServerResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GimbalManagerServerResult& from) {
    GimbalManagerServerResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GimbalManagerServerResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult";
  }
  protected:
  explicit GimbalManagerServerResult(::google::protobuf::Arena* arena);
  GimbalManagerServerResult(::google::protobuf::Arena* arena, const GimbalManagerServerResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = GimbalManagerServerResult_Result;
  static constexpr Result RESULT_UNKNOWN = GimbalManagerServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = GimbalManagerServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_IN_PROGRESS = GimbalManagerServerResult_Result_RESULT_IN_PROGRESS;
  static constexpr Result RESULT_BUSY = GimbalManagerServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_DENIED = GimbalManagerServerResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_ERROR = GimbalManagerServerResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT = GimbalManagerServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_WRONG_ARGUMENT = GimbalManagerServerResult_Result_RESULT_WRONG_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM = GimbalManagerServerResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return GimbalManagerServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = GimbalManagerServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX = GimbalManagerServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = GimbalManagerServerResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return GimbalManagerServerResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return GimbalManagerServerResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return GimbalManagerServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result result() const;
  void set_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result value);

  private:
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GimbalManagerConfiguration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration) */ {
 public:
  inline GimbalManagerConfiguration() : GimbalManagerConfiguration(nullptr) {}
  ~GimbalManagerConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalManagerConfiguration(::google::protobuf::internal::ConstantInitialized);

  inline GimbalManagerConfiguration(const GimbalManagerConfiguration& from)
      : GimbalManagerConfiguration(nullptr, from) {}
  GimbalManagerConfiguration(GimbalManagerConfiguration&& from) noexcept
    : GimbalManagerConfiguration() {
    *this = ::std::move(from);
  }

  inline GimbalManagerConfiguration& operator=(const GimbalManagerConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalManagerConfiguration& operator=(GimbalManagerConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalManagerConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalManagerConfiguration* internal_default_instance() {
    return reinterpret_cast<const GimbalManagerConfiguration*>(
               &_GimbalManagerConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GimbalManagerConfiguration& a, GimbalManagerConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalManagerConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalManagerConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalManagerConfiguration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalManagerConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalManagerConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GimbalManagerConfiguration& from) {
    GimbalManagerConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GimbalManagerConfiguration* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration";
  }
  protected:
  explicit GimbalManagerConfiguration(::google::protobuf::Arena* arena);
  GimbalManagerConfiguration(::google::protobuf::Arena* arena, const GimbalManagerConfiguration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysidPrimaryControlFieldNumber = 1,
    kCompidPrimaryControlFieldNumber = 2,
    kSysidSecondaryControlFieldNumber = 3,
    kCompidSecondaryControlFieldNumber = 4,
    kGimbalDeviceIdFieldNumber = 5,
  };
  // uint32 sysid_primary_control = 1;
  void clear_sysid_primary_control() ;
  ::uint32_t sysid_primary_control() const;
  void set_sysid_primary_control(::uint32_t value);

  private:
  ::uint32_t _internal_sysid_primary_control() const;
  void _internal_set_sysid_primary_control(::uint32_t value);

  public:
  // uint32 compid_primary_control = 2;
  void clear_compid_primary_control() ;
  ::uint32_t compid_primary_control() const;
  void set_compid_primary_control(::uint32_t value);

  private:
  ::uint32_t _internal_compid_primary_control() const;
  void _internal_set_compid_primary_control(::uint32_t value);

  public:
  // uint32 sysid_secondary_control = 3;
  void clear_sysid_secondary_control() ;
  ::uint32_t sysid_secondary_control() const;
  void set_sysid_secondary_control(::uint32_t value);

  private:
  ::uint32_t _internal_sysid_secondary_control() const;
  void _internal_set_sysid_secondary_control(::uint32_t value);

  public:
  // uint32 compid_secondary_control = 4;
  void clear_compid_secondary_control() ;
  ::uint32_t compid_secondary_control() const;
  void set_compid_secondary_control(::uint32_t value);

  private:
  ::uint32_t _internal_compid_secondary_control() const;
  void _internal_set_compid_secondary_control(::uint32_t value);

  public:
  // uint32 gimbal_device_id = 5;
  void clear_gimbal_device_id() ;
  ::uint32_t gimbal_device_id() const;
  void set_gimbal_device_id(::uint32_t value);

  private:
  ::uint32_t _internal_gimbal_device_id() const;
  void _internal_set_gimbal_device_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t sysid_primary_control_;
    ::uint32_t compid_primary_control_;
    ::uint32_t sysid_secondary_control_;
    ::uint32_t compid_secondary_control_;
    ::uint32_t gimbal_device_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GetGimbalManagerStatusRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusRequest) */ {
 public:
  inline GetGimbalManagerStatusRequest() : GetGimbalManagerStatusRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGimbalManagerStatusRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetGimbalManagerStatusRequest(const GetGimbalManagerStatusRequest& from)
      : GetGimbalManagerStatusRequest(nullptr, from) {}
  GetGimbalManagerStatusRequest(GetGimbalManagerStatusRequest&& from) noexcept
    : GetGimbalManagerStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetGimbalManagerStatusRequest& operator=(const GetGimbalManagerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGimbalManagerStatusRequest& operator=(GetGimbalManagerStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGimbalManagerStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGimbalManagerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetGimbalManagerStatusRequest*>(
               &_GetGimbalManagerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetGimbalManagerStatusRequest& a, GetGimbalManagerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGimbalManagerStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGimbalManagerStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGimbalManagerStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGimbalManagerStatusRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetGimbalManagerStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetGimbalManagerStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusRequest";
  }
  protected:
  explicit GetGimbalManagerStatusRequest(::google::protobuf::Arena* arena);
  GetGimbalManagerStatusRequest(::google::protobuf::Arena* arena, const GetGimbalManagerStatusRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetRoiLocationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse) */ {
 public:
  inline SetRoiLocationResponse() : SetRoiLocationResponse(nullptr) {}
  ~SetRoiLocationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetRoiLocationResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetRoiLocationResponse(const SetRoiLocationResponse& from)
      : SetRoiLocationResponse(nullptr, from) {}
  SetRoiLocationResponse(SetRoiLocationResponse&& from) noexcept
    : SetRoiLocationResponse() {
    *this = ::std::move(from);
  }

  inline SetRoiLocationResponse& operator=(const SetRoiLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRoiLocationResponse& operator=(SetRoiLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRoiLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRoiLocationResponse* internal_default_instance() {
    return reinterpret_cast<const SetRoiLocationResponse*>(
               &_SetRoiLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetRoiLocationResponse& a, SetRoiLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRoiLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRoiLocationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRoiLocationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRoiLocationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRoiLocationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetRoiLocationResponse& from) {
    SetRoiLocationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetRoiLocationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse";
  }
  protected:
  explicit SetRoiLocationResponse(::google::protobuf::Arena* arena);
  SetRoiLocationResponse(::google::protobuf::Arena* arena, const SetRoiLocationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiLocationFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
  bool has_roi_location() const;
  void clear_roi_location() ;
  const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& roi_location() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::RoiLocation* release_roi_location();
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* mutable_roi_location();
  void set_allocated_roi_location(::mavsdk::rpc::gimbal_manager_server::RoiLocation* value);
  void unsafe_arena_set_allocated_roi_location(::mavsdk::rpc::gimbal_manager_server::RoiLocation* value);
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* unsafe_arena_release_roi_location();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& _internal_roi_location() const;
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* _internal_mutable_roi_location();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::RoiLocation* roi_location_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInformationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SetInformationResponse) */ {
 public:
  inline SetInformationResponse() : SetInformationResponse(nullptr) {}
  ~SetInformationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInformationResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetInformationResponse(const SetInformationResponse& from)
      : SetInformationResponse(nullptr, from) {}
  SetInformationResponse(SetInformationResponse&& from) noexcept
    : SetInformationResponse() {
    *this = ::std::move(from);
  }

  inline SetInformationResponse& operator=(const SetInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationResponse& operator=(SetInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationResponse* internal_default_instance() {
    return reinterpret_cast<const SetInformationResponse*>(
               &_SetInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetInformationResponse& a, SetInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInformationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInformationResponse& from) {
    SetInformationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInformationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SetInformationResponse";
  }
  protected:
  explicit SetInformationResponse(::google::protobuf::Arena* arena);
  SetInformationResponse(::google::protobuf::Arena* arena, const SetInformationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalManagerServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
  bool has_gimbal_manager_server_result() const;
  void clear_gimbal_manager_server_result() ;
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& gimbal_manager_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* release_gimbal_manager_server_result();
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* mutable_gimbal_manager_server_result();
  void set_allocated_gimbal_manager_server_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* value);
  void unsafe_arena_set_allocated_gimbal_manager_server_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* value);
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* unsafe_arena_release_gimbal_manager_server_result();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& _internal_gimbal_manager_server_result() const;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* _internal_mutable_gimbal_manager_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* gimbal_manager_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInformationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SetInformationRequest) */ {
 public:
  inline SetInformationRequest() : SetInformationRequest(nullptr) {}
  ~SetInformationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInformationRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetInformationRequest(const SetInformationRequest& from)
      : SetInformationRequest(nullptr, from) {}
  SetInformationRequest(SetInformationRequest&& from) noexcept
    : SetInformationRequest() {
    *this = ::std::move(from);
  }

  inline SetInformationRequest& operator=(const SetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationRequest& operator=(SetInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const SetInformationRequest*>(
               &_SetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetInformationRequest& a, SetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInformationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInformationRequest& from) {
    SetInformationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInformationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SetInformationRequest";
  }
  protected:
  explicit SetInformationRequest(::google::protobuf::Arena* arena);
  SetInformationRequest(::google::protobuf::Arena* arena, const SetInformationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.Information information = 1;
  bool has_information() const;
  void clear_information() ;
  const ::mavsdk::rpc::gimbal_manager_server::Information& information() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::Information* release_information();
  ::mavsdk::rpc::gimbal_manager_server::Information* mutable_information();
  void set_allocated_information(::mavsdk::rpc::gimbal_manager_server::Information* value);
  void unsafe_arena_set_allocated_information(::mavsdk::rpc::gimbal_manager_server::Information* value);
  ::mavsdk::rpc::gimbal_manager_server::Information* unsafe_arena_release_information();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::Information& _internal_information() const;
  ::mavsdk::rpc::gimbal_manager_server::Information* _internal_mutable_information();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::Information* information_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetAttitude final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SetAttitude) */ {
 public:
  inline SetAttitude() : SetAttitude(nullptr) {}
  ~SetAttitude() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAttitude(::google::protobuf::internal::ConstantInitialized);

  inline SetAttitude(const SetAttitude& from)
      : SetAttitude(nullptr, from) {}
  SetAttitude(SetAttitude&& from) noexcept
    : SetAttitude() {
    *this = ::std::move(from);
  }

  inline SetAttitude& operator=(const SetAttitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitude& operator=(SetAttitude&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitude& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitude* internal_default_instance() {
    return reinterpret_cast<const SetAttitude*>(
               &_SetAttitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetAttitude& a, SetAttitude& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitude* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitude* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitude* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitude>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAttitude& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetAttitude& from) {
    SetAttitude::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAttitude* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SetAttitude";
  }
  protected:
  explicit SetAttitude(::google::protobuf::Arena* arena);
  SetAttitude(::google::protobuf::Arena* arena, const SetAttitude& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeQuaternionFieldNumber = 2,
    kFlagsFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
  bool has_attitude_quaternion() const;
  void clear_attitude_quaternion() ;
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::gimbal_manager_server::Quaternion* value);
  void unsafe_arena_set_allocated_attitude_quaternion(::mavsdk::rpc::gimbal_manager_server::Quaternion* value);
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* unsafe_arena_release_attitude_quaternion();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* _internal_mutable_attitude_quaternion();

  public:
  // uint32 flags = 1;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SetAttitude)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::Quaternion* attitude_quaternion_;
    ::uint32_t flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GimbalManagerConfiguredResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse) */ {
 public:
  inline GimbalManagerConfiguredResponse() : GimbalManagerConfiguredResponse(nullptr) {}
  ~GimbalManagerConfiguredResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalManagerConfiguredResponse(::google::protobuf::internal::ConstantInitialized);

  inline GimbalManagerConfiguredResponse(const GimbalManagerConfiguredResponse& from)
      : GimbalManagerConfiguredResponse(nullptr, from) {}
  GimbalManagerConfiguredResponse(GimbalManagerConfiguredResponse&& from) noexcept
    : GimbalManagerConfiguredResponse() {
    *this = ::std::move(from);
  }

  inline GimbalManagerConfiguredResponse& operator=(const GimbalManagerConfiguredResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalManagerConfiguredResponse& operator=(GimbalManagerConfiguredResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalManagerConfiguredResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalManagerConfiguredResponse* internal_default_instance() {
    return reinterpret_cast<const GimbalManagerConfiguredResponse*>(
               &_GimbalManagerConfiguredResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GimbalManagerConfiguredResponse& a, GimbalManagerConfiguredResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalManagerConfiguredResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalManagerConfiguredResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalManagerConfiguredResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalManagerConfiguredResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalManagerConfiguredResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GimbalManagerConfiguredResponse& from) {
    GimbalManagerConfiguredResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GimbalManagerConfiguredResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse";
  }
  protected:
  explicit GimbalManagerConfiguredResponse(::google::protobuf::Arena* arena);
  GimbalManagerConfiguredResponse(::google::protobuf::Arena* arena, const GimbalManagerConfiguredResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalManagerConfigFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
  bool has_gimbal_manager_config() const;
  void clear_gimbal_manager_config() ;
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& gimbal_manager_config() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* release_gimbal_manager_config();
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* mutable_gimbal_manager_config();
  void set_allocated_gimbal_manager_config(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* value);
  void unsafe_arena_set_allocated_gimbal_manager_config(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* value);
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* unsafe_arena_release_gimbal_manager_config();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& _internal_gimbal_manager_config() const;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* _internal_mutable_gimbal_manager_config();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* gimbal_manager_config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class GetGimbalManagerStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse) */ {
 public:
  inline GetGimbalManagerStatusResponse() : GetGimbalManagerStatusResponse(nullptr) {}
  ~GetGimbalManagerStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGimbalManagerStatusResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetGimbalManagerStatusResponse(const GetGimbalManagerStatusResponse& from)
      : GetGimbalManagerStatusResponse(nullptr, from) {}
  GetGimbalManagerStatusResponse(GetGimbalManagerStatusResponse&& from) noexcept
    : GetGimbalManagerStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetGimbalManagerStatusResponse& operator=(const GetGimbalManagerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGimbalManagerStatusResponse& operator=(GetGimbalManagerStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGimbalManagerStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGimbalManagerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetGimbalManagerStatusResponse*>(
               &_GetGimbalManagerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetGimbalManagerStatusResponse& a, GetGimbalManagerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGimbalManagerStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGimbalManagerStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGimbalManagerStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGimbalManagerStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGimbalManagerStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetGimbalManagerStatusResponse& from) {
    GetGimbalManagerStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGimbalManagerStatusResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse";
  }
  protected:
  explicit GetGimbalManagerStatusResponse(::google::protobuf::Arena* arena);
  GetGimbalManagerStatusResponse(::google::protobuf::Arena* arena, const GetGimbalManagerStatusResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGimbalManagerStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
  bool has_gimbal_manager_status() const;
  void clear_gimbal_manager_status() ;
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& gimbal_manager_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* release_gimbal_manager_status();
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* mutable_gimbal_manager_status();
  void set_allocated_gimbal_manager_status(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* value);
  void unsafe_arena_set_allocated_gimbal_manager_status(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* value);
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* unsafe_arena_release_gimbal_manager_status();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& _internal_gimbal_manager_status() const;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* _internal_mutable_gimbal_manager_status();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* gimbal_manager_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class DeviceDiscoveredResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse) */ {
 public:
  inline DeviceDiscoveredResponse() : DeviceDiscoveredResponse(nullptr) {}
  ~DeviceDiscoveredResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceDiscoveredResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceDiscoveredResponse(const DeviceDiscoveredResponse& from)
      : DeviceDiscoveredResponse(nullptr, from) {}
  DeviceDiscoveredResponse(DeviceDiscoveredResponse&& from) noexcept
    : DeviceDiscoveredResponse() {
    *this = ::std::move(from);
  }

  inline DeviceDiscoveredResponse& operator=(const DeviceDiscoveredResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDiscoveredResponse& operator=(DeviceDiscoveredResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceDiscoveredResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceDiscoveredResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceDiscoveredResponse*>(
               &_DeviceDiscoveredResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceDiscoveredResponse& a, DeviceDiscoveredResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDiscoveredResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDiscoveredResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceDiscoveredResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceDiscoveredResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceDiscoveredResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceDiscoveredResponse& from) {
    DeviceDiscoveredResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceDiscoveredResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse";
  }
  protected:
  explicit DeviceDiscoveredResponse(::google::protobuf::Arena* arena);
  DeviceDiscoveredResponse(::google::protobuf::Arena* arena, const DeviceDiscoveredResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceDiscoveredFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
  bool has_device_discovered() const;
  void clear_device_discovered() ;
  const ::mavsdk::rpc::gimbal_manager_server::Information& device_discovered() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::Information* release_device_discovered();
  ::mavsdk::rpc::gimbal_manager_server::Information* mutable_device_discovered();
  void set_allocated_device_discovered(::mavsdk::rpc::gimbal_manager_server::Information* value);
  void unsafe_arena_set_allocated_device_discovered(::mavsdk::rpc::gimbal_manager_server::Information* value);
  ::mavsdk::rpc::gimbal_manager_server::Information* unsafe_arena_release_device_discovered();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::Information& _internal_device_discovered() const;
  ::mavsdk::rpc::gimbal_manager_server::Information* _internal_mutable_device_discovered();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::Information* device_discovered_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class DeviceAttitudeStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus) */ {
 public:
  inline DeviceAttitudeStatus() : DeviceAttitudeStatus(nullptr) {}
  ~DeviceAttitudeStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceAttitudeStatus(::google::protobuf::internal::ConstantInitialized);

  inline DeviceAttitudeStatus(const DeviceAttitudeStatus& from)
      : DeviceAttitudeStatus(nullptr, from) {}
  DeviceAttitudeStatus(DeviceAttitudeStatus&& from) noexcept
    : DeviceAttitudeStatus() {
    *this = ::std::move(from);
  }

  inline DeviceAttitudeStatus& operator=(const DeviceAttitudeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttitudeStatus& operator=(DeviceAttitudeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAttitudeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceAttitudeStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceAttitudeStatus*>(
               &_DeviceAttitudeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeviceAttitudeStatus& a, DeviceAttitudeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAttitudeStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttitudeStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceAttitudeStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceAttitudeStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceAttitudeStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceAttitudeStatus& from) {
    DeviceAttitudeStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceAttitudeStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus";
  }
  protected:
  explicit DeviceAttitudeStatus(::google::protobuf::Arena* arena);
  DeviceAttitudeStatus(::google::protobuf::Arena* arena, const DeviceAttitudeStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 3,
    kTimeBootMsFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kAngularVelocityXFieldNumber = 4,
    kAngularVelocityYFieldNumber = 5,
    kAngularVelocityZFieldNumber = 6,
    kFailureFlagsFieldNumber = 7,
  };
  // .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
  bool has_q() const;
  void clear_q() ;
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::Quaternion* release_q();
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::gimbal_manager_server::Quaternion* value);
  void unsafe_arena_set_allocated_q(::mavsdk::rpc::gimbal_manager_server::Quaternion* value);
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* unsafe_arena_release_q();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion& _internal_q() const;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* _internal_mutable_q();

  public:
  // uint32 time_boot_ms = 1;
  void clear_time_boot_ms() ;
  ::uint32_t time_boot_ms() const;
  void set_time_boot_ms(::uint32_t value);

  private:
  ::uint32_t _internal_time_boot_ms() const;
  void _internal_set_time_boot_ms(::uint32_t value);

  public:
  // uint32 flags = 2;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // float angular_velocity_x = 4;
  void clear_angular_velocity_x() ;
  float angular_velocity_x() const;
  void set_angular_velocity_x(float value);

  private:
  float _internal_angular_velocity_x() const;
  void _internal_set_angular_velocity_x(float value);

  public:
  // float angular_velocity_y = 5;
  void clear_angular_velocity_y() ;
  float angular_velocity_y() const;
  void set_angular_velocity_y(float value);

  private:
  float _internal_angular_velocity_y() const;
  void _internal_set_angular_velocity_y(float value);

  public:
  // float angular_velocity_z = 6;
  void clear_angular_velocity_z() ;
  float angular_velocity_z() const;
  void set_angular_velocity_z(float value);

  private:
  float _internal_angular_velocity_z() const;
  void _internal_set_angular_velocity_z(float value);

  public:
  // uint32 failure_flags = 7;
  void clear_failure_flags() ;
  ::uint32_t failure_flags() const;
  void set_failure_flags(::uint32_t value);

  private:
  ::uint32_t _internal_failure_flags() const;
  void _internal_set_failure_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::Quaternion* q_;
    ::uint32_t time_boot_ms_;
    ::uint32_t flags_;
    float angular_velocity_x_;
    float angular_velocity_y_;
    float angular_velocity_z_;
    ::uint32_t failure_flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetAttitudeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse) */ {
 public:
  inline SetAttitudeResponse() : SetAttitudeResponse(nullptr) {}
  ~SetAttitudeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAttitudeResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetAttitudeResponse(const SetAttitudeResponse& from)
      : SetAttitudeResponse(nullptr, from) {}
  SetAttitudeResponse(SetAttitudeResponse&& from) noexcept
    : SetAttitudeResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudeResponse& operator=(const SetAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudeResponse& operator=(SetAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudeResponse*>(
               &_SetAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetAttitudeResponse& a, SetAttitudeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAttitudeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetAttitudeResponse& from) {
    SetAttitudeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAttitudeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse";
  }
  protected:
  explicit SetAttitudeResponse(::google::protobuf::Arena* arena);
  SetAttitudeResponse(::google::protobuf::Arena* arena, const SetAttitudeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetAttitudeFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
  bool has_set_attitude() const;
  void clear_set_attitude() ;
  const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& set_attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::SetAttitude* release_set_attitude();
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* mutable_set_attitude();
  void set_allocated_set_attitude(::mavsdk::rpc::gimbal_manager_server::SetAttitude* value);
  void unsafe_arena_set_allocated_set_attitude(::mavsdk::rpc::gimbal_manager_server::SetAttitude* value);
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* unsafe_arena_release_set_attitude();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& _internal_set_attitude() const;
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* _internal_mutable_set_attitude();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::SetAttitude* set_attitude_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};// -------------------------------------------------------------------

class DeviceAttitudeStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse) */ {
 public:
  inline DeviceAttitudeStatusResponse() : DeviceAttitudeStatusResponse(nullptr) {}
  ~DeviceAttitudeStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceAttitudeStatusResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceAttitudeStatusResponse(const DeviceAttitudeStatusResponse& from)
      : DeviceAttitudeStatusResponse(nullptr, from) {}
  DeviceAttitudeStatusResponse(DeviceAttitudeStatusResponse&& from) noexcept
    : DeviceAttitudeStatusResponse() {
    *this = ::std::move(from);
  }

  inline DeviceAttitudeStatusResponse& operator=(const DeviceAttitudeStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttitudeStatusResponse& operator=(DeviceAttitudeStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAttitudeStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceAttitudeStatusResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceAttitudeStatusResponse*>(
               &_DeviceAttitudeStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeviceAttitudeStatusResponse& a, DeviceAttitudeStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAttitudeStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttitudeStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceAttitudeStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceAttitudeStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceAttitudeStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceAttitudeStatusResponse& from) {
    DeviceAttitudeStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceAttitudeStatusResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse";
  }
  protected:
  explicit DeviceAttitudeStatusResponse(::google::protobuf::Arena* arena);
  DeviceAttitudeStatusResponse(::google::protobuf::Arena* arena, const DeviceAttitudeStatusResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceAttitudeStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
  bool has_device_attitude_status() const;
  void clear_device_attitude_status() ;
  const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& device_attitude_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* release_device_attitude_status();
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* mutable_device_attitude_status();
  void set_allocated_device_attitude_status(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* value);
  void unsafe_arena_set_allocated_device_attitude_status(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* value);
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* unsafe_arena_release_device_attitude_status();

  private:
  const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& _internal_device_attitude_status() const;
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* _internal_mutable_device_attitude_status();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* device_attitude_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetInformationRequest

// .mavsdk.rpc.gimbal_manager_server.Information information = 1;
inline bool SetInformationRequest::has_information() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.information_ != nullptr);
  return value;
}
inline void SetInformationRequest::clear_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.information_ != nullptr) _impl_.information_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::Information& SetInformationRequest::_internal_information() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::Information* p = _impl_.information_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::Information&>(::mavsdk::rpc::gimbal_manager_server::_Information_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::Information& SetInformationRequest::information() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetInformationRequest.information)
  return _internal_information();
}
inline void SetInformationRequest::unsafe_arena_set_allocated_information(::mavsdk::rpc::gimbal_manager_server::Information* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.information_);
  }
  _impl_.information_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.SetInformationRequest.information)
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* SetInformationRequest::release_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Information* released = _impl_.information_;
  _impl_.information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* SetInformationRequest::unsafe_arena_release_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.SetInformationRequest.information)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Information* temp = _impl_.information_;
  _impl_.information_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* SetInformationRequest::_internal_mutable_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.information_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Information>(GetArena());
    _impl_.information_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(p);
  }
  return _impl_.information_;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* SetInformationRequest::mutable_information() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::Information* _msg = _internal_mutable_information();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.SetInformationRequest.information)
  return _msg;
}
inline void SetInformationRequest::set_allocated_information(::mavsdk::rpc::gimbal_manager_server::Information* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(_impl_.information_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.information_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.SetInformationRequest.information)
}

// -------------------------------------------------------------------

// SetInformationResponse

// .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
inline bool SetInformationResponse::has_gimbal_manager_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_manager_server_result_ != nullptr);
  return value;
}
inline void SetInformationResponse::clear_gimbal_manager_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gimbal_manager_server_result_ != nullptr) _impl_.gimbal_manager_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& SetInformationResponse::_internal_gimbal_manager_server_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* p = _impl_.gimbal_manager_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult&>(::mavsdk::rpc::gimbal_manager_server::_GimbalManagerServerResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& SetInformationResponse::gimbal_manager_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetInformationResponse.gimbal_manager_server_result)
  return _internal_gimbal_manager_server_result();
}
inline void SetInformationResponse::unsafe_arena_set_allocated_gimbal_manager_server_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_manager_server_result_);
  }
  _impl_.gimbal_manager_server_result_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.SetInformationResponse.gimbal_manager_server_result)
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* SetInformationResponse::release_gimbal_manager_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* released = _impl_.gimbal_manager_server_result_;
  _impl_.gimbal_manager_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* SetInformationResponse::unsafe_arena_release_gimbal_manager_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.SetInformationResponse.gimbal_manager_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* temp = _impl_.gimbal_manager_server_result_;
  _impl_.gimbal_manager_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* SetInformationResponse::_internal_mutable_gimbal_manager_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gimbal_manager_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult>(GetArena());
    _impl_.gimbal_manager_server_result_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult*>(p);
  }
  return _impl_.gimbal_manager_server_result_;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* SetInformationResponse::mutable_gimbal_manager_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* _msg = _internal_mutable_gimbal_manager_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.SetInformationResponse.gimbal_manager_server_result)
  return _msg;
}
inline void SetInformationResponse::set_allocated_gimbal_manager_server_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult*>(_impl_.gimbal_manager_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_manager_server_result_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.SetInformationResponse.gimbal_manager_server_result)
}

// -------------------------------------------------------------------

// SubscribeDeviceDiscoveredRequest

// -------------------------------------------------------------------

// DeviceDiscoveredResponse

// .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
inline bool DeviceDiscoveredResponse::has_device_discovered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.device_discovered_ != nullptr);
  return value;
}
inline void DeviceDiscoveredResponse::clear_device_discovered() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.device_discovered_ != nullptr) _impl_.device_discovered_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::Information& DeviceDiscoveredResponse::_internal_device_discovered() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::Information* p = _impl_.device_discovered_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::Information&>(::mavsdk::rpc::gimbal_manager_server::_Information_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::Information& DeviceDiscoveredResponse::device_discovered() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse.device_discovered)
  return _internal_device_discovered();
}
inline void DeviceDiscoveredResponse::unsafe_arena_set_allocated_device_discovered(::mavsdk::rpc::gimbal_manager_server::Information* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.device_discovered_);
  }
  _impl_.device_discovered_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse.device_discovered)
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* DeviceDiscoveredResponse::release_device_discovered() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Information* released = _impl_.device_discovered_;
  _impl_.device_discovered_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* DeviceDiscoveredResponse::unsafe_arena_release_device_discovered() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse.device_discovered)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Information* temp = _impl_.device_discovered_;
  _impl_.device_discovered_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* DeviceDiscoveredResponse::_internal_mutable_device_discovered() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.device_discovered_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Information>(GetArena());
    _impl_.device_discovered_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(p);
  }
  return _impl_.device_discovered_;
}
inline ::mavsdk::rpc::gimbal_manager_server::Information* DeviceDiscoveredResponse::mutable_device_discovered() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::Information* _msg = _internal_mutable_device_discovered();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse.device_discovered)
  return _msg;
}
inline void DeviceDiscoveredResponse::set_allocated_device_discovered(::mavsdk::rpc::gimbal_manager_server::Information* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(_impl_.device_discovered_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.device_discovered_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Information*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse.device_discovered)
}

// -------------------------------------------------------------------

// SubscribeGimbalManagerConfiguredRequest

// -------------------------------------------------------------------

// GimbalManagerConfiguredResponse

// .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
inline bool GimbalManagerConfiguredResponse::has_gimbal_manager_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_manager_config_ != nullptr);
  return value;
}
inline void GimbalManagerConfiguredResponse::clear_gimbal_manager_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gimbal_manager_config_ != nullptr) _impl_.gimbal_manager_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& GimbalManagerConfiguredResponse::_internal_gimbal_manager_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* p = _impl_.gimbal_manager_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration&>(::mavsdk::rpc::gimbal_manager_server::_GimbalManagerConfiguration_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& GimbalManagerConfiguredResponse::gimbal_manager_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse.gimbal_manager_config)
  return _internal_gimbal_manager_config();
}
inline void GimbalManagerConfiguredResponse::unsafe_arena_set_allocated_gimbal_manager_config(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_manager_config_);
  }
  _impl_.gimbal_manager_config_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse.gimbal_manager_config)
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* GimbalManagerConfiguredResponse::release_gimbal_manager_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* released = _impl_.gimbal_manager_config_;
  _impl_.gimbal_manager_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* GimbalManagerConfiguredResponse::unsafe_arena_release_gimbal_manager_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse.gimbal_manager_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* temp = _impl_.gimbal_manager_config_;
  _impl_.gimbal_manager_config_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* GimbalManagerConfiguredResponse::_internal_mutable_gimbal_manager_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gimbal_manager_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration>(GetArena());
    _impl_.gimbal_manager_config_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration*>(p);
  }
  return _impl_.gimbal_manager_config_;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* GimbalManagerConfiguredResponse::mutable_gimbal_manager_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* _msg = _internal_mutable_gimbal_manager_config();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse.gimbal_manager_config)
  return _msg;
}
inline void GimbalManagerConfiguredResponse::set_allocated_gimbal_manager_config(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration*>(_impl_.gimbal_manager_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_manager_config_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse.gimbal_manager_config)
}

// -------------------------------------------------------------------

// SubscribeDeviceAttitudeStatusRequest

// -------------------------------------------------------------------

// DeviceAttitudeStatusResponse

// .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
inline bool DeviceAttitudeStatusResponse::has_device_attitude_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.device_attitude_status_ != nullptr);
  return value;
}
inline void DeviceAttitudeStatusResponse::clear_device_attitude_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.device_attitude_status_ != nullptr) _impl_.device_attitude_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& DeviceAttitudeStatusResponse::_internal_device_attitude_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* p = _impl_.device_attitude_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus&>(::mavsdk::rpc::gimbal_manager_server::_DeviceAttitudeStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& DeviceAttitudeStatusResponse::device_attitude_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse.device_attitude_status)
  return _internal_device_attitude_status();
}
inline void DeviceAttitudeStatusResponse::unsafe_arena_set_allocated_device_attitude_status(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.device_attitude_status_);
  }
  _impl_.device_attitude_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse.device_attitude_status)
}
inline ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* DeviceAttitudeStatusResponse::release_device_attitude_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* released = _impl_.device_attitude_status_;
  _impl_.device_attitude_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* DeviceAttitudeStatusResponse::unsafe_arena_release_device_attitude_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse.device_attitude_status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* temp = _impl_.device_attitude_status_;
  _impl_.device_attitude_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* DeviceAttitudeStatusResponse::_internal_mutable_device_attitude_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.device_attitude_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus>(GetArena());
    _impl_.device_attitude_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus*>(p);
  }
  return _impl_.device_attitude_status_;
}
inline ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* DeviceAttitudeStatusResponse::mutable_device_attitude_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* _msg = _internal_mutable_device_attitude_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse.device_attitude_status)
  return _msg;
}
inline void DeviceAttitudeStatusResponse::set_allocated_device_attitude_status(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus*>(_impl_.device_attitude_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.device_attitude_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse.device_attitude_status)
}

// -------------------------------------------------------------------

// GetGimbalManagerStatusRequest

// -------------------------------------------------------------------

// GetGimbalManagerStatusResponse

// .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
inline bool GetGimbalManagerStatusResponse::has_gimbal_manager_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_manager_status_ != nullptr);
  return value;
}
inline void GetGimbalManagerStatusResponse::clear_gimbal_manager_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gimbal_manager_status_ != nullptr) _impl_.gimbal_manager_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& GetGimbalManagerStatusResponse::_internal_gimbal_manager_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* p = _impl_.gimbal_manager_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus&>(::mavsdk::rpc::gimbal_manager_server::_GimbalManagerStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& GetGimbalManagerStatusResponse::gimbal_manager_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse.gimbal_manager_status)
  return _internal_gimbal_manager_status();
}
inline void GetGimbalManagerStatusResponse::unsafe_arena_set_allocated_gimbal_manager_status(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_manager_status_);
  }
  _impl_.gimbal_manager_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse.gimbal_manager_status)
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* GetGimbalManagerStatusResponse::release_gimbal_manager_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* released = _impl_.gimbal_manager_status_;
  _impl_.gimbal_manager_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* GetGimbalManagerStatusResponse::unsafe_arena_release_gimbal_manager_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse.gimbal_manager_status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* temp = _impl_.gimbal_manager_status_;
  _impl_.gimbal_manager_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* GetGimbalManagerStatusResponse::_internal_mutable_gimbal_manager_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gimbal_manager_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus>(GetArena());
    _impl_.gimbal_manager_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus*>(p);
  }
  return _impl_.gimbal_manager_status_;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* GetGimbalManagerStatusResponse::mutable_gimbal_manager_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* _msg = _internal_mutable_gimbal_manager_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse.gimbal_manager_status)
  return _msg;
}
inline void GetGimbalManagerStatusResponse::set_allocated_gimbal_manager_status(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus*>(_impl_.gimbal_manager_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_manager_status_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse.gimbal_manager_status)
}

// -------------------------------------------------------------------

// SubscribeSetAttitudeRequest

// -------------------------------------------------------------------

// SetAttitudeResponse

// .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
inline bool SetAttitudeResponse::has_set_attitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.set_attitude_ != nullptr);
  return value;
}
inline void SetAttitudeResponse::clear_set_attitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.set_attitude_ != nullptr) _impl_.set_attitude_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& SetAttitudeResponse::_internal_set_attitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::SetAttitude* p = _impl_.set_attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::SetAttitude&>(::mavsdk::rpc::gimbal_manager_server::_SetAttitude_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& SetAttitudeResponse::set_attitude() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse.set_attitude)
  return _internal_set_attitude();
}
inline void SetAttitudeResponse::unsafe_arena_set_allocated_set_attitude(::mavsdk::rpc::gimbal_manager_server::SetAttitude* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.set_attitude_);
  }
  _impl_.set_attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::SetAttitude*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse.set_attitude)
}
inline ::mavsdk::rpc::gimbal_manager_server::SetAttitude* SetAttitudeResponse::release_set_attitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* released = _impl_.set_attitude_;
  _impl_.set_attitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::SetAttitude* SetAttitudeResponse::unsafe_arena_release_set_attitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse.set_attitude)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* temp = _impl_.set_attitude_;
  _impl_.set_attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::SetAttitude* SetAttitudeResponse::_internal_mutable_set_attitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.set_attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::SetAttitude>(GetArena());
    _impl_.set_attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::SetAttitude*>(p);
  }
  return _impl_.set_attitude_;
}
inline ::mavsdk::rpc::gimbal_manager_server::SetAttitude* SetAttitudeResponse::mutable_set_attitude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::SetAttitude* _msg = _internal_mutable_set_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse.set_attitude)
  return _msg;
}
inline void SetAttitudeResponse::set_allocated_set_attitude(::mavsdk::rpc::gimbal_manager_server::SetAttitude* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::SetAttitude*>(_impl_.set_attitude_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::SetAttitude*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.set_attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::SetAttitude*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse.set_attitude)
}

// -------------------------------------------------------------------

// SubscribeSetRoiLocationRequest

// -------------------------------------------------------------------

// SetRoiLocationResponse

// .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
inline bool SetRoiLocationResponse::has_roi_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_location_ != nullptr);
  return value;
}
inline void SetRoiLocationResponse::clear_roi_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.roi_location_ != nullptr) _impl_.roi_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& SetRoiLocationResponse::_internal_roi_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::RoiLocation* p = _impl_.roi_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::RoiLocation&>(::mavsdk::rpc::gimbal_manager_server::_RoiLocation_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& SetRoiLocationResponse::roi_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse.roi_location)
  return _internal_roi_location();
}
inline void SetRoiLocationResponse::unsafe_arena_set_allocated_roi_location(::mavsdk::rpc::gimbal_manager_server::RoiLocation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.roi_location_);
  }
  _impl_.roi_location_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::RoiLocation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse.roi_location)
}
inline ::mavsdk::rpc::gimbal_manager_server::RoiLocation* SetRoiLocationResponse::release_roi_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* released = _impl_.roi_location_;
  _impl_.roi_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::RoiLocation* SetRoiLocationResponse::unsafe_arena_release_roi_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse.roi_location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* temp = _impl_.roi_location_;
  _impl_.roi_location_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::RoiLocation* SetRoiLocationResponse::_internal_mutable_roi_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.roi_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::RoiLocation>(GetArena());
    _impl_.roi_location_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::RoiLocation*>(p);
  }
  return _impl_.roi_location_;
}
inline ::mavsdk::rpc::gimbal_manager_server::RoiLocation* SetRoiLocationResponse::mutable_roi_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::RoiLocation* _msg = _internal_mutable_roi_location();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse.roi_location)
  return _msg;
}
inline void SetRoiLocationResponse::set_allocated_roi_location(::mavsdk::rpc::gimbal_manager_server::RoiLocation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::RoiLocation*>(_impl_.roi_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::RoiLocation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.roi_location_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::RoiLocation*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse.roi_location)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Quaternion.w)
}
inline float Quaternion::_internal_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.w_;
}
inline void Quaternion::_internal_set_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.w_ = value;
}

// float x = 2;
inline void Quaternion::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Quaternion.x)
}
inline float Quaternion::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Quaternion::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 3;
inline void Quaternion::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Quaternion.y)
}
inline float Quaternion::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Quaternion::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 4;
inline void Quaternion::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Quaternion.z)
}
inline float Quaternion::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Quaternion::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Information

// uint32 cap_flags = 1;
inline void Information::clear_cap_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cap_flags_ = 0u;
}
inline ::uint32_t Information::cap_flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.cap_flags)
  return _internal_cap_flags();
}
inline void Information::set_cap_flags(::uint32_t value) {
  _internal_set_cap_flags(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.cap_flags)
}
inline ::uint32_t Information::_internal_cap_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cap_flags_;
}
inline void Information::_internal_set_cap_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cap_flags_ = value;
}

// uint32 gimbal_device_id = 2;
inline void Information::clear_gimbal_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gimbal_device_id_ = 0u;
}
inline ::uint32_t Information::gimbal_device_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.gimbal_device_id)
  return _internal_gimbal_device_id();
}
inline void Information::set_gimbal_device_id(::uint32_t value) {
  _internal_set_gimbal_device_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.gimbal_device_id)
}
inline ::uint32_t Information::_internal_gimbal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gimbal_device_id_;
}
inline void Information::_internal_set_gimbal_device_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gimbal_device_id_ = value;
}

// float roll_min = 3;
inline void Information::clear_roll_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roll_min_ = 0;
}
inline float Information::roll_min() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.roll_min)
  return _internal_roll_min();
}
inline void Information::set_roll_min(float value) {
  _internal_set_roll_min(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.roll_min)
}
inline float Information::_internal_roll_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roll_min_;
}
inline void Information::_internal_set_roll_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roll_min_ = value;
}

// float roll_max = 4;
inline void Information::clear_roll_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roll_max_ = 0;
}
inline float Information::roll_max() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.roll_max)
  return _internal_roll_max();
}
inline void Information::set_roll_max(float value) {
  _internal_set_roll_max(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.roll_max)
}
inline float Information::_internal_roll_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roll_max_;
}
inline void Information::_internal_set_roll_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roll_max_ = value;
}

// float pitch_min = 5;
inline void Information::clear_pitch_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_min_ = 0;
}
inline float Information::pitch_min() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.pitch_min)
  return _internal_pitch_min();
}
inline void Information::set_pitch_min(float value) {
  _internal_set_pitch_min(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.pitch_min)
}
inline float Information::_internal_pitch_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_min_;
}
inline void Information::_internal_set_pitch_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_min_ = value;
}

// float pitch_max = 6;
inline void Information::clear_pitch_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_max_ = 0;
}
inline float Information::pitch_max() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.pitch_max)
  return _internal_pitch_max();
}
inline void Information::set_pitch_max(float value) {
  _internal_set_pitch_max(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.pitch_max)
}
inline float Information::_internal_pitch_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_max_;
}
inline void Information::_internal_set_pitch_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_max_ = value;
}

// float yaw_min = 7;
inline void Information::clear_yaw_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_min_ = 0;
}
inline float Information::yaw_min() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.yaw_min)
  return _internal_yaw_min();
}
inline void Information::set_yaw_min(float value) {
  _internal_set_yaw_min(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.yaw_min)
}
inline float Information::_internal_yaw_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_min_;
}
inline void Information::_internal_set_yaw_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_min_ = value;
}

// float yaw_max = 8;
inline void Information::clear_yaw_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_max_ = 0;
}
inline float Information::yaw_max() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.Information.yaw_max)
  return _internal_yaw_max();
}
inline void Information::set_yaw_max(float value) {
  _internal_set_yaw_max(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.Information.yaw_max)
}
inline float Information::_internal_yaw_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_max_;
}
inline void Information::_internal_set_yaw_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_max_ = value;
}

// -------------------------------------------------------------------

// GimbalManagerConfiguration

// uint32 sysid_primary_control = 1;
inline void GimbalManagerConfiguration::clear_sysid_primary_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sysid_primary_control_ = 0u;
}
inline ::uint32_t GimbalManagerConfiguration::sysid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.sysid_primary_control)
  return _internal_sysid_primary_control();
}
inline void GimbalManagerConfiguration::set_sysid_primary_control(::uint32_t value) {
  _internal_set_sysid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.sysid_primary_control)
}
inline ::uint32_t GimbalManagerConfiguration::_internal_sysid_primary_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sysid_primary_control_;
}
inline void GimbalManagerConfiguration::_internal_set_sysid_primary_control(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sysid_primary_control_ = value;
}

// uint32 compid_primary_control = 2;
inline void GimbalManagerConfiguration::clear_compid_primary_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compid_primary_control_ = 0u;
}
inline ::uint32_t GimbalManagerConfiguration::compid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.compid_primary_control)
  return _internal_compid_primary_control();
}
inline void GimbalManagerConfiguration::set_compid_primary_control(::uint32_t value) {
  _internal_set_compid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.compid_primary_control)
}
inline ::uint32_t GimbalManagerConfiguration::_internal_compid_primary_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compid_primary_control_;
}
inline void GimbalManagerConfiguration::_internal_set_compid_primary_control(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.compid_primary_control_ = value;
}

// uint32 sysid_secondary_control = 3;
inline void GimbalManagerConfiguration::clear_sysid_secondary_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sysid_secondary_control_ = 0u;
}
inline ::uint32_t GimbalManagerConfiguration::sysid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.sysid_secondary_control)
  return _internal_sysid_secondary_control();
}
inline void GimbalManagerConfiguration::set_sysid_secondary_control(::uint32_t value) {
  _internal_set_sysid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.sysid_secondary_control)
}
inline ::uint32_t GimbalManagerConfiguration::_internal_sysid_secondary_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sysid_secondary_control_;
}
inline void GimbalManagerConfiguration::_internal_set_sysid_secondary_control(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sysid_secondary_control_ = value;
}

// uint32 compid_secondary_control = 4;
inline void GimbalManagerConfiguration::clear_compid_secondary_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compid_secondary_control_ = 0u;
}
inline ::uint32_t GimbalManagerConfiguration::compid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.compid_secondary_control)
  return _internal_compid_secondary_control();
}
inline void GimbalManagerConfiguration::set_compid_secondary_control(::uint32_t value) {
  _internal_set_compid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.compid_secondary_control)
}
inline ::uint32_t GimbalManagerConfiguration::_internal_compid_secondary_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compid_secondary_control_;
}
inline void GimbalManagerConfiguration::_internal_set_compid_secondary_control(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.compid_secondary_control_ = value;
}

// uint32 gimbal_device_id = 5;
inline void GimbalManagerConfiguration::clear_gimbal_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gimbal_device_id_ = 0u;
}
inline ::uint32_t GimbalManagerConfiguration::gimbal_device_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.gimbal_device_id)
  return _internal_gimbal_device_id();
}
inline void GimbalManagerConfiguration::set_gimbal_device_id(::uint32_t value) {
  _internal_set_gimbal_device_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration.gimbal_device_id)
}
inline ::uint32_t GimbalManagerConfiguration::_internal_gimbal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gimbal_device_id_;
}
inline void GimbalManagerConfiguration::_internal_set_gimbal_device_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gimbal_device_id_ = value;
}

// -------------------------------------------------------------------

// DeviceAttitudeStatus

// uint32 time_boot_ms = 1;
inline void DeviceAttitudeStatus::clear_time_boot_ms() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_boot_ms_ = 0u;
}
inline ::uint32_t DeviceAttitudeStatus::time_boot_ms() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.time_boot_ms)
  return _internal_time_boot_ms();
}
inline void DeviceAttitudeStatus::set_time_boot_ms(::uint32_t value) {
  _internal_set_time_boot_ms(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.time_boot_ms)
}
inline ::uint32_t DeviceAttitudeStatus::_internal_time_boot_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_boot_ms_;
}
inline void DeviceAttitudeStatus::_internal_set_time_boot_ms(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_boot_ms_ = value;
}

// uint32 flags = 2;
inline void DeviceAttitudeStatus::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t DeviceAttitudeStatus::flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.flags)
  return _internal_flags();
}
inline void DeviceAttitudeStatus::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.flags)
}
inline ::uint32_t DeviceAttitudeStatus::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void DeviceAttitudeStatus::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flags_ = value;
}

// .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
inline bool DeviceAttitudeStatus::has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_ != nullptr);
  return value;
}
inline void DeviceAttitudeStatus::clear_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.q_ != nullptr) _impl_.q_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::Quaternion& DeviceAttitudeStatus::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::Quaternion&>(::mavsdk::rpc::gimbal_manager_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::Quaternion& DeviceAttitudeStatus::q() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.q)
  return _internal_q();
}
inline void DeviceAttitudeStatus::unsafe_arena_set_allocated_q(::mavsdk::rpc::gimbal_manager_server::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.q)
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* DeviceAttitudeStatus::release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* released = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* DeviceAttitudeStatus::unsafe_arena_release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.q)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* DeviceAttitudeStatus::_internal_mutable_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Quaternion>(GetArena());
    _impl_.q_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(p);
  }
  return _impl_.q_;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* DeviceAttitudeStatus::mutable_q() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.q)
  return _msg;
}
inline void DeviceAttitudeStatus::set_allocated_q(::mavsdk::rpc::gimbal_manager_server::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(_impl_.q_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.q)
}

// float angular_velocity_x = 4;
inline void DeviceAttitudeStatus::clear_angular_velocity_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.angular_velocity_x_ = 0;
}
inline float DeviceAttitudeStatus::angular_velocity_x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_x)
  return _internal_angular_velocity_x();
}
inline void DeviceAttitudeStatus::set_angular_velocity_x(float value) {
  _internal_set_angular_velocity_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_x)
}
inline float DeviceAttitudeStatus::_internal_angular_velocity_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angular_velocity_x_;
}
inline void DeviceAttitudeStatus::_internal_set_angular_velocity_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angular_velocity_x_ = value;
}

// float angular_velocity_y = 5;
inline void DeviceAttitudeStatus::clear_angular_velocity_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.angular_velocity_y_ = 0;
}
inline float DeviceAttitudeStatus::angular_velocity_y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_y)
  return _internal_angular_velocity_y();
}
inline void DeviceAttitudeStatus::set_angular_velocity_y(float value) {
  _internal_set_angular_velocity_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_y)
}
inline float DeviceAttitudeStatus::_internal_angular_velocity_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angular_velocity_y_;
}
inline void DeviceAttitudeStatus::_internal_set_angular_velocity_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angular_velocity_y_ = value;
}

// float angular_velocity_z = 6;
inline void DeviceAttitudeStatus::clear_angular_velocity_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.angular_velocity_z_ = 0;
}
inline float DeviceAttitudeStatus::angular_velocity_z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_z)
  return _internal_angular_velocity_z();
}
inline void DeviceAttitudeStatus::set_angular_velocity_z(float value) {
  _internal_set_angular_velocity_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.angular_velocity_z)
}
inline float DeviceAttitudeStatus::_internal_angular_velocity_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angular_velocity_z_;
}
inline void DeviceAttitudeStatus::_internal_set_angular_velocity_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angular_velocity_z_ = value;
}

// uint32 failure_flags = 7;
inline void DeviceAttitudeStatus::clear_failure_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.failure_flags_ = 0u;
}
inline ::uint32_t DeviceAttitudeStatus::failure_flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.failure_flags)
  return _internal_failure_flags();
}
inline void DeviceAttitudeStatus::set_failure_flags(::uint32_t value) {
  _internal_set_failure_flags(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus.failure_flags)
}
inline ::uint32_t DeviceAttitudeStatus::_internal_failure_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.failure_flags_;
}
inline void DeviceAttitudeStatus::_internal_set_failure_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.failure_flags_ = value;
}

// -------------------------------------------------------------------

// GimbalManagerServerResult

// .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
inline void GimbalManagerServerResult::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result GimbalManagerServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result)
  return _internal_result();
}
inline void GimbalManagerServerResult::set_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result)
}
inline ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result GimbalManagerServerResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result>(_impl_.result_);
}
inline void GimbalManagerServerResult::_internal_set_result(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// string result_str = 2;
inline void GimbalManagerServerResult::clear_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& GimbalManagerServerResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GimbalManagerServerResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str)
}
inline std::string* GimbalManagerServerResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str)
  return _s;
}
inline const std::string& GimbalManagerServerResult::_internal_result_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_str_.Get();
}
inline void GimbalManagerServerResult::_internal_set_result_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* GimbalManagerServerResult::_internal_mutable_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* GimbalManagerServerResult::release_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str)
  return _impl_.result_str_.Release();
}
inline void GimbalManagerServerResult::set_allocated_result_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_str_.IsDefault()) {
          _impl_.result_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str)
}

// -------------------------------------------------------------------

// GimbalManagerStatus

// uint32 flags = 1;
inline void GimbalManagerStatus::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.flags)
  return _internal_flags();
}
inline void GimbalManagerStatus::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.flags)
}
inline ::uint32_t GimbalManagerStatus::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void GimbalManagerStatus::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flags_ = value;
}

// uint32 gimbal_device_id = 2;
inline void GimbalManagerStatus::clear_gimbal_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gimbal_device_id_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::gimbal_device_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.gimbal_device_id)
  return _internal_gimbal_device_id();
}
inline void GimbalManagerStatus::set_gimbal_device_id(::uint32_t value) {
  _internal_set_gimbal_device_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.gimbal_device_id)
}
inline ::uint32_t GimbalManagerStatus::_internal_gimbal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gimbal_device_id_;
}
inline void GimbalManagerStatus::_internal_set_gimbal_device_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gimbal_device_id_ = value;
}

// uint32 primary_control_sysid = 3;
inline void GimbalManagerStatus::clear_primary_control_sysid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_control_sysid_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::primary_control_sysid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.primary_control_sysid)
  return _internal_primary_control_sysid();
}
inline void GimbalManagerStatus::set_primary_control_sysid(::uint32_t value) {
  _internal_set_primary_control_sysid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.primary_control_sysid)
}
inline ::uint32_t GimbalManagerStatus::_internal_primary_control_sysid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_control_sysid_;
}
inline void GimbalManagerStatus::_internal_set_primary_control_sysid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_control_sysid_ = value;
}

// uint32 primary_control_compid = 4;
inline void GimbalManagerStatus::clear_primary_control_compid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_control_compid_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::primary_control_compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.primary_control_compid)
  return _internal_primary_control_compid();
}
inline void GimbalManagerStatus::set_primary_control_compid(::uint32_t value) {
  _internal_set_primary_control_compid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.primary_control_compid)
}
inline ::uint32_t GimbalManagerStatus::_internal_primary_control_compid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_control_compid_;
}
inline void GimbalManagerStatus::_internal_set_primary_control_compid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_control_compid_ = value;
}

// uint32 secondary_control_sysid = 5;
inline void GimbalManagerStatus::clear_secondary_control_sysid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secondary_control_sysid_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::secondary_control_sysid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.secondary_control_sysid)
  return _internal_secondary_control_sysid();
}
inline void GimbalManagerStatus::set_secondary_control_sysid(::uint32_t value) {
  _internal_set_secondary_control_sysid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.secondary_control_sysid)
}
inline ::uint32_t GimbalManagerStatus::_internal_secondary_control_sysid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secondary_control_sysid_;
}
inline void GimbalManagerStatus::_internal_set_secondary_control_sysid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secondary_control_sysid_ = value;
}

// uint32 secondary_control_compid = 6;
inline void GimbalManagerStatus::clear_secondary_control_compid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secondary_control_compid_ = 0u;
}
inline ::uint32_t GimbalManagerStatus::secondary_control_compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.secondary_control_compid)
  return _internal_secondary_control_compid();
}
inline void GimbalManagerStatus::set_secondary_control_compid(::uint32_t value) {
  _internal_set_secondary_control_compid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus.secondary_control_compid)
}
inline ::uint32_t GimbalManagerStatus::_internal_secondary_control_compid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secondary_control_compid_;
}
inline void GimbalManagerStatus::_internal_set_secondary_control_compid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secondary_control_compid_ = value;
}

// -------------------------------------------------------------------

// SetAttitude

// uint32 flags = 1;
inline void SetAttitude::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t SetAttitude::flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetAttitude.flags)
  return _internal_flags();
}
inline void SetAttitude::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.SetAttitude.flags)
}
inline ::uint32_t SetAttitude::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void SetAttitude::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flags_ = value;
}

// .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
inline bool SetAttitude::has_attitude_quaternion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attitude_quaternion_ != nullptr);
  return value;
}
inline void SetAttitude::clear_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.attitude_quaternion_ != nullptr) _impl_.attitude_quaternion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal_manager_server::Quaternion& SetAttitude::_internal_attitude_quaternion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::gimbal_manager_server::Quaternion* p = _impl_.attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal_manager_server::Quaternion&>(::mavsdk::rpc::gimbal_manager_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal_manager_server::Quaternion& SetAttitude::attitude_quaternion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.SetAttitude.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void SetAttitude::unsafe_arena_set_allocated_attitude_quaternion(::mavsdk::rpc::gimbal_manager_server::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attitude_quaternion_);
  }
  _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal_manager_server.SetAttitude.attitude_quaternion)
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* SetAttitude::release_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* released = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* SetAttitude::unsafe_arena_release_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal_manager_server.SetAttitude.attitude_quaternion)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* temp = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* SetAttitude::_internal_mutable_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Quaternion>(GetArena());
    _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(p);
  }
  return _impl_.attitude_quaternion_;
}
inline ::mavsdk::rpc::gimbal_manager_server::Quaternion* SetAttitude::mutable_attitude_quaternion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::gimbal_manager_server::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal_manager_server.SetAttitude.attitude_quaternion)
  return _msg;
}
inline void SetAttitude::set_allocated_attitude_quaternion(::mavsdk::rpc::gimbal_manager_server::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(_impl_.attitude_quaternion_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::gimbal_manager_server::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal_manager_server.SetAttitude.attitude_quaternion)
}

// -------------------------------------------------------------------

// RoiLocation

// uint32 gimbal_id = 1;
inline void RoiLocation::clear_gimbal_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gimbal_id_ = 0u;
}
inline ::uint32_t RoiLocation::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.RoiLocation.gimbal_id)
  return _internal_gimbal_id();
}
inline void RoiLocation::set_gimbal_id(::uint32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.RoiLocation.gimbal_id)
}
inline ::uint32_t RoiLocation::_internal_gimbal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gimbal_id_;
}
inline void RoiLocation::_internal_set_gimbal_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gimbal_id_ = value;
}

// double latitude_deg = 2;
inline void RoiLocation::clear_latitude_deg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latitude_deg_ = 0;
}
inline double RoiLocation::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.RoiLocation.latitude_deg)
  return _internal_latitude_deg();
}
inline void RoiLocation::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.RoiLocation.latitude_deg)
}
inline double RoiLocation::_internal_latitude_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latitude_deg_;
}
inline void RoiLocation::_internal_set_latitude_deg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 3;
inline void RoiLocation::clear_longitude_deg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.longitude_deg_ = 0;
}
inline double RoiLocation::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.RoiLocation.longitude_deg)
  return _internal_longitude_deg();
}
inline void RoiLocation::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.RoiLocation.longitude_deg)
}
inline double RoiLocation::_internal_longitude_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.longitude_deg_;
}
inline void RoiLocation::_internal_set_longitude_deg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.longitude_deg_ = value;
}

// float absolute_altitude_m = 4;
inline void RoiLocation::clear_absolute_altitude_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.absolute_altitude_m_ = 0;
}
inline float RoiLocation::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal_manager_server.RoiLocation.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void RoiLocation::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal_manager_server.RoiLocation.absolute_altitude_m)
}
inline float RoiLocation::_internal_absolute_altitude_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.absolute_altitude_m_;
}
inline void RoiLocation::_internal_set_absolute_altitude_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.absolute_altitude_m_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal_manager_server
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result>() {
  return ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_2epb_2eh
