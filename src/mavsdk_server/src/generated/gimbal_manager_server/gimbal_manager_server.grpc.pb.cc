// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gimbal_manager_server/gimbal_manager_server.proto

#include "gimbal_manager_server/gimbal_manager_server.pb.h"
#include "gimbal_manager_server/gimbal_manager_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {

static const char* GimbalManagerServerService_method_names[] = {
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SetInformation",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SubscribeDeviceDiscovered",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SubscribeGimbalManagerConfigured",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SubscribeDeviceAttitudeStatus",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/GetGimbalManagerStatus",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SubscribeSetAttitude",
  "/mavsdk.rpc.gimbal_manager_server.GimbalManagerServerService/SubscribeSetRoiLocation",
};

std::unique_ptr< GimbalManagerServerService::Stub> GimbalManagerServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GimbalManagerServerService::Stub> stub(new GimbalManagerServerService::Stub(channel, options));
  return stub;
}

GimbalManagerServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetInformation_(GimbalManagerServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeDeviceDiscovered_(GimbalManagerServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeGimbalManagerConfigured_(GimbalManagerServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeDeviceAttitudeStatus_(GimbalManagerServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGimbalManagerStatus_(GimbalManagerServerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeSetAttitude_(GimbalManagerServerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeSetRoiLocation_(GimbalManagerServerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GimbalManagerServerService::Stub::SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInformation_, context, request, response);
}

void GimbalManagerServerService::Stub::async::SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInformation_, context, request, response, std::move(f));
}

void GimbalManagerServerService::Stub::async::SetInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* GimbalManagerServerService::Stub::PrepareAsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse>* GimbalManagerServerService::Stub::AsyncSetInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* GimbalManagerServerService::Stub::SubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>::Create(channel_.get(), rpcmethod_SubscribeDeviceDiscovered_, context, request);
}

void GimbalManagerServerService::Stub::async::SubscribeDeviceDiscovered(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeDeviceDiscovered_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* GimbalManagerServerService::Stub::AsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDeviceDiscovered_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* GimbalManagerServerService::Stub::PrepareAsyncSubscribeDeviceDiscoveredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDeviceDiscovered_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* GimbalManagerServerService::Stub::SubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>::Create(channel_.get(), rpcmethod_SubscribeGimbalManagerConfigured_, context, request);
}

void GimbalManagerServerService::Stub::async::SubscribeGimbalManagerConfigured(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeGimbalManagerConfigured_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* GimbalManagerServerService::Stub::AsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeGimbalManagerConfigured_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* GimbalManagerServerService::Stub::PrepareAsyncSubscribeGimbalManagerConfiguredRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeGimbalManagerConfigured_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* GimbalManagerServerService::Stub::SubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>::Create(channel_.get(), rpcmethod_SubscribeDeviceAttitudeStatus_, context, request);
}

void GimbalManagerServerService::Stub::async::SubscribeDeviceAttitudeStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeDeviceAttitudeStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* GimbalManagerServerService::Stub::AsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDeviceAttitudeStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* GimbalManagerServerService::Stub::PrepareAsyncSubscribeDeviceAttitudeStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDeviceAttitudeStatus_, context, request, false, nullptr);
}

::grpc::Status GimbalManagerServerService::Stub::GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGimbalManagerStatus_, context, request, response);
}

void GimbalManagerServerService::Stub::async::GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGimbalManagerStatus_, context, request, response, std::move(f));
}

void GimbalManagerServerService::Stub::async::GetGimbalManagerStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGimbalManagerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* GimbalManagerServerService::Stub::PrepareAsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGimbalManagerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse>* GimbalManagerServerService::Stub::AsyncGetGimbalManagerStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGimbalManagerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* GimbalManagerServerService::Stub::SubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>::Create(channel_.get(), rpcmethod_SubscribeSetAttitude_, context, request);
}

void GimbalManagerServerService::Stub::async::SubscribeSetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeSetAttitude_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* GimbalManagerServerService::Stub::AsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSetAttitude_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* GimbalManagerServerService::Stub::PrepareAsyncSubscribeSetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSetAttitude_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* GimbalManagerServerService::Stub::SubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>::Create(channel_.get(), rpcmethod_SubscribeSetRoiLocation_, context, request);
}

void GimbalManagerServerService::Stub::async::SubscribeSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeSetRoiLocation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* GimbalManagerServerService::Stub::AsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSetRoiLocation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* GimbalManagerServerService::Stub::PrepareAsyncSubscribeSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeSetRoiLocation_, context, request, false, nullptr);
}

GimbalManagerServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* req,
             ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* resp) {
               return service->SetInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* writer) {
               return service->SubscribeDeviceDiscovered(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest, ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* writer) {
               return service->SubscribeGimbalManagerConfigured(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest, ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* writer) {
               return service->SubscribeDeviceAttitudeStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* req,
             ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* resp) {
               return service->GetGimbalManagerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest, ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* writer) {
               return service->SubscribeSetAttitude(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GimbalManagerServerService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GimbalManagerServerService::Service, ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest, ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>(
          [](GimbalManagerServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* writer) {
               return service->SubscribeSetRoiLocation(ctx, req, writer);
             }, this)));
}

GimbalManagerServerService::Service::~Service() {
}

::grpc::Status GimbalManagerServerService::Service::SetInformation(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SetInformationRequest* request, ::mavsdk::rpc::gimbal_manager_server::SetInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::SubscribeDeviceDiscovered(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::SubscribeGimbalManagerConfigured(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::SubscribeDeviceAttitudeStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::GetGimbalManagerStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest* request, ::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::SubscribeSetAttitude(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GimbalManagerServerService::Service::SubscribeSetRoiLocation(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace gimbal_manager_server

