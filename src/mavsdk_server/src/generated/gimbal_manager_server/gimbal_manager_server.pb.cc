// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal_manager_server/gimbal_manager_server.proto

#include "gimbal_manager_server/gimbal_manager_server.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {
      template <typename>
PROTOBUF_CONSTEXPR SubscribeSetRoiLocationRequest::SubscribeSetRoiLocationRequest(::_pbi::ConstantInitialized) {}
struct SubscribeSetRoiLocationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeSetRoiLocationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeSetRoiLocationRequestDefaultTypeInternal() {}
  union {
    SubscribeSetRoiLocationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeSetRoiLocationRequestDefaultTypeInternal _SubscribeSetRoiLocationRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeSetAttitudeRequest::SubscribeSetAttitudeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeSetAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeSetAttitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeSetAttitudeRequestDefaultTypeInternal() {}
  union {
    SubscribeSetAttitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeSetAttitudeRequestDefaultTypeInternal _SubscribeSetAttitudeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeGimbalManagerConfiguredRequest::SubscribeGimbalManagerConfiguredRequest(::_pbi::ConstantInitialized) {}
struct SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal() {}
  union {
    SubscribeGimbalManagerConfiguredRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeGimbalManagerConfiguredRequestDefaultTypeInternal _SubscribeGimbalManagerConfiguredRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeDeviceDiscoveredRequest::SubscribeDeviceDiscoveredRequest(::_pbi::ConstantInitialized) {}
struct SubscribeDeviceDiscoveredRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeDeviceDiscoveredRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeDeviceDiscoveredRequestDefaultTypeInternal() {}
  union {
    SubscribeDeviceDiscoveredRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeDeviceDiscoveredRequestDefaultTypeInternal _SubscribeDeviceDiscoveredRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeDeviceAttitudeStatusRequest::SubscribeDeviceAttitudeStatusRequest(::_pbi::ConstantInitialized) {}
struct SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeDeviceAttitudeStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeDeviceAttitudeStatusRequestDefaultTypeInternal _SubscribeDeviceAttitudeStatusRequest_default_instance_;

inline constexpr RoiLocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        gimbal_id_{0u},
        absolute_altitude_m_{0},
        longitude_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RoiLocation::RoiLocation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RoiLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoiLocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoiLocationDefaultTypeInternal() {}
  union {
    RoiLocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoiLocationDefaultTypeInternal _RoiLocation_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : w_{0},
        x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr Information::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cap_flags_{0u},
        gimbal_device_id_{0u},
        roll_min_{0},
        roll_max_{0},
        pitch_min_{0},
        pitch_max_{0},
        yaw_min_{0},
        yaw_max_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Information::Information(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InformationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InformationDefaultTypeInternal() {}
  union {
    Information _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InformationDefaultTypeInternal _Information_default_instance_;

inline constexpr GimbalManagerStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : flags_{0u},
        gimbal_device_id_{0u},
        primary_control_sysid_{0u},
        primary_control_compid_{0u},
        secondary_control_sysid_{0u},
        secondary_control_compid_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GimbalManagerStatus::GimbalManagerStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GimbalManagerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalManagerStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalManagerStatusDefaultTypeInternal() {}
  union {
    GimbalManagerStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalManagerStatusDefaultTypeInternal _GimbalManagerStatus_default_instance_;

inline constexpr GimbalManagerServerResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GimbalManagerServerResult::GimbalManagerServerResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GimbalManagerServerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalManagerServerResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalManagerServerResultDefaultTypeInternal() {}
  union {
    GimbalManagerServerResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalManagerServerResultDefaultTypeInternal _GimbalManagerServerResult_default_instance_;

inline constexpr GimbalManagerConfiguration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sysid_primary_control_{0u},
        compid_primary_control_{0u},
        sysid_secondary_control_{0u},
        compid_secondary_control_{0u},
        gimbal_device_id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GimbalManagerConfiguration::GimbalManagerConfiguration(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GimbalManagerConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalManagerConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalManagerConfigurationDefaultTypeInternal() {}
  union {
    GimbalManagerConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalManagerConfigurationDefaultTypeInternal _GimbalManagerConfiguration_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetGimbalManagerStatusRequest::GetGimbalManagerStatusRequest(::_pbi::ConstantInitialized) {}
struct GetGimbalManagerStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGimbalManagerStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGimbalManagerStatusRequestDefaultTypeInternal() {}
  union {
    GetGimbalManagerStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGimbalManagerStatusRequestDefaultTypeInternal _GetGimbalManagerStatusRequest_default_instance_;

inline constexpr SetRoiLocationResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        roi_location_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRoiLocationResponse::SetRoiLocationResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRoiLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoiLocationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoiLocationResponseDefaultTypeInternal() {}
  union {
    SetRoiLocationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;

inline constexpr SetInformationResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_manager_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetInformationResponse::SetInformationResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetInformationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetInformationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetInformationResponseDefaultTypeInternal() {}
  union {
    SetInformationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetInformationResponseDefaultTypeInternal _SetInformationResponse_default_instance_;

inline constexpr SetInformationRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        information_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetInformationRequest::SetInformationRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetInformationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetInformationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetInformationRequestDefaultTypeInternal() {}
  union {
    SetInformationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetInformationRequestDefaultTypeInternal _SetInformationRequest_default_instance_;

inline constexpr SetAttitude::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_quaternion_{nullptr},
        flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SetAttitude::SetAttitude(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetAttitudeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAttitudeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAttitudeDefaultTypeInternal() {}
  union {
    SetAttitude _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAttitudeDefaultTypeInternal _SetAttitude_default_instance_;

inline constexpr GimbalManagerConfiguredResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_manager_config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GimbalManagerConfiguredResponse::GimbalManagerConfiguredResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GimbalManagerConfiguredResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalManagerConfiguredResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalManagerConfiguredResponseDefaultTypeInternal() {}
  union {
    GimbalManagerConfiguredResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalManagerConfiguredResponseDefaultTypeInternal _GimbalManagerConfiguredResponse_default_instance_;

inline constexpr GetGimbalManagerStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_manager_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetGimbalManagerStatusResponse::GetGimbalManagerStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetGimbalManagerStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGimbalManagerStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGimbalManagerStatusResponseDefaultTypeInternal() {}
  union {
    GetGimbalManagerStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGimbalManagerStatusResponseDefaultTypeInternal _GetGimbalManagerStatusResponse_default_instance_;

inline constexpr DeviceDiscoveredResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_discovered_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceDiscoveredResponse::DeviceDiscoveredResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeviceDiscoveredResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDiscoveredResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDiscoveredResponseDefaultTypeInternal() {}
  union {
    DeviceDiscoveredResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDiscoveredResponseDefaultTypeInternal _DeviceDiscoveredResponse_default_instance_;

inline constexpr DeviceAttitudeStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        q_{nullptr},
        time_boot_ms_{0u},
        flags_{0u},
        angular_velocity_x_{0},
        angular_velocity_y_{0},
        angular_velocity_z_{0},
        failure_flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceAttitudeStatus::DeviceAttitudeStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeviceAttitudeStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAttitudeStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAttitudeStatusDefaultTypeInternal() {}
  union {
    DeviceAttitudeStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAttitudeStatusDefaultTypeInternal _DeviceAttitudeStatus_default_instance_;

inline constexpr SetAttitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        set_attitude_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetAttitudeResponse::SetAttitudeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetAttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAttitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAttitudeResponseDefaultTypeInternal() {}
  union {
    SetAttitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAttitudeResponseDefaultTypeInternal _SetAttitudeResponse_default_instance_;

inline constexpr DeviceAttitudeStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        device_attitude_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceAttitudeStatusResponse::DeviceAttitudeStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeviceAttitudeStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAttitudeStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAttitudeStatusResponseDefaultTypeInternal() {}
  union {
    DeviceAttitudeStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAttitudeStatusResponseDefaultTypeInternal _DeviceAttitudeStatusResponse_default_instance_;
}  // namespace gimbal_manager_server
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto = nullptr;
const ::uint32_t TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationRequest, _impl_.information_),
    0,
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetInformationResponse, _impl_.gimbal_manager_server_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse, _impl_.device_discovered_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse, _impl_.gimbal_manager_config_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse, _impl_.device_attitude_status_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse, _impl_.gimbal_manager_status_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse, _impl_.set_attitude_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse, _impl_.roi_location_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Quaternion, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Quaternion, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Quaternion, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Quaternion, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.cap_flags_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.gimbal_device_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.roll_min_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.roll_max_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.pitch_min_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.pitch_max_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.yaw_min_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::Information, _impl_.yaw_max_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _impl_.sysid_primary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _impl_.compid_primary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _impl_.sysid_secondary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _impl_.compid_secondary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration, _impl_.gimbal_device_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.time_boot_ms_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.q_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.angular_velocity_x_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.angular_velocity_y_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.angular_velocity_z_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus, _impl_.failure_flags_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult, _impl_.result_str_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.gimbal_device_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.primary_control_sysid_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.primary_control_compid_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.secondary_control_sysid_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus, _impl_.secondary_control_compid_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitude, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitude, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitude, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::SetAttitude, _impl_.attitude_quaternion_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::RoiLocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::RoiLocation, _impl_.gimbal_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::RoiLocation, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::RoiLocation, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal_manager_server::RoiLocation, _impl_.absolute_altitude_m_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SetInformationRequest)},
        {10, 19, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SetInformationResponse)},
        {20, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceDiscoveredRequest)},
        {28, 37, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::DeviceDiscoveredResponse)},
        {38, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SubscribeGimbalManagerConfiguredRequest)},
        {46, 55, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguredResponse)},
        {56, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SubscribeDeviceAttitudeStatusRequest)},
        {64, 73, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatusResponse)},
        {74, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusRequest)},
        {82, 91, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GetGimbalManagerStatusResponse)},
        {92, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SubscribeSetAttitudeRequest)},
        {100, 109, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SetAttitudeResponse)},
        {110, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SubscribeSetRoiLocationRequest)},
        {118, 127, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SetRoiLocationResponse)},
        {128, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::Quaternion)},
        {140, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::Information)},
        {156, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration)},
        {169, 184, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus)},
        {191, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult)},
        {201, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus)},
        {215, 225, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::SetAttitude)},
        {227, -1, -1, sizeof(::mavsdk::rpc::gimbal_manager_server::RoiLocation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::gimbal_manager_server::_SetInformationRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SetInformationResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SubscribeDeviceDiscoveredRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_DeviceDiscoveredResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SubscribeGimbalManagerConfiguredRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GimbalManagerConfiguredResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SubscribeDeviceAttitudeStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_DeviceAttitudeStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GetGimbalManagerStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GetGimbalManagerStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SubscribeSetAttitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SetAttitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SubscribeSetRoiLocationRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SetRoiLocationResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_Quaternion_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_Information_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GimbalManagerConfiguration_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_DeviceAttitudeStatus_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GimbalManagerServerResult_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_GimbalManagerStatus_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_SetAttitude_default_instance_._instance,
    &::mavsdk::rpc::gimbal_manager_server::_RoiLocation_default_instance_._instance,
};
const char descriptor_table_protodef_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1gimbal_manager_server/gimbal_manager_s"
    "erver.proto\022 mavsdk.rpc.gimbal_manager_s"
    "erver\032\024mavsdk_options.proto\"[\n\025SetInform"
    "ationRequest\022B\n\013information\030\001 \001(\0132-.mavs"
    "dk.rpc.gimbal_manager_server.Information"
    "\"{\n\026SetInformationResponse\022a\n\034gimbal_man"
    "ager_server_result\030\001 \001(\0132;.mavsdk.rpc.gi"
    "mbal_manager_server.GimbalManagerServerR"
    "esult\"\"\n SubscribeDeviceDiscoveredReques"
    "t\"d\n\030DeviceDiscoveredResponse\022H\n\021device_"
    "discovered\030\001 \001(\0132-.mavsdk.rpc.gimbal_man"
    "ager_server.Information\")\n\'SubscribeGimb"
    "alManagerConfiguredRequest\"~\n\037GimbalMana"
    "gerConfiguredResponse\022[\n\025gimbal_manager_"
    "config\030\001 \001(\0132<.mavsdk.rpc.gimbal_manager"
    "_server.GimbalManagerConfiguration\"&\n$Su"
    "bscribeDeviceAttitudeStatusRequest\"v\n\034De"
    "viceAttitudeStatusResponse\022V\n\026device_att"
    "itude_status\030\001 \001(\01326.mavsdk.rpc.gimbal_m"
    "anager_server.DeviceAttitudeStatus\"\037\n\035Ge"
    "tGimbalManagerStatusRequest\"v\n\036GetGimbal"
    "ManagerStatusResponse\022T\n\025gimbal_manager_"
    "status\030\001 \001(\01325.mavsdk.rpc.gimbal_manager"
    "_server.GimbalManagerStatus\"\035\n\033Subscribe"
    "SetAttitudeRequest\"Z\n\023SetAttitudeRespons"
    "e\022C\n\014set_attitude\030\001 \001(\0132-.mavsdk.rpc.gim"
    "bal_manager_server.SetAttitude\" \n\036Subscr"
    "ibeSetRoiLocationRequest\"]\n\026SetRoiLocati"
    "onResponse\022C\n\014roi_location\030\001 \001(\0132-.mavsd"
    "k.rpc.gimbal_manager_server.RoiLocation\""
    "8\n\nQuaternion\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y"
    "\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\246\001\n\013Information\022\021\n\tcap"
    "_flags\030\001 \001(\r\022\030\n\020gimbal_device_id\030\002 \001(\r\022\020"
    "\n\010roll_min\030\003 \001(\002\022\020\n\010roll_max\030\004 \001(\002\022\021\n\tpi"
    "tch_min\030\005 \001(\002\022\021\n\tpitch_max\030\006 \001(\002\022\017\n\007yaw_"
    "min\030\007 \001(\002\022\017\n\007yaw_max\030\010 \001(\002\"\270\001\n\032GimbalMan"
    "agerConfiguration\022\035\n\025sysid_primary_contr"
    "ol\030\001 \001(\r\022\036\n\026compid_primary_control\030\002 \001(\r"
    "\022\037\n\027sysid_secondary_control\030\003 \001(\r\022 \n\030com"
    "pid_secondary_control\030\004 \001(\r\022\030\n\020gimbal_de"
    "vice_id\030\005 \001(\r\"\337\001\n\024DeviceAttitudeStatus\022\024"
    "\n\014time_boot_ms\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\0227\n\001q"
    "\030\003 \001(\0132,.mavsdk.rpc.gimbal_manager_serve"
    "r.Quaternion\022\032\n\022angular_velocity_x\030\004 \001(\002"
    "\022\032\n\022angular_velocity_y\030\005 \001(\002\022\032\n\022angular_"
    "velocity_z\030\006 \001(\002\022\025\n\rfailure_flags\030\007 \001(\r\""
    "\311\002\n\031GimbalManagerServerResult\022R\n\006result\030"
    "\001 \001(\0162B.mavsdk.rpc.gimbal_manager_server"
    ".GimbalManagerServerResult.Result\022\022\n\nres"
    "ult_str\030\002 \001(\t\"\303\001\n\006Result\022\022\n\016RESULT_UNKNO"
    "WN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\026\n\022RESULT_IN_PR"
    "OGRESS\020\002\022\017\n\013RESULT_BUSY\020\003\022\021\n\rRESULT_DENI"
    "ED\020\004\022\020\n\014RESULT_ERROR\020\005\022\022\n\016RESULT_TIMEOUT"
    "\020\006\022\031\n\025RESULT_WRONG_ARGUMENT\020\007\022\024\n\020RESULT_"
    "NO_SYSTEM\020\010\"\300\001\n\023GimbalManagerStatus\022\r\n\005f"
    "lags\030\001 \001(\r\022\030\n\020gimbal_device_id\030\002 \001(\r\022\035\n\025"
    "primary_control_sysid\030\003 \001(\r\022\036\n\026primary_c"
    "ontrol_compid\030\004 \001(\r\022\037\n\027secondary_control"
    "_sysid\030\005 \001(\r\022 \n\030secondary_control_compid"
    "\030\006 \001(\r\"g\n\013SetAttitude\022\r\n\005flags\030\001 \001(\r\022I\n\023"
    "attitude_quaternion\030\002 \001(\0132,.mavsdk.rpc.g"
    "imbal_manager_server.Quaternion\"j\n\013RoiLo"
    "cation\022\021\n\tgimbal_id\030\001 \001(\r\022\024\n\014latitude_de"
    "g\030\002 \001(\001\022\025\n\rlongitude_deg\030\003 \001(\001\022\033\n\023absolu"
    "te_altitude_m\030\004 \001(\0022\212\t\n\032GimbalManagerSer"
    "verService\022\211\001\n\016SetInformation\0227.mavsdk.r"
    "pc.gimbal_manager_server.SetInformationR"
    "equest\0328.mavsdk.rpc.gimbal_manager_serve"
    "r.SetInformationResponse\"\004\200\265\030\001\022\237\001\n\031Subsc"
    "ribeDeviceDiscovered\022B.mavsdk.rpc.gimbal"
    "_manager_server.SubscribeDeviceDiscovere"
    "dRequest\032:.mavsdk.rpc.gimbal_manager_ser"
    "ver.DeviceDiscoveredResponse\"\0000\001\022\264\001\n Sub"
    "scribeGimbalManagerConfigured\022I.mavsdk.r"
    "pc.gimbal_manager_server.SubscribeGimbal"
    "ManagerConfiguredRequest\032A.mavsdk.rpc.gi"
    "mbal_manager_server.GimbalManagerConfigu"
    "redResponse\"\0000\001\022\253\001\n\035SubscribeDeviceAttit"
    "udeStatus\022F.mavsdk.rpc.gimbal_manager_se"
    "rver.SubscribeDeviceAttitudeStatusReques"
    "t\032>.mavsdk.rpc.gimbal_manager_server.Dev"
    "iceAttitudeStatusResponse\"\0000\001\022\241\001\n\026GetGim"
    "balManagerStatus\022\?.mavsdk.rpc.gimbal_man"
    "ager_server.GetGimbalManagerStatusReques"
    "t\032@.mavsdk.rpc.gimbal_manager_server.Get"
    "GimbalManagerStatusResponse\"\004\200\265\030\001\022\224\001\n\024Su"
    "bscribeSetAttitude\022=.mavsdk.rpc.gimbal_m"
    "anager_server.SubscribeSetAttitudeReques"
    "t\0325.mavsdk.rpc.gimbal_manager_server.Set"
    "AttitudeResponse\"\004\200\265\030\0000\001\022\235\001\n\027SubscribeSe"
    "tRoiLocation\022@.mavsdk.rpc.gimbal_manager"
    "_server.SubscribeSetRoiLocationRequest\0328"
    ".mavsdk.rpc.gimbal_manager_server.SetRoi"
    "LocationResponse\"\004\200\265\030\0000\001B;\n\037io.mavsdk.gi"
    "mbal_manager_serverB\030GimbalManagerServer"
    "Protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto = {
    false,
    false,
    3813,
    descriptor_table_protodef_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto,
    "gimbal_manager_server/gimbal_manager_server.proto",
    &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
    descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_deps,
    1,
    22,
    schemas,
    file_default_instances,
    TableStruct_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto::offsets,
    file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto,
    file_level_enum_descriptors_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto,
    file_level_service_descriptors_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter() {
  return &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto(&descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace gimbal_manager_server {
const ::google::protobuf::EnumDescriptor* GimbalManagerServerResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto);
  return file_level_enum_descriptors_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GimbalManagerServerResult_Result_internal_data_[] = {
    589824u, 0u, };
bool GimbalManagerServerResult_Result_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_UNKNOWN;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_SUCCESS;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_IN_PROGRESS;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_BUSY;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_DENIED;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_ERROR;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_TIMEOUT;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_WRONG_ARGUMENT;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::RESULT_NO_SYSTEM;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::Result_MIN;
constexpr GimbalManagerServerResult_Result GimbalManagerServerResult::Result_MAX;
constexpr int GimbalManagerServerResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SetInformationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetInformationRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetInformationRequest, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::Information& information(const SetInformationRequest* msg);
  static void set_has_information(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::Information& SetInformationRequest::_Internal::information(const SetInformationRequest* msg) {
  return *msg->_impl_.information_;
}
SetInformationRequest::SetInformationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetInformationRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetInformationRequest::SetInformationRequest(
    ::google::protobuf::Arena* arena,
    const SetInformationRequest& from)
    : ::google::protobuf::Message(arena) {
  SetInformationRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.information_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Information>(arena, *from._impl_.information_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetInformationRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetInformationRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.information_ = {};
}
SetInformationRequest::~SetInformationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetInformationRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.information_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.information_ != nullptr);
    _impl_.information_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetInformationRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetInformationRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetInformationRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetInformationRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.Information information = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetInformationRequest, _impl_.information_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.Information information = 1;
    {PROTOBUF_FIELD_OFFSET(SetInformationRequest, _impl_.information_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::Information>()},
  }}, {{
  }},
};

::uint8_t* SetInformationRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.Information information = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::information(this),
        _Internal::information(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  return target;
}

::size_t SetInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.Information information = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.information_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetInformationRequest::_class_data_ = {
    SetInformationRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetInformationRequest::GetClassData() const {
  return &_class_data_;
}

void SetInformationRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetInformationRequest*>(&to_msg);
  auto& from = static_cast<const SetInformationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_information()->::mavsdk::rpc::gimbal_manager_server::Information::MergeFrom(
        from._internal_information());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetInformationRequest::CopyFrom(const SetInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.SetInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetInformationRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetInformationRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetInformationRequest::InternalSwap(SetInformationRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.information_, other->_impl_.information_);
}

::google::protobuf::Metadata SetInformationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[0]);
}
// ===================================================================

class SetInformationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetInformationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetInformationResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& gimbal_manager_server_result(const SetInformationResponse* msg);
  static void set_has_gimbal_manager_server_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult& SetInformationResponse::_Internal::gimbal_manager_server_result(const SetInformationResponse* msg) {
  return *msg->_impl_.gimbal_manager_server_result_;
}
SetInformationResponse::SetInformationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetInformationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetInformationResponse::SetInformationResponse(
    ::google::protobuf::Arena* arena,
    const SetInformationResponse& from)
    : ::google::protobuf::Message(arena) {
  SetInformationResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_manager_server_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult>(arena, *from._impl_.gimbal_manager_server_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetInformationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetInformationResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_manager_server_result_ = {};
}
SetInformationResponse::~SetInformationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetInformationResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_manager_server_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_manager_server_result_ != nullptr);
    _impl_.gimbal_manager_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetInformationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetInformationResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetInformationResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetInformationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetInformationResponse, _impl_.gimbal_manager_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetInformationResponse, _impl_.gimbal_manager_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult>()},
  }}, {{
  }},
};

::uint8_t* SetInformationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_manager_server_result(this),
        _Internal::gimbal_manager_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  return target;
}

::size_t SetInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult gimbal_manager_server_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_manager_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetInformationResponse::_class_data_ = {
    SetInformationResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetInformationResponse::GetClassData() const {
  return &_class_data_;
}

void SetInformationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetInformationResponse*>(&to_msg);
  auto& from = static_cast<const SetInformationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_manager_server_result()->::mavsdk::rpc::gimbal_manager_server::GimbalManagerServerResult::MergeFrom(
        from._internal_gimbal_manager_server_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetInformationResponse::CopyFrom(const SetInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.SetInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetInformationResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetInformationResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetInformationResponse::InternalSwap(SetInformationResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_manager_server_result_, other->_impl_.gimbal_manager_server_result_);
}

::google::protobuf::Metadata SetInformationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[1]);
}
// ===================================================================

class SubscribeDeviceDiscoveredRequest::_Internal {
 public:
};

SubscribeDeviceDiscoveredRequest::SubscribeDeviceDiscoveredRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceDiscoveredRequest)
}
SubscribeDeviceDiscoveredRequest::SubscribeDeviceDiscoveredRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeDeviceDiscoveredRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeDeviceDiscoveredRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceDiscoveredRequest)
}









::google::protobuf::Metadata SubscribeDeviceDiscoveredRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[2]);
}
// ===================================================================

class DeviceDiscoveredResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceDiscoveredResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceDiscoveredResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::Information& device_discovered(const DeviceDiscoveredResponse* msg);
  static void set_has_device_discovered(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::Information& DeviceDiscoveredResponse::_Internal::device_discovered(const DeviceDiscoveredResponse* msg) {
  return *msg->_impl_.device_discovered_;
}
DeviceDiscoveredResponse::DeviceDiscoveredResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeviceDiscoveredResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeviceDiscoveredResponse::DeviceDiscoveredResponse(
    ::google::protobuf::Arena* arena,
    const DeviceDiscoveredResponse& from)
    : ::google::protobuf::Message(arena) {
  DeviceDiscoveredResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_discovered_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Information>(arena, *from._impl_.device_discovered_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeviceDiscoveredResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeviceDiscoveredResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.device_discovered_ = {};
}
DeviceDiscoveredResponse::~DeviceDiscoveredResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceDiscoveredResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.device_discovered_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeviceDiscoveredResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.device_discovered_ != nullptr);
    _impl_.device_discovered_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceDiscoveredResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DeviceDiscoveredResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceDiscoveredResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceDiscoveredResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceDiscoveredResponse, _impl_.device_discovered_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceDiscoveredResponse, _impl_.device_discovered_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::Information>()},
  }}, {{
  }},
};

::uint8_t* DeviceDiscoveredResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::device_discovered(this),
        _Internal::device_discovered(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  return target;
}

::size_t DeviceDiscoveredResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.Information device_discovered = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_discovered_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceDiscoveredResponse::_class_data_ = {
    DeviceDiscoveredResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeviceDiscoveredResponse::GetClassData() const {
  return &_class_data_;
}

void DeviceDiscoveredResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceDiscoveredResponse*>(&to_msg);
  auto& from = static_cast<const DeviceDiscoveredResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_device_discovered()->::mavsdk::rpc::gimbal_manager_server::Information::MergeFrom(
        from._internal_device_discovered());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceDiscoveredResponse::CopyFrom(const DeviceDiscoveredResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.DeviceDiscoveredResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceDiscoveredResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeviceDiscoveredResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeviceDiscoveredResponse::InternalSwap(DeviceDiscoveredResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.device_discovered_, other->_impl_.device_discovered_);
}

::google::protobuf::Metadata DeviceDiscoveredResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[3]);
}
// ===================================================================

class SubscribeGimbalManagerConfiguredRequest::_Internal {
 public:
};

SubscribeGimbalManagerConfiguredRequest::SubscribeGimbalManagerConfiguredRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeGimbalManagerConfiguredRequest)
}
SubscribeGimbalManagerConfiguredRequest::SubscribeGimbalManagerConfiguredRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeGimbalManagerConfiguredRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeGimbalManagerConfiguredRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeGimbalManagerConfiguredRequest)
}









::google::protobuf::Metadata SubscribeGimbalManagerConfiguredRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[4]);
}
// ===================================================================

class GimbalManagerConfiguredResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GimbalManagerConfiguredResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguredResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& gimbal_manager_config(const GimbalManagerConfiguredResponse* msg);
  static void set_has_gimbal_manager_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration& GimbalManagerConfiguredResponse::_Internal::gimbal_manager_config(const GimbalManagerConfiguredResponse* msg) {
  return *msg->_impl_.gimbal_manager_config_;
}
GimbalManagerConfiguredResponse::GimbalManagerConfiguredResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerConfiguredResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GimbalManagerConfiguredResponse::GimbalManagerConfiguredResponse(
    ::google::protobuf::Arena* arena,
    const GimbalManagerConfiguredResponse& from)
    : ::google::protobuf::Message(arena) {
  GimbalManagerConfiguredResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_manager_config_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration>(arena, *from._impl_.gimbal_manager_config_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerConfiguredResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GimbalManagerConfiguredResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_manager_config_ = {};
}
GimbalManagerConfiguredResponse::~GimbalManagerConfiguredResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GimbalManagerConfiguredResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_manager_config_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GimbalManagerConfiguredResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_manager_config_ != nullptr);
    _impl_.gimbal_manager_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GimbalManagerConfiguredResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GimbalManagerConfiguredResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguredResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GimbalManagerConfiguredResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguredResponse, _impl_.gimbal_manager_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguredResponse, _impl_.gimbal_manager_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration>()},
  }}, {{
  }},
};

::uint8_t* GimbalManagerConfiguredResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_manager_config(this),
        _Internal::gimbal_manager_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  return target;
}

::size_t GimbalManagerConfiguredResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration gimbal_manager_config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_manager_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GimbalManagerConfiguredResponse::_class_data_ = {
    GimbalManagerConfiguredResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GimbalManagerConfiguredResponse::GetClassData() const {
  return &_class_data_;
}

void GimbalManagerConfiguredResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GimbalManagerConfiguredResponse*>(&to_msg);
  auto& from = static_cast<const GimbalManagerConfiguredResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_manager_config()->::mavsdk::rpc::gimbal_manager_server::GimbalManagerConfiguration::MergeFrom(
        from._internal_gimbal_manager_config());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalManagerConfiguredResponse::CopyFrom(const GimbalManagerConfiguredResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguredResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GimbalManagerConfiguredResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GimbalManagerConfiguredResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GimbalManagerConfiguredResponse::InternalSwap(GimbalManagerConfiguredResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_manager_config_, other->_impl_.gimbal_manager_config_);
}

::google::protobuf::Metadata GimbalManagerConfiguredResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[5]);
}
// ===================================================================

class SubscribeDeviceAttitudeStatusRequest::_Internal {
 public:
};

SubscribeDeviceAttitudeStatusRequest::SubscribeDeviceAttitudeStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceAttitudeStatusRequest)
}
SubscribeDeviceAttitudeStatusRequest::SubscribeDeviceAttitudeStatusRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeDeviceAttitudeStatusRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeDeviceAttitudeStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeDeviceAttitudeStatusRequest)
}









::google::protobuf::Metadata SubscribeDeviceAttitudeStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[6]);
}
// ===================================================================

class DeviceAttitudeStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttitudeStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& device_attitude_status(const DeviceAttitudeStatusResponse* msg);
  static void set_has_device_attitude_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus& DeviceAttitudeStatusResponse::_Internal::device_attitude_status(const DeviceAttitudeStatusResponse* msg) {
  return *msg->_impl_.device_attitude_status_;
}
DeviceAttitudeStatusResponse::DeviceAttitudeStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeviceAttitudeStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeviceAttitudeStatusResponse::DeviceAttitudeStatusResponse(
    ::google::protobuf::Arena* arena,
    const DeviceAttitudeStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  DeviceAttitudeStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.device_attitude_status_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus>(arena, *from._impl_.device_attitude_status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeviceAttitudeStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeviceAttitudeStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.device_attitude_status_ = {};
}
DeviceAttitudeStatusResponse::~DeviceAttitudeStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceAttitudeStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.device_attitude_status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeviceAttitudeStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.device_attitude_status_ != nullptr);
    _impl_.device_attitude_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceAttitudeStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DeviceAttitudeStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceAttitudeStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatusResponse, _impl_.device_attitude_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatusResponse, _impl_.device_attitude_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus>()},
  }}, {{
  }},
};

::uint8_t* DeviceAttitudeStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::device_attitude_status(this),
        _Internal::device_attitude_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  return target;
}

::size_t DeviceAttitudeStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus device_attitude_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.device_attitude_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceAttitudeStatusResponse::_class_data_ = {
    DeviceAttitudeStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeviceAttitudeStatusResponse::GetClassData() const {
  return &_class_data_;
}

void DeviceAttitudeStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceAttitudeStatusResponse*>(&to_msg);
  auto& from = static_cast<const DeviceAttitudeStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_device_attitude_status()->::mavsdk::rpc::gimbal_manager_server::DeviceAttitudeStatus::MergeFrom(
        from._internal_device_attitude_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAttitudeStatusResponse::CopyFrom(const DeviceAttitudeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceAttitudeStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeviceAttitudeStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeviceAttitudeStatusResponse::InternalSwap(DeviceAttitudeStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.device_attitude_status_, other->_impl_.device_attitude_status_);
}

::google::protobuf::Metadata DeviceAttitudeStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[7]);
}
// ===================================================================

class GetGimbalManagerStatusRequest::_Internal {
 public:
};

GetGimbalManagerStatusRequest::GetGimbalManagerStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusRequest)
}
GetGimbalManagerStatusRequest::GetGimbalManagerStatusRequest(
    ::google::protobuf::Arena* arena,
    const GetGimbalManagerStatusRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetGimbalManagerStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusRequest)
}









::google::protobuf::Metadata GetGimbalManagerStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[8]);
}
// ===================================================================

class GetGimbalManagerStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGimbalManagerStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetGimbalManagerStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& gimbal_manager_status(const GetGimbalManagerStatusResponse* msg);
  static void set_has_gimbal_manager_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus& GetGimbalManagerStatusResponse::_Internal::gimbal_manager_status(const GetGimbalManagerStatusResponse* msg) {
  return *msg->_impl_.gimbal_manager_status_;
}
GetGimbalManagerStatusResponse::GetGimbalManagerStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetGimbalManagerStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetGimbalManagerStatusResponse::GetGimbalManagerStatusResponse(
    ::google::protobuf::Arena* arena,
    const GetGimbalManagerStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  GetGimbalManagerStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_manager_status_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus>(arena, *from._impl_.gimbal_manager_status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetGimbalManagerStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetGimbalManagerStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_manager_status_ = {};
}
GetGimbalManagerStatusResponse::~GetGimbalManagerStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetGimbalManagerStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_manager_status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetGimbalManagerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_manager_status_ != nullptr);
    _impl_.gimbal_manager_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetGimbalManagerStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetGimbalManagerStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetGimbalManagerStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetGimbalManagerStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetGimbalManagerStatusResponse, _impl_.gimbal_manager_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
    {PROTOBUF_FIELD_OFFSET(GetGimbalManagerStatusResponse, _impl_.gimbal_manager_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus>()},
  }}, {{
  }},
};

::uint8_t* GetGimbalManagerStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_manager_status(this),
        _Internal::gimbal_manager_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  return target;
}

::size_t GetGimbalManagerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus gimbal_manager_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_manager_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetGimbalManagerStatusResponse::_class_data_ = {
    GetGimbalManagerStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetGimbalManagerStatusResponse::GetClassData() const {
  return &_class_data_;
}

void GetGimbalManagerStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetGimbalManagerStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetGimbalManagerStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_manager_status()->::mavsdk::rpc::gimbal_manager_server::GimbalManagerStatus::MergeFrom(
        from._internal_gimbal_manager_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetGimbalManagerStatusResponse::CopyFrom(const GetGimbalManagerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.GetGimbalManagerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetGimbalManagerStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetGimbalManagerStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetGimbalManagerStatusResponse::InternalSwap(GetGimbalManagerStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_manager_status_, other->_impl_.gimbal_manager_status_);
}

::google::protobuf::Metadata GetGimbalManagerStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[9]);
}
// ===================================================================

class SubscribeSetAttitudeRequest::_Internal {
 public:
};

SubscribeSetAttitudeRequest::SubscribeSetAttitudeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeSetAttitudeRequest)
}
SubscribeSetAttitudeRequest::SubscribeSetAttitudeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeSetAttitudeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeSetAttitudeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeSetAttitudeRequest)
}









::google::protobuf::Metadata SubscribeSetAttitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[10]);
}
// ===================================================================

class SetAttitudeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAttitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetAttitudeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& set_attitude(const SetAttitudeResponse* msg);
  static void set_has_set_attitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::SetAttitude& SetAttitudeResponse::_Internal::set_attitude(const SetAttitudeResponse* msg) {
  return *msg->_impl_.set_attitude_;
}
SetAttitudeResponse::SetAttitudeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetAttitudeResponse::SetAttitudeResponse(
    ::google::protobuf::Arena* arena,
    const SetAttitudeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetAttitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.set_attitude_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::SetAttitude>(arena, *from._impl_.set_attitude_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetAttitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.set_attitude_ = {};
}
SetAttitudeResponse::~SetAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAttitudeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.set_attitude_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.set_attitude_ != nullptr);
    _impl_.set_attitude_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAttitudeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetAttitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetAttitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetAttitudeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetAttitudeResponse, _impl_.set_attitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
    {PROTOBUF_FIELD_OFFSET(SetAttitudeResponse, _impl_.set_attitude_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::SetAttitude>()},
  }}, {{
  }},
};

::uint8_t* SetAttitudeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::set_attitude(this),
        _Internal::set_attitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  return target;
}

::size_t SetAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.SetAttitude set_attitude = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.set_attitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAttitudeResponse::_class_data_ = {
    SetAttitudeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetAttitudeResponse::GetClassData() const {
  return &_class_data_;
}

void SetAttitudeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAttitudeResponse*>(&to_msg);
  auto& from = static_cast<const SetAttitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_set_attitude()->::mavsdk::rpc::gimbal_manager_server::SetAttitude::MergeFrom(
        from._internal_set_attitude());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitudeResponse::CopyFrom(const SetAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.SetAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAttitudeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetAttitudeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetAttitudeResponse::InternalSwap(SetAttitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.set_attitude_, other->_impl_.set_attitude_);
}

::google::protobuf::Metadata SetAttitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[11]);
}
// ===================================================================

class SubscribeSetRoiLocationRequest::_Internal {
 public:
};

SubscribeSetRoiLocationRequest::SubscribeSetRoiLocationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeSetRoiLocationRequest)
}
SubscribeSetRoiLocationRequest::SubscribeSetRoiLocationRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeSetRoiLocationRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeSetRoiLocationRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SubscribeSetRoiLocationRequest)
}









::google::protobuf::Metadata SubscribeSetRoiLocationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[12]);
}
// ===================================================================

class SetRoiLocationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRoiLocationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& roi_location(const SetRoiLocationResponse* msg);
  static void set_has_roi_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::RoiLocation& SetRoiLocationResponse::_Internal::roi_location(const SetRoiLocationResponse* msg) {
  return *msg->_impl_.roi_location_;
}
SetRoiLocationResponse::SetRoiLocationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRoiLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRoiLocationResponse::SetRoiLocationResponse(
    ::google::protobuf::Arena* arena,
    const SetRoiLocationResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRoiLocationResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.roi_location_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::RoiLocation>(arena, *from._impl_.roi_location_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRoiLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRoiLocationResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.roi_location_ = {};
}
SetRoiLocationResponse::~SetRoiLocationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRoiLocationResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.roi_location_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRoiLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.roi_location_ != nullptr);
    _impl_.roi_location_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRoiLocationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRoiLocationResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRoiLocationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_.roi_location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
    {PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_.roi_location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::RoiLocation>()},
  }}, {{
  }},
};

::uint8_t* SetRoiLocationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::roi_location(this),
        _Internal::roi_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  return target;
}

::size_t SetRoiLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.RoiLocation roi_location = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.roi_location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRoiLocationResponse::_class_data_ = {
    SetRoiLocationResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRoiLocationResponse::GetClassData() const {
  return &_class_data_;
}

void SetRoiLocationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRoiLocationResponse*>(&to_msg);
  auto& from = static_cast<const SetRoiLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_roi_location()->::mavsdk::rpc::gimbal_manager_server::RoiLocation::MergeFrom(
        from._internal_roi_location());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRoiLocationResponse::CopyFrom(const SetRoiLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.SetRoiLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRoiLocationResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRoiLocationResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRoiLocationResponse::InternalSwap(SetRoiLocationResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.roi_location_, other->_impl_.roi_location_);
}

::google::protobuf::Metadata SetRoiLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[13]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, w_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, w_) +
               sizeof(Impl_::z_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float z = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
    // float w = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // float x = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float w = 1;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x = 2;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 3;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 4;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float w = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_w(), target);
  }

  // float x = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 5;
  }

  // float x = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)
      + sizeof(Quaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[14]);
}
// ===================================================================

class Information::_Internal {
 public:
};

Information::Information(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.Information)
}
Information::Information(
    ::google::protobuf::Arena* arena, const Information& from)
    : Information(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Information::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Information::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cap_flags_),
           0,
           offsetof(Impl_, yaw_max_) -
               offsetof(Impl_, cap_flags_) +
               sizeof(Impl_::yaw_max_));
}
Information::~Information() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.Information)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Information::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Information::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.Information)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cap_flags_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_max_) -
      reinterpret_cast<char*>(&_impl_.cap_flags_)) + sizeof(_impl_.yaw_max_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Information::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> Information::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Information_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float yaw_max = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.yaw_max_)}},
    // uint32 cap_flags = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Information, _impl_.cap_flags_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.cap_flags_)}},
    // uint32 gimbal_device_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Information, _impl_.gimbal_device_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.gimbal_device_id_)}},
    // float roll_min = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.roll_min_)}},
    // float roll_max = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.roll_max_)}},
    // float pitch_min = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.pitch_min_)}},
    // float pitch_max = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.pitch_max_)}},
    // float yaw_min = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Information, _impl_.yaw_min_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 cap_flags = 1;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.cap_flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 gimbal_device_id = 2;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.gimbal_device_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // float roll_min = 3;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.roll_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll_max = 4;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.roll_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_min = 5;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.pitch_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_max = 6;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.pitch_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_min = 7;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.yaw_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_max = 8;
    {PROTOBUF_FIELD_OFFSET(Information, _impl_.yaw_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Information::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.Information)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 cap_flags = 1;
  if (this->_internal_cap_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cap_flags(), target);
  }

  // uint32 gimbal_device_id = 2;
  if (this->_internal_gimbal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gimbal_device_id(), target);
  }

  // float roll_min = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_min = this->_internal_roll_min();
  ::uint32_t raw_roll_min;
  memcpy(&raw_roll_min, &tmp_roll_min, sizeof(tmp_roll_min));
  if (raw_roll_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_roll_min(), target);
  }

  // float roll_max = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_max = this->_internal_roll_max();
  ::uint32_t raw_roll_max;
  memcpy(&raw_roll_max, &tmp_roll_max, sizeof(tmp_roll_max));
  if (raw_roll_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_roll_max(), target);
  }

  // float pitch_min = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_min = this->_internal_pitch_min();
  ::uint32_t raw_pitch_min;
  memcpy(&raw_pitch_min, &tmp_pitch_min, sizeof(tmp_pitch_min));
  if (raw_pitch_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_pitch_min(), target);
  }

  // float pitch_max = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_max = this->_internal_pitch_max();
  ::uint32_t raw_pitch_max;
  memcpy(&raw_pitch_max, &tmp_pitch_max, sizeof(tmp_pitch_max));
  if (raw_pitch_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_pitch_max(), target);
  }

  // float yaw_min = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_min = this->_internal_yaw_min();
  ::uint32_t raw_yaw_min;
  memcpy(&raw_yaw_min, &tmp_yaw_min, sizeof(tmp_yaw_min));
  if (raw_yaw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_yaw_min(), target);
  }

  // float yaw_max = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_max = this->_internal_yaw_max();
  ::uint32_t raw_yaw_max;
  memcpy(&raw_yaw_max, &tmp_yaw_max, sizeof(tmp_yaw_max));
  if (raw_yaw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_yaw_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.Information)
  return target;
}

::size_t Information::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.Information)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cap_flags = 1;
  if (this->_internal_cap_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_cap_flags());
  }

  // uint32 gimbal_device_id = 2;
  if (this->_internal_gimbal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_gimbal_device_id());
  }

  // float roll_min = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_min = this->_internal_roll_min();
  ::uint32_t raw_roll_min;
  memcpy(&raw_roll_min, &tmp_roll_min, sizeof(tmp_roll_min));
  if (raw_roll_min != 0) {
    total_size += 5;
  }

  // float roll_max = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_max = this->_internal_roll_max();
  ::uint32_t raw_roll_max;
  memcpy(&raw_roll_max, &tmp_roll_max, sizeof(tmp_roll_max));
  if (raw_roll_max != 0) {
    total_size += 5;
  }

  // float pitch_min = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_min = this->_internal_pitch_min();
  ::uint32_t raw_pitch_min;
  memcpy(&raw_pitch_min, &tmp_pitch_min, sizeof(tmp_pitch_min));
  if (raw_pitch_min != 0) {
    total_size += 5;
  }

  // float pitch_max = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_max = this->_internal_pitch_max();
  ::uint32_t raw_pitch_max;
  memcpy(&raw_pitch_max, &tmp_pitch_max, sizeof(tmp_pitch_max));
  if (raw_pitch_max != 0) {
    total_size += 5;
  }

  // float yaw_min = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_min = this->_internal_yaw_min();
  ::uint32_t raw_yaw_min;
  memcpy(&raw_yaw_min, &tmp_yaw_min, sizeof(tmp_yaw_min));
  if (raw_yaw_min != 0) {
    total_size += 5;
  }

  // float yaw_max = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_max = this->_internal_yaw_max();
  ::uint32_t raw_yaw_max;
  memcpy(&raw_yaw_max, &tmp_yaw_max, sizeof(tmp_yaw_max));
  if (raw_yaw_max != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Information::_class_data_ = {
    Information::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Information::GetClassData() const {
  return &_class_data_;
}

void Information::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Information*>(&to_msg);
  auto& from = static_cast<const Information&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.Information)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cap_flags() != 0) {
    _this->_internal_set_cap_flags(from._internal_cap_flags());
  }
  if (from._internal_gimbal_device_id() != 0) {
    _this->_internal_set_gimbal_device_id(from._internal_gimbal_device_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_min = from._internal_roll_min();
  ::uint32_t raw_roll_min;
  memcpy(&raw_roll_min, &tmp_roll_min, sizeof(tmp_roll_min));
  if (raw_roll_min != 0) {
    _this->_internal_set_roll_min(from._internal_roll_min());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_max = from._internal_roll_max();
  ::uint32_t raw_roll_max;
  memcpy(&raw_roll_max, &tmp_roll_max, sizeof(tmp_roll_max));
  if (raw_roll_max != 0) {
    _this->_internal_set_roll_max(from._internal_roll_max());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_min = from._internal_pitch_min();
  ::uint32_t raw_pitch_min;
  memcpy(&raw_pitch_min, &tmp_pitch_min, sizeof(tmp_pitch_min));
  if (raw_pitch_min != 0) {
    _this->_internal_set_pitch_min(from._internal_pitch_min());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_max = from._internal_pitch_max();
  ::uint32_t raw_pitch_max;
  memcpy(&raw_pitch_max, &tmp_pitch_max, sizeof(tmp_pitch_max));
  if (raw_pitch_max != 0) {
    _this->_internal_set_pitch_max(from._internal_pitch_max());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_min = from._internal_yaw_min();
  ::uint32_t raw_yaw_min;
  memcpy(&raw_yaw_min, &tmp_yaw_min, sizeof(tmp_yaw_min));
  if (raw_yaw_min != 0) {
    _this->_internal_set_yaw_min(from._internal_yaw_min());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_max = from._internal_yaw_max();
  ::uint32_t raw_yaw_max;
  memcpy(&raw_yaw_max, &tmp_yaw_max, sizeof(tmp_yaw_max));
  if (raw_yaw_max != 0) {
    _this->_internal_set_yaw_max(from._internal_yaw_max());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Information::CopyFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Information::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Information::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Information::InternalSwap(Information* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Information, _impl_.yaw_max_)
      + sizeof(Information::_impl_.yaw_max_)
      - PROTOBUF_FIELD_OFFSET(Information, _impl_.cap_flags_)>(
          reinterpret_cast<char*>(&_impl_.cap_flags_),
          reinterpret_cast<char*>(&other->_impl_.cap_flags_));
}

::google::protobuf::Metadata Information::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[15]);
}
// ===================================================================

class GimbalManagerConfiguration::_Internal {
 public:
};

GimbalManagerConfiguration::GimbalManagerConfiguration(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
}
GimbalManagerConfiguration::GimbalManagerConfiguration(
    ::google::protobuf::Arena* arena, const GimbalManagerConfiguration& from)
    : GimbalManagerConfiguration(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GimbalManagerConfiguration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sysid_primary_control_),
           0,
           offsetof(Impl_, gimbal_device_id_) -
               offsetof(Impl_, sysid_primary_control_) +
               sizeof(Impl_::gimbal_device_id_));
}
GimbalManagerConfiguration::~GimbalManagerConfiguration() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GimbalManagerConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GimbalManagerConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sysid_primary_control_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gimbal_device_id_) -
      reinterpret_cast<char*>(&_impl_.sysid_primary_control_)) + sizeof(_impl_.gimbal_device_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GimbalManagerConfiguration::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> GimbalManagerConfiguration::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GimbalManagerConfiguration_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 sysid_primary_control = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerConfiguration, _impl_.sysid_primary_control_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.sysid_primary_control_)}},
    // uint32 compid_primary_control = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerConfiguration, _impl_.compid_primary_control_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.compid_primary_control_)}},
    // uint32 sysid_secondary_control = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerConfiguration, _impl_.sysid_secondary_control_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.sysid_secondary_control_)}},
    // uint32 compid_secondary_control = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerConfiguration, _impl_.compid_secondary_control_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.compid_secondary_control_)}},
    // uint32 gimbal_device_id = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerConfiguration, _impl_.gimbal_device_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.gimbal_device_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 sysid_primary_control = 1;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.sysid_primary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 compid_primary_control = 2;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.compid_primary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 sysid_secondary_control = 3;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.sysid_secondary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 compid_secondary_control = 4;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.compid_secondary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 gimbal_device_id = 5;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.gimbal_device_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GimbalManagerConfiguration::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 sysid_primary_control = 1;
  if (this->_internal_sysid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_sysid_primary_control(), target);
  }

  // uint32 compid_primary_control = 2;
  if (this->_internal_compid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_compid_primary_control(), target);
  }

  // uint32 sysid_secondary_control = 3;
  if (this->_internal_sysid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_sysid_secondary_control(), target);
  }

  // uint32 compid_secondary_control = 4;
  if (this->_internal_compid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_compid_secondary_control(), target);
  }

  // uint32 gimbal_device_id = 5;
  if (this->_internal_gimbal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_gimbal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  return target;
}

::size_t GimbalManagerConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sysid_primary_control = 1;
  if (this->_internal_sysid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sysid_primary_control());
  }

  // uint32 compid_primary_control = 2;
  if (this->_internal_compid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_compid_primary_control());
  }

  // uint32 sysid_secondary_control = 3;
  if (this->_internal_sysid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sysid_secondary_control());
  }

  // uint32 compid_secondary_control = 4;
  if (this->_internal_compid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_compid_secondary_control());
  }

  // uint32 gimbal_device_id = 5;
  if (this->_internal_gimbal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_gimbal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GimbalManagerConfiguration::_class_data_ = {
    GimbalManagerConfiguration::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GimbalManagerConfiguration::GetClassData() const {
  return &_class_data_;
}

void GimbalManagerConfiguration::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GimbalManagerConfiguration*>(&to_msg);
  auto& from = static_cast<const GimbalManagerConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sysid_primary_control() != 0) {
    _this->_internal_set_sysid_primary_control(from._internal_sysid_primary_control());
  }
  if (from._internal_compid_primary_control() != 0) {
    _this->_internal_set_compid_primary_control(from._internal_compid_primary_control());
  }
  if (from._internal_sysid_secondary_control() != 0) {
    _this->_internal_set_sysid_secondary_control(from._internal_sysid_secondary_control());
  }
  if (from._internal_compid_secondary_control() != 0) {
    _this->_internal_set_compid_secondary_control(from._internal_compid_secondary_control());
  }
  if (from._internal_gimbal_device_id() != 0) {
    _this->_internal_set_gimbal_device_id(from._internal_gimbal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalManagerConfiguration::CopyFrom(const GimbalManagerConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GimbalManagerConfiguration::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GimbalManagerConfiguration::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GimbalManagerConfiguration::InternalSwap(GimbalManagerConfiguration* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.gimbal_device_id_)
      + sizeof(GimbalManagerConfiguration::_impl_.gimbal_device_id_)
      - PROTOBUF_FIELD_OFFSET(GimbalManagerConfiguration, _impl_.sysid_primary_control_)>(
          reinterpret_cast<char*>(&_impl_.sysid_primary_control_),
          reinterpret_cast<char*>(&other->_impl_.sysid_primary_control_));
}

::google::protobuf::Metadata GimbalManagerConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[16]);
}
// ===================================================================

class DeviceAttitudeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAttitudeStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::Quaternion& q(const DeviceAttitudeStatus* msg);
  static void set_has_q(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::Quaternion& DeviceAttitudeStatus::_Internal::q(const DeviceAttitudeStatus* msg) {
  return *msg->_impl_.q_;
}
DeviceAttitudeStatus::DeviceAttitudeStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
}
inline PROTOBUF_NDEBUG_INLINE DeviceAttitudeStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeviceAttitudeStatus::DeviceAttitudeStatus(
    ::google::protobuf::Arena* arena,
    const DeviceAttitudeStatus& from)
    : ::google::protobuf::Message(arena) {
  DeviceAttitudeStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.q_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Quaternion>(arena, *from._impl_.q_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_boot_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, time_boot_ms_),
           offsetof(Impl_, failure_flags_) -
               offsetof(Impl_, time_boot_ms_) +
               sizeof(Impl_::failure_flags_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
}
inline PROTOBUF_NDEBUG_INLINE DeviceAttitudeStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeviceAttitudeStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, q_),
           0,
           offsetof(Impl_, failure_flags_) -
               offsetof(Impl_, q_) +
               sizeof(Impl_::failure_flags_));
}
DeviceAttitudeStatus::~DeviceAttitudeStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceAttitudeStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.q_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeviceAttitudeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.q_ != nullptr);
    _impl_.q_->Clear();
  }
  ::memset(&_impl_.time_boot_ms_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.failure_flags_) -
      reinterpret_cast<char*>(&_impl_.time_boot_ms_)) + sizeof(_impl_.failure_flags_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceAttitudeStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> DeviceAttitudeStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceAttitudeStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 time_boot_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceAttitudeStatus, _impl_.time_boot_ms_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.time_boot_ms_)}},
    // uint32 flags = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceAttitudeStatus, _impl_.flags_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.flags_)}},
    // .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.q_)}},
    // float angular_velocity_x = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_x_)}},
    // float angular_velocity_y = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_y_)}},
    // float angular_velocity_z = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_z_)}},
    // uint32 failure_flags = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceAttitudeStatus, _impl_.failure_flags_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.failure_flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 time_boot_ms = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.time_boot_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 flags = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.q_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float angular_velocity_x = 4;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_velocity_y = 5;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_y_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_velocity_z = 6;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.angular_velocity_z_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 failure_flags = 7;
    {PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.failure_flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* DeviceAttitudeStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 time_boot_ms = 1;
  if (this->_internal_time_boot_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_time_boot_ms(), target);
  }

  // uint32 flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  // float angular_velocity_x = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_x = this->_internal_angular_velocity_x();
  ::uint32_t raw_angular_velocity_x;
  memcpy(&raw_angular_velocity_x, &tmp_angular_velocity_x, sizeof(tmp_angular_velocity_x));
  if (raw_angular_velocity_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_angular_velocity_x(), target);
  }

  // float angular_velocity_y = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_y = this->_internal_angular_velocity_y();
  ::uint32_t raw_angular_velocity_y;
  memcpy(&raw_angular_velocity_y, &tmp_angular_velocity_y, sizeof(tmp_angular_velocity_y));
  if (raw_angular_velocity_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_angular_velocity_y(), target);
  }

  // float angular_velocity_z = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_z = this->_internal_angular_velocity_z();
  ::uint32_t raw_angular_velocity_z;
  memcpy(&raw_angular_velocity_z, &tmp_angular_velocity_z, sizeof(tmp_angular_velocity_z));
  if (raw_angular_velocity_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_angular_velocity_z(), target);
  }

  // uint32 failure_flags = 7;
  if (this->_internal_failure_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_failure_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  return target;
}

::size_t DeviceAttitudeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.Quaternion q = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.q_);
  }

  // uint32 time_boot_ms = 1;
  if (this->_internal_time_boot_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_time_boot_ms());
  }

  // uint32 flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_flags());
  }

  // float angular_velocity_x = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_x = this->_internal_angular_velocity_x();
  ::uint32_t raw_angular_velocity_x;
  memcpy(&raw_angular_velocity_x, &tmp_angular_velocity_x, sizeof(tmp_angular_velocity_x));
  if (raw_angular_velocity_x != 0) {
    total_size += 5;
  }

  // float angular_velocity_y = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_y = this->_internal_angular_velocity_y();
  ::uint32_t raw_angular_velocity_y;
  memcpy(&raw_angular_velocity_y, &tmp_angular_velocity_y, sizeof(tmp_angular_velocity_y));
  if (raw_angular_velocity_y != 0) {
    total_size += 5;
  }

  // float angular_velocity_z = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_z = this->_internal_angular_velocity_z();
  ::uint32_t raw_angular_velocity_z;
  memcpy(&raw_angular_velocity_z, &tmp_angular_velocity_z, sizeof(tmp_angular_velocity_z));
  if (raw_angular_velocity_z != 0) {
    total_size += 5;
  }

  // uint32 failure_flags = 7;
  if (this->_internal_failure_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_failure_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceAttitudeStatus::_class_data_ = {
    DeviceAttitudeStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeviceAttitudeStatus::GetClassData() const {
  return &_class_data_;
}

void DeviceAttitudeStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceAttitudeStatus*>(&to_msg);
  auto& from = static_cast<const DeviceAttitudeStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_q()->::mavsdk::rpc::gimbal_manager_server::Quaternion::MergeFrom(
        from._internal_q());
  }
  if (from._internal_time_boot_ms() != 0) {
    _this->_internal_set_time_boot_ms(from._internal_time_boot_ms());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_x = from._internal_angular_velocity_x();
  ::uint32_t raw_angular_velocity_x;
  memcpy(&raw_angular_velocity_x, &tmp_angular_velocity_x, sizeof(tmp_angular_velocity_x));
  if (raw_angular_velocity_x != 0) {
    _this->_internal_set_angular_velocity_x(from._internal_angular_velocity_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_y = from._internal_angular_velocity_y();
  ::uint32_t raw_angular_velocity_y;
  memcpy(&raw_angular_velocity_y, &tmp_angular_velocity_y, sizeof(tmp_angular_velocity_y));
  if (raw_angular_velocity_y != 0) {
    _this->_internal_set_angular_velocity_y(from._internal_angular_velocity_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angular_velocity_z = from._internal_angular_velocity_z();
  ::uint32_t raw_angular_velocity_z;
  memcpy(&raw_angular_velocity_z, &tmp_angular_velocity_z, sizeof(tmp_angular_velocity_z));
  if (raw_angular_velocity_z != 0) {
    _this->_internal_set_angular_velocity_z(from._internal_angular_velocity_z());
  }
  if (from._internal_failure_flags() != 0) {
    _this->_internal_set_failure_flags(from._internal_failure_flags());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAttitudeStatus::CopyFrom(const DeviceAttitudeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.DeviceAttitudeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceAttitudeStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeviceAttitudeStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeviceAttitudeStatus::InternalSwap(DeviceAttitudeStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.failure_flags_)
      + sizeof(DeviceAttitudeStatus::_impl_.failure_flags_)
      - PROTOBUF_FIELD_OFFSET(DeviceAttitudeStatus, _impl_.q_)>(
          reinterpret_cast<char*>(&_impl_.q_),
          reinterpret_cast<char*>(&other->_impl_.q_));
}

::google::protobuf::Metadata DeviceAttitudeStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[17]);
}
// ===================================================================

class GimbalManagerServerResult::_Internal {
 public:
};

GimbalManagerServerResult::GimbalManagerServerResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerServerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

GimbalManagerServerResult::GimbalManagerServerResult(
    ::google::protobuf::Arena* arena,
    const GimbalManagerServerResult& from)
    : ::google::protobuf::Message(arena) {
  GimbalManagerServerResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerServerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void GimbalManagerServerResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
GimbalManagerServerResult::~GimbalManagerServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GimbalManagerServerResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.result_str_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GimbalManagerServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GimbalManagerServerResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 77, 2> GimbalManagerServerResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GimbalManagerServerResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerServerResult, _impl_.result_str_)}},
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerServerResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerServerResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerServerResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerServerResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\0\12\0\0\0\0\0"
    "mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult"
    "result_str"
  }},
};

::uint8_t* GimbalManagerServerResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  return target;
}

::size_t GimbalManagerServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GimbalManagerServerResult::_class_data_ = {
    GimbalManagerServerResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GimbalManagerServerResult::GetClassData() const {
  return &_class_data_;
}

void GimbalManagerServerResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GimbalManagerServerResult*>(&to_msg);
  auto& from = static_cast<const GimbalManagerServerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalManagerServerResult::CopyFrom(const GimbalManagerServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GimbalManagerServerResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GimbalManagerServerResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GimbalManagerServerResult::InternalSwap(GimbalManagerServerResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata GimbalManagerServerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[18]);
}
// ===================================================================

class GimbalManagerStatus::_Internal {
 public:
};

GimbalManagerStatus::GimbalManagerStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
}
GimbalManagerStatus::GimbalManagerStatus(
    ::google::protobuf::Arena* arena, const GimbalManagerStatus& from)
    : GimbalManagerStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GimbalManagerStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GimbalManagerStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, flags_),
           0,
           offsetof(Impl_, secondary_control_compid_) -
               offsetof(Impl_, flags_) +
               sizeof(Impl_::secondary_control_compid_));
}
GimbalManagerStatus::~GimbalManagerStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GimbalManagerStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GimbalManagerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.secondary_control_compid_) -
      reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.secondary_control_compid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GimbalManagerStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> GimbalManagerStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GimbalManagerStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 flags = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.flags_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.flags_)}},
    // uint32 gimbal_device_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.gimbal_device_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.gimbal_device_id_)}},
    // uint32 primary_control_sysid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.primary_control_sysid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.primary_control_sysid_)}},
    // uint32 primary_control_compid = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.primary_control_compid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.primary_control_compid_)}},
    // uint32 secondary_control_sysid = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.secondary_control_sysid_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.secondary_control_sysid_)}},
    // uint32 secondary_control_compid = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalManagerStatus, _impl_.secondary_control_compid_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.secondary_control_compid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 flags = 1;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 gimbal_device_id = 2;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.gimbal_device_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 primary_control_sysid = 3;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.primary_control_sysid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 primary_control_compid = 4;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.primary_control_compid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 secondary_control_sysid = 5;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.secondary_control_sysid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 secondary_control_compid = 6;
    {PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.secondary_control_compid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GimbalManagerStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_flags(), target);
  }

  // uint32 gimbal_device_id = 2;
  if (this->_internal_gimbal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gimbal_device_id(), target);
  }

  // uint32 primary_control_sysid = 3;
  if (this->_internal_primary_control_sysid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_primary_control_sysid(), target);
  }

  // uint32 primary_control_compid = 4;
  if (this->_internal_primary_control_compid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_primary_control_compid(), target);
  }

  // uint32 secondary_control_sysid = 5;
  if (this->_internal_secondary_control_sysid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_secondary_control_sysid(), target);
  }

  // uint32 secondary_control_compid = 6;
  if (this->_internal_secondary_control_compid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_secondary_control_compid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  return target;
}

::size_t GimbalManagerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_flags());
  }

  // uint32 gimbal_device_id = 2;
  if (this->_internal_gimbal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_gimbal_device_id());
  }

  // uint32 primary_control_sysid = 3;
  if (this->_internal_primary_control_sysid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_primary_control_sysid());
  }

  // uint32 primary_control_compid = 4;
  if (this->_internal_primary_control_compid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_primary_control_compid());
  }

  // uint32 secondary_control_sysid = 5;
  if (this->_internal_secondary_control_sysid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_secondary_control_sysid());
  }

  // uint32 secondary_control_compid = 6;
  if (this->_internal_secondary_control_compid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_secondary_control_compid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GimbalManagerStatus::_class_data_ = {
    GimbalManagerStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GimbalManagerStatus::GetClassData() const {
  return &_class_data_;
}

void GimbalManagerStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GimbalManagerStatus*>(&to_msg);
  auto& from = static_cast<const GimbalManagerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_gimbal_device_id() != 0) {
    _this->_internal_set_gimbal_device_id(from._internal_gimbal_device_id());
  }
  if (from._internal_primary_control_sysid() != 0) {
    _this->_internal_set_primary_control_sysid(from._internal_primary_control_sysid());
  }
  if (from._internal_primary_control_compid() != 0) {
    _this->_internal_set_primary_control_compid(from._internal_primary_control_compid());
  }
  if (from._internal_secondary_control_sysid() != 0) {
    _this->_internal_set_secondary_control_sysid(from._internal_secondary_control_sysid());
  }
  if (from._internal_secondary_control_compid() != 0) {
    _this->_internal_set_secondary_control_compid(from._internal_secondary_control_compid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalManagerStatus::CopyFrom(const GimbalManagerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.GimbalManagerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GimbalManagerStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GimbalManagerStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GimbalManagerStatus::InternalSwap(GimbalManagerStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.secondary_control_compid_)
      + sizeof(GimbalManagerStatus::_impl_.secondary_control_compid_)
      - PROTOBUF_FIELD_OFFSET(GimbalManagerStatus, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::google::protobuf::Metadata GimbalManagerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[19]);
}
// ===================================================================

class SetAttitude::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAttitude>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal_manager_server::Quaternion& attitude_quaternion(const SetAttitude* msg);
  static void set_has_attitude_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal_manager_server::Quaternion& SetAttitude::_Internal::attitude_quaternion(const SetAttitude* msg) {
  return *msg->_impl_.attitude_quaternion_;
}
SetAttitude::SetAttitude(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.SetAttitude)
}
inline PROTOBUF_NDEBUG_INLINE SetAttitude::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetAttitude::SetAttitude(
    ::google::protobuf::Arena* arena,
    const SetAttitude& from)
    : ::google::protobuf::Message(arena) {
  SetAttitude* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_quaternion_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal_manager_server::Quaternion>(arena, *from._impl_.attitude_quaternion_)
                : nullptr;
  _impl_.flags_ = from._impl_.flags_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal_manager_server.SetAttitude)
}
inline PROTOBUF_NDEBUG_INLINE SetAttitude::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetAttitude::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attitude_quaternion_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, attitude_quaternion_) +
               sizeof(Impl_::flags_));
}
SetAttitude::~SetAttitude() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAttitude::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_quaternion_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetAttitude::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_quaternion_ != nullptr);
    _impl_.attitude_quaternion_->Clear();
  }
  _impl_.flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAttitude::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SetAttitude::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetAttitude_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.attitude_quaternion_)}},
    // uint32 flags = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SetAttitude, _impl_.flags_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 flags = 1;
    {PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
    {PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.attitude_quaternion_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal_manager_server::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* SetAttitude::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_flags(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::attitude_quaternion(this),
        _Internal::attitude_quaternion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  return target;
}

::size_t SetAttitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal_manager_server.Quaternion attitude_quaternion = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_quaternion_);
  }

  // uint32 flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAttitude::_class_data_ = {
    SetAttitude::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetAttitude::GetClassData() const {
  return &_class_data_;
}

void SetAttitude::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAttitude*>(&to_msg);
  auto& from = static_cast<const SetAttitude&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_quaternion()->::mavsdk::rpc::gimbal_manager_server::Quaternion::MergeFrom(
        from._internal_attitude_quaternion());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttitude::CopyFrom(const SetAttitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.SetAttitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAttitude::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetAttitude::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetAttitude::InternalSwap(SetAttitude* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.flags_)
      + sizeof(SetAttitude::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(SetAttitude, _impl_.attitude_quaternion_)>(
          reinterpret_cast<char*>(&_impl_.attitude_quaternion_),
          reinterpret_cast<char*>(&other->_impl_.attitude_quaternion_));
}

::google::protobuf::Metadata SetAttitude::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[20]);
}
// ===================================================================

class RoiLocation::_Internal {
 public:
};

RoiLocation::RoiLocation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal_manager_server.RoiLocation)
}
RoiLocation::RoiLocation(
    ::google::protobuf::Arena* arena, const RoiLocation& from)
    : RoiLocation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RoiLocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RoiLocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, longitude_deg_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::longitude_deg_));
}
RoiLocation::~RoiLocation() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RoiLocation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RoiLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_deg_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.longitude_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RoiLocation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> RoiLocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RoiLocation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float absolute_altitude_m = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.absolute_altitude_m_)}},
    // uint32 gimbal_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoiLocation, _impl_.gimbal_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.gimbal_id_)}},
    // double latitude_deg = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.latitude_deg_)}},
    // double longitude_deg = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.longitude_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 gimbal_id = 1;
    {PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.gimbal_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // double latitude_deg = 2;
    {PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 3;
    {PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 4;
    {PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RoiLocation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_gimbal_id(), target);
  }

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_absolute_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  return target;
}

::size_t RoiLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // uint32 gimbal_id = 1;
  if (this->_internal_gimbal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_gimbal_id());
  }

  // float absolute_altitude_m = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 5;
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RoiLocation::_class_data_ = {
    RoiLocation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RoiLocation::GetClassData() const {
  return &_class_data_;
}

void RoiLocation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RoiLocation*>(&to_msg);
  auto& from = static_cast<const RoiLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (from._internal_gimbal_id() != 0) {
    _this->_internal_set_gimbal_id(from._internal_gimbal_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _this->_internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoiLocation::CopyFrom(const RoiLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal_manager_server.RoiLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RoiLocation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RoiLocation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RoiLocation::InternalSwap(RoiLocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.longitude_deg_)
      + sizeof(RoiLocation::_impl_.longitude_deg_)
      - PROTOBUF_FIELD_OFFSET(RoiLocation, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata RoiLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_getter, &descriptor_table_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto_once,
      file_level_metadata_gimbal_5fmanager_5fserver_2fgimbal_5fmanager_5fserver_2eproto[21]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal_manager_server
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
