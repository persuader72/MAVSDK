// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/remote_id/remote_id.proto)

#include "remote_id/remote_id.grpc.pb.h"
#include "plugins/remote_id/remote_id.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename RemoteId = RemoteId, typename LazyPlugin = LazyPlugin<RemoteId>>

class RemoteIdServiceImpl final : public rpc::remote_id::RemoteIdService::Service {
public:
    RemoteIdServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::RemoteId::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_remote_id_result = new rpc::remote_id::RemoteIdResult();
        rpc_remote_id_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_remote_id_result->set_result_str(ss.str());

        response->set_allocated_remote_id_result(rpc_remote_id_result);
    }

    static std::unique_ptr<rpc::remote_id::BasicId>
    translateToRpcBasicId(const mavsdk::RemoteId::BasicId& basic_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::BasicId>();

        rpc_obj->set_id_type(basic_id.id_type);

        rpc_obj->set_ua_type(basic_id.ua_type);

        rpc_obj->set_uas_id(basic_id.uas_id);

        return rpc_obj;
    }

    static mavsdk::RemoteId::BasicId
    translateFromRpcBasicId(const rpc::remote_id::BasicId& basic_id)
    {
        mavsdk::RemoteId::BasicId obj;

        obj.id_type = basic_id.id_type();

        obj.ua_type = basic_id.ua_type();

        obj.uas_id = basic_id.uas_id();

        return obj;
    }

    static std::unique_ptr<rpc::remote_id::Location>
    translateToRpcLocation(const mavsdk::RemoteId::Location& location)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::Location>();

        rpc_obj->set_status(location.status);

        rpc_obj->set_direction(location.direction);

        rpc_obj->set_speed_horizontal(location.speed_horizontal);

        rpc_obj->set_speed_vertical(location.speed_vertical);

        rpc_obj->set_latitude(location.latitude);

        rpc_obj->set_longitude(location.longitude);

        rpc_obj->set_altitude_barometric(location.altitude_barometric);

        rpc_obj->set_altitude_geodetic(location.altitude_geodetic);

        rpc_obj->set_height_reference(location.height_reference);

        rpc_obj->set_height(location.height);

        rpc_obj->set_timestamp(location.timestamp);

        rpc_obj->set_timestamp_accuracy(location.timestamp_accuracy);

        return rpc_obj;
    }

    static mavsdk::RemoteId::Location
    translateFromRpcLocation(const rpc::remote_id::Location& location)
    {
        mavsdk::RemoteId::Location obj;

        obj.status = location.status();

        obj.direction = location.direction();

        obj.speed_horizontal = location.speed_horizontal();

        obj.speed_vertical = location.speed_vertical();

        obj.latitude = location.latitude();

        obj.longitude = location.longitude();

        obj.altitude_barometric = location.altitude_barometric();

        obj.altitude_geodetic = location.altitude_geodetic();

        obj.height_reference = location.height_reference();

        obj.height = location.height();

        obj.timestamp = location.timestamp();

        obj.timestamp_accuracy = location.timestamp_accuracy();

        return obj;
    }

    static std::unique_ptr<rpc::remote_id::SystemId>
    translateToRpcSystemId(const mavsdk::RemoteId::SystemId& system_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::SystemId>();

        rpc_obj->set_operator_location_type(system_id.operator_location_type);

        rpc_obj->set_classification_type(system_id.classification_type);

        rpc_obj->set_operator_latitude(system_id.operator_latitude);

        rpc_obj->set_operator_longitude(system_id.operator_longitude);

        rpc_obj->set_area_count(system_id.area_count);

        rpc_obj->set_area_radius(system_id.area_radius);

        rpc_obj->set_area_ceiling(system_id.area_ceiling);

        rpc_obj->set_area_floor(system_id.area_floor);

        rpc_obj->set_category_eu(system_id.category_eu);

        rpc_obj->set_class_eu(system_id.class_eu);

        rpc_obj->set_operator_altitude_geo(system_id.operator_altitude_geo);

        rpc_obj->set_timestamp(system_id.timestamp);

        return rpc_obj;
    }

    static mavsdk::RemoteId::SystemId
    translateFromRpcSystemId(const rpc::remote_id::SystemId& system_id)
    {
        mavsdk::RemoteId::SystemId obj;

        obj.operator_location_type = system_id.operator_location_type();

        obj.classification_type = system_id.classification_type();

        obj.operator_latitude = system_id.operator_latitude();

        obj.operator_longitude = system_id.operator_longitude();

        obj.area_count = system_id.area_count();

        obj.area_radius = system_id.area_radius();

        obj.area_ceiling = system_id.area_ceiling();

        obj.area_floor = system_id.area_floor();

        obj.category_eu = system_id.category_eu();

        obj.class_eu = system_id.class_eu();

        obj.operator_altitude_geo = system_id.operator_altitude_geo();

        obj.timestamp = system_id.timestamp();

        return obj;
    }

    static std::unique_ptr<rpc::remote_id::OperatorId>
    translateToRpcOperatorId(const mavsdk::RemoteId::OperatorId& operator_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::OperatorId>();

        rpc_obj->set_operator_id_type(operator_id.operator_id_type);

        rpc_obj->set_operator_id(operator_id.operator_id);

        return rpc_obj;
    }

    static mavsdk::RemoteId::OperatorId
    translateFromRpcOperatorId(const rpc::remote_id::OperatorId& operator_id)
    {
        mavsdk::RemoteId::OperatorId obj;

        obj.operator_id_type = operator_id.operator_id_type();

        obj.operator_id = operator_id.operator_id();

        return obj;
    }

    static std::unique_ptr<rpc::remote_id::SelfId>
    translateToRpcSelfId(const mavsdk::RemoteId::SelfId& self_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::SelfId>();

        rpc_obj->set_description_type(self_id.description_type);

        rpc_obj->set_description(self_id.description);

        return rpc_obj;
    }

    static mavsdk::RemoteId::SelfId translateFromRpcSelfId(const rpc::remote_id::SelfId& self_id)
    {
        mavsdk::RemoteId::SelfId obj;

        obj.description_type = self_id.description_type();

        obj.description = self_id.description();

        return obj;
    }

    static rpc::remote_id::RemoteIdResult::Result
    translateToRpcResult(const mavsdk::RemoteId::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::RemoteId::Result::Unknown:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_UNKNOWN;
            case mavsdk::RemoteId::Result::Success:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_SUCCESS;
            case mavsdk::RemoteId::Result::Error:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_ERROR;
        }
    }

    static mavsdk::RemoteId::Result
    translateFromRpcResult(const rpc::remote_id::RemoteIdResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::remote_id::RemoteIdResult_Result_RESULT_UNKNOWN:
                return mavsdk::RemoteId::Result::Unknown;
            case rpc::remote_id::RemoteIdResult_Result_RESULT_SUCCESS:
                return mavsdk::RemoteId::Result::Success;
            case rpc::remote_id::RemoteIdResult_Result_RESULT_ERROR:
                return mavsdk::RemoteId::Result::Error;
        }
    }

    grpc::Status SetBasicId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetBasicIdRequest* request,
        rpc::remote_id::SetBasicIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetBasicId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_basic_id(translateFromRpcBasicId(request->basic_id()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetLocation(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetLocationRequest* request,
        rpc::remote_id::SetLocationResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetLocation sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_location(
            translateFromRpcLocation(request->location()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetSystem(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetSystemRequest* request,
        rpc::remote_id::SetSystemResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetSystem sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_system(translateFromRpcSystemId(request->system()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetOperatorId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetOperatorIdRequest* request,
        rpc::remote_id::SetOperatorIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetOperatorId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_operator_id(
            translateFromRpcOperatorId(request->system()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetSelfId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetSelfIdRequest* request,
        rpc::remote_id::SetSelfIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetSelfId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_self_id(translateFromRpcSelfId(request->self_id()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk