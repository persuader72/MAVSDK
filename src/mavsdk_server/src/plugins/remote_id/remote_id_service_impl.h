// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/remote_id/remote_id.proto)

#include "remote_id/remote_id.grpc.pb.h"
#include "plugins/remote_id/remote_id.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename RemoteId = RemoteId, typename LazyPlugin = LazyPlugin<RemoteId>>

class RemoteIdServiceImpl final : public rpc::remote_id::RemoteIdService::Service {
public:
    RemoteIdServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::RemoteId::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_remote_id_result = new rpc::remote_id::RemoteIdResult();
        rpc_remote_id_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_remote_id_result->set_result_str(ss.str());

        response->set_allocated_remote_id_result(rpc_remote_id_result);
    }

    static rpc::remote_id::BasicId::IdType
    translateToRpcIdType(const mavsdk::RemoteId::BasicId::IdType& id_type)
    {
        switch (id_type) {
            default:
                LogErr() << "Unknown id_type enum value: " << static_cast<int>(id_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::BasicId::IdType::None:
                return rpc::remote_id::BasicId_IdType_ID_TYPE_NONE;
            case mavsdk::RemoteId::BasicId::IdType::SerialNumber:
                return rpc::remote_id::BasicId_IdType_ID_TYPE_SERIAL_NUMBER;
            case mavsdk::RemoteId::BasicId::IdType::CaaRegistrationId:
                return rpc::remote_id::BasicId_IdType_ID_TYPE_CAA_REGISTRATION_ID;
            case mavsdk::RemoteId::BasicId::IdType::UtmAssignedUuid:
                return rpc::remote_id::BasicId_IdType_ID_TYPE_UTM_ASSIGNED_UUID;
            case mavsdk::RemoteId::BasicId::IdType::SpecificSessionId:
                return rpc::remote_id::BasicId_IdType_ID_TYPE_SPECIFIC_SESSION_ID;
        }
    }

    static mavsdk::RemoteId::BasicId::IdType
    translateFromRpcIdType(const rpc::remote_id::BasicId::IdType id_type)
    {
        switch (id_type) {
            default:
                LogErr() << "Unknown id_type enum value: " << static_cast<int>(id_type);
            // FALLTHROUGH
            case rpc::remote_id::BasicId_IdType_ID_TYPE_NONE:
                return mavsdk::RemoteId::BasicId::IdType::None;
            case rpc::remote_id::BasicId_IdType_ID_TYPE_SERIAL_NUMBER:
                return mavsdk::RemoteId::BasicId::IdType::SerialNumber;
            case rpc::remote_id::BasicId_IdType_ID_TYPE_CAA_REGISTRATION_ID:
                return mavsdk::RemoteId::BasicId::IdType::CaaRegistrationId;
            case rpc::remote_id::BasicId_IdType_ID_TYPE_UTM_ASSIGNED_UUID:
                return mavsdk::RemoteId::BasicId::IdType::UtmAssignedUuid;
            case rpc::remote_id::BasicId_IdType_ID_TYPE_SPECIFIC_SESSION_ID:
                return mavsdk::RemoteId::BasicId::IdType::SpecificSessionId;
        }
    }

    static rpc::remote_id::BasicId::UasType
    translateToRpcUasType(const mavsdk::RemoteId::BasicId::UasType& uas_type)
    {
        switch (uas_type) {
            default:
                LogErr() << "Unknown uas_type enum value: " << static_cast<int>(uas_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::BasicId::UasType::None:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_NONE;
            case mavsdk::RemoteId::BasicId::UasType::Aeroplane:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_AEROPLANE;
            case mavsdk::RemoteId::BasicId::UasType::HelicopterOrMultirotor:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_HELICOPTER_OR_MULTIROTOR;
            case mavsdk::RemoteId::BasicId::UasType::Gyroplane:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_GYROPLANE;
            case mavsdk::RemoteId::BasicId::UasType::HybridLift:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_HYBRID_LIFT;
            case mavsdk::RemoteId::BasicId::UasType::Ornithopter:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_ORNITHOPTER;
            case mavsdk::RemoteId::BasicId::UasType::Glider:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_GLIDER;
            case mavsdk::RemoteId::BasicId::UasType::Kite:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_KITE;
            case mavsdk::RemoteId::BasicId::UasType::FreeBalloon:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_FREE_BALLOON;
            case mavsdk::RemoteId::BasicId::UasType::CaptiveBalloon:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_CAPTIVE_BALLOON;
            case mavsdk::RemoteId::BasicId::UasType::Airship:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_AIRSHIP;
            case mavsdk::RemoteId::BasicId::UasType::FreeFallParachute:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_FREE_FALL_PARACHUTE;
            case mavsdk::RemoteId::BasicId::UasType::Rocket:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_ROCKET;
            case mavsdk::RemoteId::BasicId::UasType::TetheredPoweredAircraft:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_TETHERED_POWERED_AIRCRAFT;
            case mavsdk::RemoteId::BasicId::UasType::GroundObstacle:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_GROUND_OBSTACLE;
            case mavsdk::RemoteId::BasicId::UasType::Other:
                return rpc::remote_id::BasicId_UasType_UAS_TYPE_OTHER;
        }
    }

    static mavsdk::RemoteId::BasicId::UasType
    translateFromRpcUasType(const rpc::remote_id::BasicId::UasType uas_type)
    {
        switch (uas_type) {
            default:
                LogErr() << "Unknown uas_type enum value: " << static_cast<int>(uas_type);
            // FALLTHROUGH
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_NONE:
                return mavsdk::RemoteId::BasicId::UasType::None;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_AEROPLANE:
                return mavsdk::RemoteId::BasicId::UasType::Aeroplane;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_HELICOPTER_OR_MULTIROTOR:
                return mavsdk::RemoteId::BasicId::UasType::HelicopterOrMultirotor;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_GYROPLANE:
                return mavsdk::RemoteId::BasicId::UasType::Gyroplane;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_HYBRID_LIFT:
                return mavsdk::RemoteId::BasicId::UasType::HybridLift;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_ORNITHOPTER:
                return mavsdk::RemoteId::BasicId::UasType::Ornithopter;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_GLIDER:
                return mavsdk::RemoteId::BasicId::UasType::Glider;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_KITE:
                return mavsdk::RemoteId::BasicId::UasType::Kite;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_FREE_BALLOON:
                return mavsdk::RemoteId::BasicId::UasType::FreeBalloon;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_CAPTIVE_BALLOON:
                return mavsdk::RemoteId::BasicId::UasType::CaptiveBalloon;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_AIRSHIP:
                return mavsdk::RemoteId::BasicId::UasType::Airship;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_FREE_FALL_PARACHUTE:
                return mavsdk::RemoteId::BasicId::UasType::FreeFallParachute;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_ROCKET:
                return mavsdk::RemoteId::BasicId::UasType::Rocket;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_TETHERED_POWERED_AIRCRAFT:
                return mavsdk::RemoteId::BasicId::UasType::TetheredPoweredAircraft;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_GROUND_OBSTACLE:
                return mavsdk::RemoteId::BasicId::UasType::GroundObstacle;
            case rpc::remote_id::BasicId_UasType_UAS_TYPE_OTHER:
                return mavsdk::RemoteId::BasicId::UasType::Other;
        }
    }

    static std::unique_ptr<rpc::remote_id::BasicId>
    translateToRpcBasicId(const mavsdk::RemoteId::BasicId& basic_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::BasicId>();

        rpc_obj->set_id_type(translateToRpcIdType(basic_id.id_type));

        rpc_obj->set_ua_type(translateToRpcUasType(basic_id.ua_type));

        rpc_obj->set_uas_id(basic_id.uas_id);

        return rpc_obj;
    }

    static mavsdk::RemoteId::BasicId
    translateFromRpcBasicId(const rpc::remote_id::BasicId& basic_id)
    {
        mavsdk::RemoteId::BasicId obj;

        obj.id_type = translateFromRpcIdType(basic_id.id_type());

        obj.ua_type = translateFromRpcUasType(basic_id.ua_type());

        obj.uas_id = basic_id.uas_id();

        return obj;
    }

    static rpc::remote_id::Location::Status
    translateToRpcStatus(const mavsdk::RemoteId::Location::Status& status)
    {
        switch (status) {
            default:
                LogErr() << "Unknown status enum value: " << static_cast<int>(status);
            // FALLTHROUGH
            case mavsdk::RemoteId::Location::Status::Undeclared:
                return rpc::remote_id::Location_Status_STATUS_UNDECLARED;
            case mavsdk::RemoteId::Location::Status::Ground:
                return rpc::remote_id::Location_Status_STATUS_GROUND;
            case mavsdk::RemoteId::Location::Status::Airborne:
                return rpc::remote_id::Location_Status_STATUS_AIRBORNE;
            case mavsdk::RemoteId::Location::Status::Emergency:
                return rpc::remote_id::Location_Status_STATUS_EMERGENCY;
            case mavsdk::RemoteId::Location::Status::RemoteIdSystemFailure:
                return rpc::remote_id::Location_Status_STATUS_REMOTE_ID_SYSTEM_FAILURE;
        }
    }

    static mavsdk::RemoteId::Location::Status
    translateFromRpcStatus(const rpc::remote_id::Location::Status status)
    {
        switch (status) {
            default:
                LogErr() << "Unknown status enum value: " << static_cast<int>(status);
            // FALLTHROUGH
            case rpc::remote_id::Location_Status_STATUS_UNDECLARED:
                return mavsdk::RemoteId::Location::Status::Undeclared;
            case rpc::remote_id::Location_Status_STATUS_GROUND:
                return mavsdk::RemoteId::Location::Status::Ground;
            case rpc::remote_id::Location_Status_STATUS_AIRBORNE:
                return mavsdk::RemoteId::Location::Status::Airborne;
            case rpc::remote_id::Location_Status_STATUS_EMERGENCY:
                return mavsdk::RemoteId::Location::Status::Emergency;
            case rpc::remote_id::Location_Status_STATUS_REMOTE_ID_SYSTEM_FAILURE:
                return mavsdk::RemoteId::Location::Status::RemoteIdSystemFailure;
        }
    }

    static rpc::remote_id::Location::HeightRef
    translateToRpcHeightRef(const mavsdk::RemoteId::Location::HeightRef& height_ref)
    {
        switch (height_ref) {
            default:
                LogErr() << "Unknown height_ref enum value: " << static_cast<int>(height_ref);
            // FALLTHROUGH
            case mavsdk::RemoteId::Location::HeightRef::OverTakeoff:
                return rpc::remote_id::Location_HeightRef_HEIGHT_REF_OVER_TAKEOFF;
            case mavsdk::RemoteId::Location::HeightRef::OverGround:
                return rpc::remote_id::Location_HeightRef_HEIGHT_REF_OVER_GROUND;
        }
    }

    static mavsdk::RemoteId::Location::HeightRef
    translateFromRpcHeightRef(const rpc::remote_id::Location::HeightRef height_ref)
    {
        switch (height_ref) {
            default:
                LogErr() << "Unknown height_ref enum value: " << static_cast<int>(height_ref);
            // FALLTHROUGH
            case rpc::remote_id::Location_HeightRef_HEIGHT_REF_OVER_TAKEOFF:
                return mavsdk::RemoteId::Location::HeightRef::OverTakeoff;
            case rpc::remote_id::Location_HeightRef_HEIGHT_REF_OVER_GROUND:
                return mavsdk::RemoteId::Location::HeightRef::OverGround;
        }
    }

    static std::unique_ptr<rpc::remote_id::Location>
    translateToRpcLocation(const mavsdk::RemoteId::Location& location)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::Location>();

        rpc_obj->set_status(translateToRpcStatus(location.status));

        rpc_obj->set_direction_deg(location.direction_deg);

        rpc_obj->set_speed_horizontal_m_s(location.speed_horizontal_m_s);

        rpc_obj->set_speed_vertical_m_s(location.speed_vertical_m_s);

        rpc_obj->set_latitude_deg(location.latitude_deg);

        rpc_obj->set_longitude_deg(location.longitude_deg);

        rpc_obj->set_altitude_barometric_m(location.altitude_barometric_m);

        rpc_obj->set_altitude_geodetic_m(location.altitude_geodetic_m);

        rpc_obj->set_height_reference(translateToRpcHeightRef(location.height_reference));

        rpc_obj->set_height_m(location.height_m);

        rpc_obj->set_time_utc_us(location.time_utc_us);

        return rpc_obj;
    }

    static mavsdk::RemoteId::Location
    translateFromRpcLocation(const rpc::remote_id::Location& location)
    {
        mavsdk::RemoteId::Location obj;

        obj.status = translateFromRpcStatus(location.status());

        obj.direction_deg = location.direction_deg();

        obj.speed_horizontal_m_s = location.speed_horizontal_m_s();

        obj.speed_vertical_m_s = location.speed_vertical_m_s();

        obj.latitude_deg = location.latitude_deg();

        obj.longitude_deg = location.longitude_deg();

        obj.altitude_barometric_m = location.altitude_barometric_m();

        obj.altitude_geodetic_m = location.altitude_geodetic_m();

        obj.height_reference = translateFromRpcHeightRef(location.height_reference());

        obj.height_m = location.height_m();

        obj.time_utc_us = location.time_utc_us();

        return obj;
    }

    static rpc::remote_id::LocationAccuracy::HorAcc
    translateToRpcHorAcc(const mavsdk::RemoteId::LocationAccuracy::HorAcc& hor_acc)
    {
        switch (hor_acc) {
            default:
                LogErr() << "Unknown hor_acc enum value: " << static_cast<int>(hor_acc);
            // FALLTHROUGH
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Unknown:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_UNKNOWN;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm10:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_10;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm4:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_4;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm2:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_2;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm1:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_1;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm05:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_5;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm03:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_3;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm01:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_1;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm005:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_05;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter30:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_30;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter10:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_10;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter3:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_3;
            case mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter1:
                return rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_1;
        }
    }

    static mavsdk::RemoteId::LocationAccuracy::HorAcc
    translateFromRpcHorAcc(const rpc::remote_id::LocationAccuracy::HorAcc hor_acc)
    {
        switch (hor_acc) {
            default:
                LogErr() << "Unknown hor_acc enum value: " << static_cast<int>(hor_acc);
            // FALLTHROUGH
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_UNKNOWN:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Unknown;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_10:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm10;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_4:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm4;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_2:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm2;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_1:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm1;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_5:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm05;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_3:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm03;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_1:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm01;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_NM_0_05:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Nm005;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_30:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter30;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_10:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter10;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_3:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter3;
            case rpc::remote_id::LocationAccuracy_HorAcc_HOR_ACC_METER_1:
                return mavsdk::RemoteId::LocationAccuracy::HorAcc::Meter1;
        }
    }

    static rpc::remote_id::LocationAccuracy::VerAcc
    translateToRpcVerAcc(const mavsdk::RemoteId::LocationAccuracy::VerAcc& ver_acc)
    {
        switch (ver_acc) {
            default:
                LogErr() << "Unknown ver_acc enum value: " << static_cast<int>(ver_acc);
            // FALLTHROUGH
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Unknown:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_UNKNOWN;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter150:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_150;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter45:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_45;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter25:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_25;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter10:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_10;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter3:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_3;
            case mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter1:
                return rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_1;
        }
    }

    static mavsdk::RemoteId::LocationAccuracy::VerAcc
    translateFromRpcVerAcc(const rpc::remote_id::LocationAccuracy::VerAcc ver_acc)
    {
        switch (ver_acc) {
            default:
                LogErr() << "Unknown ver_acc enum value: " << static_cast<int>(ver_acc);
            // FALLTHROUGH
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_UNKNOWN:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Unknown;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_150:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter150;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_45:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter45;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_25:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter25;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_10:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter10;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_3:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter3;
            case rpc::remote_id::LocationAccuracy_VerAcc_VER_ACC_METER_1:
                return mavsdk::RemoteId::LocationAccuracy::VerAcc::Meter1;
        }
    }

    static rpc::remote_id::LocationAccuracy::SpeedAcc
    translateToRpcSpeedAcc(const mavsdk::RemoteId::LocationAccuracy::SpeedAcc& speed_acc)
    {
        switch (speed_acc) {
            default:
                LogErr() << "Unknown speed_acc enum value: " << static_cast<int>(speed_acc);
            // FALLTHROUGH
            case mavsdk::RemoteId::LocationAccuracy::SpeedAcc::Unknown:
                return rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_UNKNOWN;
            case mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond10:
                return rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_10;
            case mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecon3:
                return rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECON_3;
            case mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond1:
                return rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_1;
            case mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond03:
                return rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_0_3;
        }
    }

    static mavsdk::RemoteId::LocationAccuracy::SpeedAcc
    translateFromRpcSpeedAcc(const rpc::remote_id::LocationAccuracy::SpeedAcc speed_acc)
    {
        switch (speed_acc) {
            default:
                LogErr() << "Unknown speed_acc enum value: " << static_cast<int>(speed_acc);
            // FALLTHROUGH
            case rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_UNKNOWN:
                return mavsdk::RemoteId::LocationAccuracy::SpeedAcc::Unknown;
            case rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_10:
                return mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond10;
            case rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECON_3:
                return mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecon3;
            case rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_1:
                return mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond1;
            case rpc::remote_id::LocationAccuracy_SpeedAcc_SPEED_ACC_METERS_PER_SECOND_0_3:
                return mavsdk::RemoteId::LocationAccuracy::SpeedAcc::MetersPerSecond03;
        }
    }

    static rpc::remote_id::LocationAccuracy::TimeAcc
    translateToRpcTimeAcc(const mavsdk::RemoteId::LocationAccuracy::TimeAcc& time_acc)
    {
        switch (time_acc) {
            default:
                LogErr() << "Unknown time_acc enum value: " << static_cast<int>(time_acc);
            // FALLTHROUGH
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Unknown:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_UNKNOWN;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second01:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_1;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second02:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_2;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second03:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_3;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second04:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_4;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second05:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_5;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second06:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_6;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second07:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_7;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second08:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_8;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second09:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_9;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second10:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_0;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second11:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_1;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second12:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_2;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second13:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_3;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second14:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_4;
            case mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second15:
                return rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_5;
        }
    }

    static mavsdk::RemoteId::LocationAccuracy::TimeAcc
    translateFromRpcTimeAcc(const rpc::remote_id::LocationAccuracy::TimeAcc time_acc)
    {
        switch (time_acc) {
            default:
                LogErr() << "Unknown time_acc enum value: " << static_cast<int>(time_acc);
            // FALLTHROUGH
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_UNKNOWN:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Unknown;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_1:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second01;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_2:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second02;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_3:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second03;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_4:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second04;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_5:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second05;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_6:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second06;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_7:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second07;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_8:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second08;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_0_9:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second09;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_0:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second10;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_1:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second11;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_2:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second12;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_3:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second13;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_4:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second14;
            case rpc::remote_id::LocationAccuracy_TimeAcc_TIME_ACC_SECOND_1_5:
                return mavsdk::RemoteId::LocationAccuracy::TimeAcc::Second15;
        }
    }

    static std::unique_ptr<rpc::remote_id::LocationAccuracy>
    translateToRpcLocationAccuracy(const mavsdk::RemoteId::LocationAccuracy& location_accuracy)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::LocationAccuracy>();

        rpc_obj->set_horizontal_accuracy(
            translateToRpcHorAcc(location_accuracy.horizontal_accuracy));

        rpc_obj->set_vertical_accuracy(translateToRpcVerAcc(location_accuracy.vertical_accuracy));

        rpc_obj->set_barometer_accuracy(translateToRpcVerAcc(location_accuracy.barometer_accuracy));

        rpc_obj->set_speed_accuracy(translateToRpcSpeedAcc(location_accuracy.speed_accuracy));

        rpc_obj->set_timestamp_accuracy(
            translateToRpcTimeAcc(location_accuracy.timestamp_accuracy));

        return rpc_obj;
    }

    static mavsdk::RemoteId::LocationAccuracy
    translateFromRpcLocationAccuracy(const rpc::remote_id::LocationAccuracy& location_accuracy)
    {
        mavsdk::RemoteId::LocationAccuracy obj;

        obj.horizontal_accuracy = translateFromRpcHorAcc(location_accuracy.horizontal_accuracy());

        obj.vertical_accuracy = translateFromRpcVerAcc(location_accuracy.vertical_accuracy());

        obj.barometer_accuracy = translateFromRpcVerAcc(location_accuracy.barometer_accuracy());

        obj.speed_accuracy = translateFromRpcSpeedAcc(location_accuracy.speed_accuracy());

        obj.timestamp_accuracy = translateFromRpcTimeAcc(location_accuracy.timestamp_accuracy());

        return obj;
    }

    static rpc::remote_id::SystemId::OperatorLocationType translateToRpcOperatorLocationType(
        const mavsdk::RemoteId::SystemId::OperatorLocationType& operator_location_type)
    {
        switch (operator_location_type) {
            default:
                LogErr() << "Unknown operator_location_type enum value: "
                         << static_cast<int>(operator_location_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::SystemId::OperatorLocationType::Takeoff:
                return rpc::remote_id::SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_TAKEOFF;
            case mavsdk::RemoteId::SystemId::OperatorLocationType::LiveGnss:
                return rpc::remote_id::
                    SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_LIVE_GNSS;
            case mavsdk::RemoteId::SystemId::OperatorLocationType::Fixed:
                return rpc::remote_id::SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_FIXED;
        }
    }

    static mavsdk::RemoteId::SystemId::OperatorLocationType translateFromRpcOperatorLocationType(
        const rpc::remote_id::SystemId::OperatorLocationType operator_location_type)
    {
        switch (operator_location_type) {
            default:
                LogErr() << "Unknown operator_location_type enum value: "
                         << static_cast<int>(operator_location_type);
            // FALLTHROUGH
            case rpc::remote_id::SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_TAKEOFF:
                return mavsdk::RemoteId::SystemId::OperatorLocationType::Takeoff;
            case rpc::remote_id::SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_LIVE_GNSS:
                return mavsdk::RemoteId::SystemId::OperatorLocationType::LiveGnss;
            case rpc::remote_id::SystemId_OperatorLocationType_OPERATOR_LOCATION_TYPE_FIXED:
                return mavsdk::RemoteId::SystemId::OperatorLocationType::Fixed;
        }
    }

    static rpc::remote_id::SystemId::ClassificationType translateToRpcClassificationType(
        const mavsdk::RemoteId::SystemId::ClassificationType& classification_type)
    {
        switch (classification_type) {
            default:
                LogErr() << "Unknown classification_type enum value: "
                         << static_cast<int>(classification_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::SystemId::ClassificationType::Undeclared:
                return rpc::remote_id::SystemId_ClassificationType_CLASSIFICATION_TYPE_UNDECLARED;
            case mavsdk::RemoteId::SystemId::ClassificationType::Eu:
                return rpc::remote_id::SystemId_ClassificationType_CLASSIFICATION_TYPE_EU;
        }
    }

    static mavsdk::RemoteId::SystemId::ClassificationType translateFromRpcClassificationType(
        const rpc::remote_id::SystemId::ClassificationType classification_type)
    {
        switch (classification_type) {
            default:
                LogErr() << "Unknown classification_type enum value: "
                         << static_cast<int>(classification_type);
            // FALLTHROUGH
            case rpc::remote_id::SystemId_ClassificationType_CLASSIFICATION_TYPE_UNDECLARED:
                return mavsdk::RemoteId::SystemId::ClassificationType::Undeclared;
            case rpc::remote_id::SystemId_ClassificationType_CLASSIFICATION_TYPE_EU:
                return mavsdk::RemoteId::SystemId::ClassificationType::Eu;
        }
    }

    static rpc::remote_id::SystemId::CategoryEu
    translateToRpcCategoryEu(const mavsdk::RemoteId::SystemId::CategoryEu& category_eu)
    {
        switch (category_eu) {
            default:
                LogErr() << "Unknown category_eu enum value: " << static_cast<int>(category_eu);
            // FALLTHROUGH
            case mavsdk::RemoteId::SystemId::CategoryEu::Undeclared:
                return rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_UNDECLARED;
            case mavsdk::RemoteId::SystemId::CategoryEu::Open:
                return rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_OPEN;
            case mavsdk::RemoteId::SystemId::CategoryEu::Specific:
                return rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_SPECIFIC;
            case mavsdk::RemoteId::SystemId::CategoryEu::Certified:
                return rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_CERTIFIED;
        }
    }

    static mavsdk::RemoteId::SystemId::CategoryEu
    translateFromRpcCategoryEu(const rpc::remote_id::SystemId::CategoryEu category_eu)
    {
        switch (category_eu) {
            default:
                LogErr() << "Unknown category_eu enum value: " << static_cast<int>(category_eu);
            // FALLTHROUGH
            case rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_UNDECLARED:
                return mavsdk::RemoteId::SystemId::CategoryEu::Undeclared;
            case rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_OPEN:
                return mavsdk::RemoteId::SystemId::CategoryEu::Open;
            case rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_SPECIFIC:
                return mavsdk::RemoteId::SystemId::CategoryEu::Specific;
            case rpc::remote_id::SystemId_CategoryEu_CATEGORY_EU_CERTIFIED:
                return mavsdk::RemoteId::SystemId::CategoryEu::Certified;
        }
    }

    static rpc::remote_id::SystemId::ClassEu
    translateToRpcClassEu(const mavsdk::RemoteId::SystemId::ClassEu& class_eu)
    {
        switch (class_eu) {
            default:
                LogErr() << "Unknown class_eu enum value: " << static_cast<int>(class_eu);
            // FALLTHROUGH
            case mavsdk::RemoteId::SystemId::ClassEu::Undeclared:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_UNDECLARED;
            case mavsdk::RemoteId::SystemId::ClassEu::Class0:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_0;
            case mavsdk::RemoteId::SystemId::ClassEu::Class1:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_1;
            case mavsdk::RemoteId::SystemId::ClassEu::Class2:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_2;
            case mavsdk::RemoteId::SystemId::ClassEu::Class3:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_3;
            case mavsdk::RemoteId::SystemId::ClassEu::Class4:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_4;
            case mavsdk::RemoteId::SystemId::ClassEu::Class5:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_5;
            case mavsdk::RemoteId::SystemId::ClassEu::Class6:
                return rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_6;
        }
    }

    static mavsdk::RemoteId::SystemId::ClassEu
    translateFromRpcClassEu(const rpc::remote_id::SystemId::ClassEu class_eu)
    {
        switch (class_eu) {
            default:
                LogErr() << "Unknown class_eu enum value: " << static_cast<int>(class_eu);
            // FALLTHROUGH
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_UNDECLARED:
                return mavsdk::RemoteId::SystemId::ClassEu::Undeclared;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_0:
                return mavsdk::RemoteId::SystemId::ClassEu::Class0;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_1:
                return mavsdk::RemoteId::SystemId::ClassEu::Class1;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_2:
                return mavsdk::RemoteId::SystemId::ClassEu::Class2;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_3:
                return mavsdk::RemoteId::SystemId::ClassEu::Class3;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_4:
                return mavsdk::RemoteId::SystemId::ClassEu::Class4;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_5:
                return mavsdk::RemoteId::SystemId::ClassEu::Class5;
            case rpc::remote_id::SystemId_ClassEu_CLASS_EU_CLASS_6:
                return mavsdk::RemoteId::SystemId::ClassEu::Class6;
        }
    }

    static std::unique_ptr<rpc::remote_id::SystemId>
    translateToRpcSystemId(const mavsdk::RemoteId::SystemId& system_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::SystemId>();

        rpc_obj->set_operator_location_type(
            translateToRpcOperatorLocationType(system_id.operator_location_type));

        rpc_obj->set_classification_type(
            translateToRpcClassificationType(system_id.classification_type));

        rpc_obj->set_operator_latitude_deg(system_id.operator_latitude_deg);

        rpc_obj->set_operator_longitude_deg(system_id.operator_longitude_deg);

        rpc_obj->set_area_count(system_id.area_count);

        rpc_obj->set_area_radius_m(system_id.area_radius_m);

        rpc_obj->set_area_ceiling_m(system_id.area_ceiling_m);

        rpc_obj->set_area_floor_m(system_id.area_floor_m);

        rpc_obj->set_category_eu(translateToRpcCategoryEu(system_id.category_eu));

        rpc_obj->set_class_eu(translateToRpcClassEu(system_id.class_eu));

        rpc_obj->set_operator_altitude_geo_m(system_id.operator_altitude_geo_m);

        rpc_obj->set_time_utc_us(system_id.time_utc_us);

        return rpc_obj;
    }

    static mavsdk::RemoteId::SystemId
    translateFromRpcSystemId(const rpc::remote_id::SystemId& system_id)
    {
        mavsdk::RemoteId::SystemId obj;

        obj.operator_location_type =
            translateFromRpcOperatorLocationType(system_id.operator_location_type());

        obj.classification_type =
            translateFromRpcClassificationType(system_id.classification_type());

        obj.operator_latitude_deg = system_id.operator_latitude_deg();

        obj.operator_longitude_deg = system_id.operator_longitude_deg();

        obj.area_count = system_id.area_count();

        obj.area_radius_m = system_id.area_radius_m();

        obj.area_ceiling_m = system_id.area_ceiling_m();

        obj.area_floor_m = system_id.area_floor_m();

        obj.category_eu = translateFromRpcCategoryEu(system_id.category_eu());

        obj.class_eu = translateFromRpcClassEu(system_id.class_eu());

        obj.operator_altitude_geo_m = system_id.operator_altitude_geo_m();

        obj.time_utc_us = system_id.time_utc_us();

        return obj;
    }

    static rpc::remote_id::OperatorId::OperatorIdType translateToRpcOperatorIdType(
        const mavsdk::RemoteId::OperatorId::OperatorIdType& operator_id_type)
    {
        switch (operator_id_type) {
            default:
                LogErr() << "Unknown operator_id_type enum value: "
                         << static_cast<int>(operator_id_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::OperatorId::OperatorIdType::Caa:
                return rpc::remote_id::OperatorId_OperatorIdType_OPERATOR_ID_TYPE_CAA;
        }
    }

    static mavsdk::RemoteId::OperatorId::OperatorIdType translateFromRpcOperatorIdType(
        const rpc::remote_id::OperatorId::OperatorIdType operator_id_type)
    {
        switch (operator_id_type) {
            default:
                LogErr() << "Unknown operator_id_type enum value: "
                         << static_cast<int>(operator_id_type);
            // FALLTHROUGH
            case rpc::remote_id::OperatorId_OperatorIdType_OPERATOR_ID_TYPE_CAA:
                return mavsdk::RemoteId::OperatorId::OperatorIdType::Caa;
        }
    }

    static std::unique_ptr<rpc::remote_id::OperatorId>
    translateToRpcOperatorId(const mavsdk::RemoteId::OperatorId& operator_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::OperatorId>();

        rpc_obj->set_operator_id_type(translateToRpcOperatorIdType(operator_id.operator_id_type));

        rpc_obj->set_operator_id(operator_id.operator_id);

        return rpc_obj;
    }

    static mavsdk::RemoteId::OperatorId
    translateFromRpcOperatorId(const rpc::remote_id::OperatorId& operator_id)
    {
        mavsdk::RemoteId::OperatorId obj;

        obj.operator_id_type = translateFromRpcOperatorIdType(operator_id.operator_id_type());

        obj.operator_id = operator_id.operator_id();

        return obj;
    }

    static rpc::remote_id::SelfId::DescType
    translateToRpcDescType(const mavsdk::RemoteId::SelfId::DescType& desc_type)
    {
        switch (desc_type) {
            default:
                LogErr() << "Unknown desc_type enum value: " << static_cast<int>(desc_type);
            // FALLTHROUGH
            case mavsdk::RemoteId::SelfId::DescType::Text:
                return rpc::remote_id::SelfId_DescType_DESC_TYPE_TEXT;
            case mavsdk::RemoteId::SelfId::DescType::Emergency:
                return rpc::remote_id::SelfId_DescType_DESC_TYPE_EMERGENCY;
            case mavsdk::RemoteId::SelfId::DescType::ExtendedStatus:
                return rpc::remote_id::SelfId_DescType_DESC_TYPE_EXTENDED_STATUS;
        }
    }

    static mavsdk::RemoteId::SelfId::DescType
    translateFromRpcDescType(const rpc::remote_id::SelfId::DescType desc_type)
    {
        switch (desc_type) {
            default:
                LogErr() << "Unknown desc_type enum value: " << static_cast<int>(desc_type);
            // FALLTHROUGH
            case rpc::remote_id::SelfId_DescType_DESC_TYPE_TEXT:
                return mavsdk::RemoteId::SelfId::DescType::Text;
            case rpc::remote_id::SelfId_DescType_DESC_TYPE_EMERGENCY:
                return mavsdk::RemoteId::SelfId::DescType::Emergency;
            case rpc::remote_id::SelfId_DescType_DESC_TYPE_EXTENDED_STATUS:
                return mavsdk::RemoteId::SelfId::DescType::ExtendedStatus;
        }
    }

    static std::unique_ptr<rpc::remote_id::SelfId>
    translateToRpcSelfId(const mavsdk::RemoteId::SelfId& self_id)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::SelfId>();

        rpc_obj->set_description_type(translateToRpcDescType(self_id.description_type));

        rpc_obj->set_description(self_id.description);

        return rpc_obj;
    }

    static mavsdk::RemoteId::SelfId translateFromRpcSelfId(const rpc::remote_id::SelfId& self_id)
    {
        mavsdk::RemoteId::SelfId obj;

        obj.description_type = translateFromRpcDescType(self_id.description_type());

        obj.description = self_id.description();

        return obj;
    }

    static rpc::remote_id::ArmStatus::Status
    translateToRpcStatus(const mavsdk::RemoteId::ArmStatus::Status& status)
    {
        switch (status) {
            default:
                LogErr() << "Unknown status enum value: " << static_cast<int>(status);
            // FALLTHROUGH
            case mavsdk::RemoteId::ArmStatus::Status::GoodToArm:
                return rpc::remote_id::ArmStatus_Status_STATUS_GOOD_TO_ARM;
            case mavsdk::RemoteId::ArmStatus::Status::PreArmFailGeneric:
                return rpc::remote_id::ArmStatus_Status_STATUS_PRE_ARM_FAIL_GENERIC;
        }
    }

    static mavsdk::RemoteId::ArmStatus::Status
    translateFromRpcStatus(const rpc::remote_id::ArmStatus::Status status)
    {
        switch (status) {
            default:
                LogErr() << "Unknown status enum value: " << static_cast<int>(status);
            // FALLTHROUGH
            case rpc::remote_id::ArmStatus_Status_STATUS_GOOD_TO_ARM:
                return mavsdk::RemoteId::ArmStatus::Status::GoodToArm;
            case rpc::remote_id::ArmStatus_Status_STATUS_PRE_ARM_FAIL_GENERIC:
                return mavsdk::RemoteId::ArmStatus::Status::PreArmFailGeneric;
        }
    }

    static std::unique_ptr<rpc::remote_id::ArmStatus>
    translateToRpcArmStatus(const mavsdk::RemoteId::ArmStatus& arm_status)
    {
        auto rpc_obj = std::make_unique<rpc::remote_id::ArmStatus>();

        rpc_obj->set_status(translateToRpcStatus(arm_status.status));

        rpc_obj->set_error(arm_status.error);

        return rpc_obj;
    }

    static mavsdk::RemoteId::ArmStatus
    translateFromRpcArmStatus(const rpc::remote_id::ArmStatus& arm_status)
    {
        mavsdk::RemoteId::ArmStatus obj;

        obj.status = translateFromRpcStatus(arm_status.status());

        obj.error = arm_status.error();

        return obj;
    }

    static rpc::remote_id::RemoteIdResult::Result
    translateToRpcResult(const mavsdk::RemoteId::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::RemoteId::Result::Unknown:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_UNKNOWN;
            case mavsdk::RemoteId::Result::Success:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_SUCCESS;
            case mavsdk::RemoteId::Result::Error:
                return rpc::remote_id::RemoteIdResult_Result_RESULT_ERROR;
        }
    }

    static mavsdk::RemoteId::Result
    translateFromRpcResult(const rpc::remote_id::RemoteIdResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::remote_id::RemoteIdResult_Result_RESULT_UNKNOWN:
                return mavsdk::RemoteId::Result::Unknown;
            case rpc::remote_id::RemoteIdResult_Result_RESULT_SUCCESS:
                return mavsdk::RemoteId::Result::Success;
            case rpc::remote_id::RemoteIdResult_Result_RESULT_ERROR:
                return mavsdk::RemoteId::Result::Error;
        }
    }

    grpc::Status SetBasicId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetBasicIdRequest* request,
        rpc::remote_id::SetBasicIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetBasicId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_basic_id(translateFromRpcBasicId(request->basic_id()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetLocation(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetLocationRequest* request,
        rpc::remote_id::SetLocationResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetLocation sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_location(
            translateFromRpcLocation(request->location()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetLocationAccuracy(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetLocationAccuracyRequest* request,
        rpc::remote_id::SetLocationAccuracyResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetLocationAccuracy sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_location_accuracy(
            translateFromRpcLocationAccuracy(request->location_accuracy()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetSystem(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetSystemRequest* request,
        rpc::remote_id::SetSystemResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetSystem sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_system(translateFromRpcSystemId(request->system()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetOperatorId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetOperatorIdRequest* request,
        rpc::remote_id::SetOperatorIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetOperatorId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_operator_id(
            translateFromRpcOperatorId(request->system()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetSelfId(
        grpc::ServerContext* /* context */,
        const rpc::remote_id::SetSelfIdRequest* request,
        rpc::remote_id::SetSelfIdResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::RemoteId::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetSelfId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result =
            _lazy_plugin.maybe_plugin()->set_self_id(translateFromRpcSelfId(request->self_id()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeArmStatus(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::remote_id::SubscribeArmStatusRequest* /* request */,
        grpc::ServerWriter<rpc::remote_id::ArmStatusResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        const mavsdk::RemoteId::ArmStatusHandle handle =
            _lazy_plugin.maybe_plugin()->subscribe_arm_status(
                [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex, &handle](
                    const mavsdk::RemoteId::ArmStatus arm_status) {
                    rpc::remote_id::ArmStatusResponse rpc_response;

                    rpc_response.set_allocated_arm_status(
                        translateToRpcArmStatus(arm_status).release());

                    std::unique_lock<std::mutex> lock(*subscribe_mutex);
                    if (!*is_finished && !writer->Write(rpc_response)) {
                        _lazy_plugin.maybe_plugin()->unsubscribe_arm_status(handle);

                        *is_finished = true;
                        unregister_stream_stop_promise(stream_closed_promise);
                        stream_closed_promise->set_value();
                    }
                });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk